{"version":3,"sources":["history.js","actions/types.js","apis/train.js","apis/infer.js","apis/play.js","actions/utils.js","actions/index.js","components/cover/CoverModal.js","components/cover/Home.js","components/NavigationBar.js","components/Footer.js","components/HoverButtons.js","utils/index.js","components/train/TrainingConfigForm.js","components/train/imageClassification/ICClassListForm.js","components/train/imageClassification/ICClassList.js","components/train/imageClassification/ICClassChoiceForm.js","components/train/imageClassification/ICDataUploadForm.js","components/train/imageClassification/ICDataPreview.js","components/train/imageClassification/ICDataset.js","components/train/imageClassification/ICModal.js","components/train/imageClassification/ICCreate.js","components/train/TrainingSubmitModal.js","components/train/imageClassification/ImageClassification.js","components/FormFileField.js","components/train/textClassification/TCDataUploadForm.js","components/train/textClassification/TCModal.js","components/train/textClassification/TCCreate.js","components/train/textClassification/TextClassification.js","components/FloatingHelp.js","components/train/Training.js","components/infer/TokenForm.js","components/infer/DownloadForm.js","components/infer/InferenceForm.js","components/infer/TaskDisplay.js","components/infer/PreviewTask.js","components/infer/Inference.js","components/play/Playground.js","components/play/PlaygroundForm.js","components/play/HumanPoseEstimation.js","components/play/StyleTransfer.js","components/About.js","components/App.js","reducers/navigationReducer.js","reducers/mobileViewReducer.js","reducers/homeReducer.js","reducers/loadingFormReducer.js","reducers/formFileFieldReducer.js","reducers/imageClassificationReducer.js","reducers/textClassificationReducer.js","reducers/serverConfigReducer.js","reducers/inferenceReducer.js","reducers/playgroundReducer.js","reducers/index.js","index.js"],"names":["createBrowserHistory","basename","process","SET_NAV_LINKS","SET_MOBILE","SET_HOME","CLEAR_HOME","LOADING_FORM","CLEAR_LOADING_FORM","SET_FORM_FILE_FIELD_LABEL","CLEAR_FORM_FILE_FIELD_LABEL","TRAIN_TOKEN_SET","TRAIN_TOKEN_CLEAR","IC_CONFIG","IC_MODEL_TYPE","IC_DATA_SPLIT","IC_ADD_CLASS","IC_DELETE_CLASS","IC_CURRENT_CLASS","IC_ADD_IMAGES","IC_DATA_CLEAR","IC_CLEAR","TC_CONFIG","TC_RNN_TYPE","TC_DATA_SPLIT","TC_DATA_ADD","TC_DATA_CLEAR","TC_CLEAR","INFERENCE_CONFIG_SET","INFERENCE_CONFIG_CLEAR","INFERENCE_SUBMIT","INFERENCE_DOWNLOAD_SET_PYTORCH","INFERENCE_DOWNLOAD_CLEAR_PYTORCH","INFERENCE_DOWNLOAD_SET_ONNX","INFERENCE_DOWNLOAD_CLEAR_ONNX","INFERENCE_PREDICTION_CLEAR","INFERENCE_CLEAR","PLAYGROUND_SUBMIT","axios","create","baseURL","headers","post","networkTransaction","a","url","formData","requestType","maxNumTries","apiType","response","numTries","api","inferApi","trainApi","get","console","log","statusCheck","data","status","toastError","message","toast","dark","size","color","checkResponse","result","baseNetworkTransaction","playApi","loadingForm","formName","type","payload","clearLoadingForm","clearFormFileFieldLabel","clearTrainToken","setTrainConfig","taskName","config","clearTrainData","dispatch","clearTrainConfig","submitTrainRequest","trainConfig","FormData","append","JSON","stringify","token","reset","submitPlaygroundForm","responseData","name","CoverModal","props","modalCardContent","title","targetUrl","contentImage","contentText","buttonText","Card","className","Img","src","variant","style","height","alt","Body","Title","fontSize","Text","Button","as","Link","to","CardDeck","_","map","this","item","renderCardContent","ReactDOM","createPortal","onClick","onDismiss","e","stopPropagation","renderContent","Row","Col","document","querySelector","React","Component","Home","state","displayModal","toggleModal","setState","setHome","clearHome","playsInline","autoPlay","muted","Container","isMobile","Image","renderModal","connect","NavigationBar","toggleNavbar","expanded","closeNavbar","navItems","id","setNavLinks","Nav","history","location","pathname","substring","Navbar","expand","fixed","isHome","backgroundColor","Brand","Toggle","aria-controls","Collapse","renderNavItem","navLinks","withRouter","Footer","renderFooterBrand","xs","md","developerSocialMedia","href","target","window","scrollTo","items","disabled","navigationLinks","column","renderNavColumn","renderNavColums","fluid","border","opacity","HoverButtons","buttonData","buttonValue","Object","currentButtonValue","isSmall","event","preventDefault","changeCurrentButtonValue","undefined","hoverButtons","renderButton","renderLoadingPage","loadingText","Spinner","animation","role","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","removeFileBase64Header","image","replace","setErrorClass","touched","renderError","renderTextInput","input","label","placeholder","textAppend","enableAppendSumbit","readOnly","meta","Form","Label","InputGroup","Control","autoComplete","renderFormField","contentType","options","acceptFileFormat","multiple","isFixed","formGroupClassName","required","Group","renderTextInputGroup","default","value","key","renderDropdownInputGroup","isMultiple","omit","accept","renderFileInputGroup","split","htmlFor","renderSwitchInputGroup","errorClassName","renderFileField","renderSubmitButton","loading","originalText","btnColor","ref","aria-hidden","TrainingConfigForm","reduceLrOnPlateau","stepLr","toggleReduceLr","toggleStepLr","changeModelType","modelType","setTrainModelType","changeDataSplit","dataSplit","setTrainDataSplit","configOptions","batchSizeLimit","batchSizeMin","min","batchSizeMax","max","numEpochsLimit","numEpochsMin","numEpochsMax","onSubmit","handleSubmit","Field","component","modelFieldTitle","modelTypes","currentConfig","pretrainDatasets","onChange","optimizers","ownProps","initialValues","reduxForm","validate","formValues","errors","test","reduceLrOnPlateauLimit","factorLimit","factor","patienceLimit","patience","minLrLimit","minLr","stepLrLimit","stepSizeLimit","stepSize","gammaLimit","gamma","reduceLrOnPlateauPatience","reduceLrOnPlateauFactor","reduceLrOnPlateauMinLr","stepLrStepSize","stepLrGamma","learningRateLimit","learningRateMin","learningRateMax","learningRate","batchSize","epochs","ICClassListForm","classValue","isSaved","toggleSaveMode","classList","includes","icDeleteClass","icAddClass","initialData","isOptionalField","pattern","dataset","imageClassification","keys","classNameValue","ICClassList","range","numClassesLimit","number","length","form","renderClassList","IcClassChoiceForm","zipObject","enableReinitialize","values","submit","ICDataUploadForm","currentClass","numImagesExceeded","sizeExceeded","xl","datasetSize","numImagesLimitMax","numImagesLimit","sizeLimit","ICDataPreview","imgUrl","imgId","width","imgList","lg","renderCard","datasetPreview","ICDataset","onClassChoiceSubmit","icCurrentClass","fileListToArray","fileList","imagesList","Array","from","currentClassImgCount","slice","getImageListSize","imagesListSize","sumBy","partial","imageListToBase64","imagesListPreview","i","push","removeBase64HeaderFromImageList","onDataUploadSubmit","currentSize","info","icAddImages","ICClassChoiceForm","classChoice","IcModal","maxHeight","ICCreate","onModalDismiss","clear","checkNumClasses","numClassesLimitMin","checkNumImages","numImagesLimitMin","datasetValues","datasetFailedClasses","sum","onConfigSubmit","mode","taskType","ICModal","isEmpty","bindActionCreators","TrainingSubmitModal","serverConfig","ImageClassification","imagenet","cifar100","optimizer","currentTrainConfig","trainConfigOptions","FormFileField","fieldConfig","fieldLabel","hideFilename","setFormFileFieldLabel","files","formFileField","TCDataUploadForm","TCModal","csvData","tcCsvData","saAddData","numRows","textClassification","TCCreate","checkDataset","TextClassification","FloatinHelp","targetSection","tooltip","styles","Training","changeCurrentTask","currentTask","adam","sgd","renderCurrentTask","TokenForm","clearInferenceConfig","submitInferenceToken","enableAppendSubmit","inference","isDownloadable","downloadable","accuracy","accuracyPlot","DownloadForm","haltPytorch","haltOnnx","downloadFile","fetch","blob","objectUrl","URL","createObjectURL","createElement","download","at","click","onDownloadClick","format","setInferenceDownloadUrl","componentDidUpdate","downloadUrlPytorch","clearInferenceDownloadUrl","downloadUrlOnnx","downloadUrl","InferenceForm","inferenceInput","clearInferencePrediction","inputType","submitInferenceData","formInput","field","prediction","TaskDisplay","fieldValues","toFixed","renderAccuracy","renderOutput","PreviewTask","Inference","clearInference","Playground","playItems","link","media","textDecoration","PlaygroundForm","objectURL","otherData","objectItem","submitButtonRef","createRef","fields","HumanPoseEstimation","play","align","StyleTransfer","contentImageURL","content","styleImageURL","styleMap","1","2","3","4","5","6","7","8","9","Fragment","modelForm","renderOutputSmallDisplay","renderOutputLargeDisplay","About","trainingSectionRef","inferenceSectionRef","playgroundSectionRef","trainingSnapshots","text","inferenceSnapshots","playgroundSnapshots","locationState","current","scrollIntoView","behaviour","snapshotData","snapshot","renderSnapshots","renderFlash","renderImageClassificationInfo","renderTextClassificationInfo","renderTrainingInfo","renderInferenceInfo","renderPlaygroundInfo","rel","App","setMobile","innerWidth","addEventListener","resize","bind","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","path","exact","navigationReducer","action","homeReducer","loadingFormReducer","filter","element","INITIAL_STATE","formFileFieldReducer","imageClassificationReducer","textClassificationReducer","serverConfigReducer","inferenceReducer","playgroundReducer","combineReducers","formReducer","mobileViewReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.3aaeb881.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","export const SET_NAV_LINKS = 'SET_NAV_LINKS';\nexport const SET_MOBILE = 'SET_MOBILE';\nexport const SET_HOME = 'SET_HOME';\nexport const CLEAR_HOME = 'CLEAR_HOME';\nexport const LOADING_FORM = 'LOADING_FORM';\nexport const CLEAR_LOADING_FORM = 'CLEAR_LOADING_FORM';\nexport const SET_FORM_FILE_FIELD_LABEL = 'SET_FORM_FILE_FIELD_LABEL';\nexport const CLEAR_FORM_FILE_FIELD_LABEL = 'CLEAR_FORM_FILE_FIELD_LABEL';\nexport const TRAIN_TOKEN_SET = 'TRAIN_TOKEN_SET';\nexport const TRAIN_TOKEN_CLEAR = 'TRAIN_TOKEN_CLEAR';\nexport const IC_CONFIG = 'IC_CONFIG';\nexport const IC_MODEL_TYPE = 'IC_MODEL_TYPE';\nexport const IC_DATA_SPLIT = 'IC_DATA_SPLIT';\nexport const IC_ADD_CLASS = 'IC_ADD_CLASS';\nexport const IC_DELETE_CLASS = 'IC_DELETE_CLASS';\nexport const IC_CURRENT_CLASS = 'IC_CURRENT_CLASS';\nexport const IC_ADD_IMAGES = 'IC_ADD_IMAGES';\nexport const IC_DATA_CLEAR = 'IC_DATA_CLEAR';\nexport const IC_CLEAR = 'IC_CLEAR';\nexport const TC_CONFIG = 'TC_CONFIG';\nexport const TC_RNN_TYPE = 'TC_RNN_TYPE';\nexport const TC_DATA_SPLIT = 'TC_DATA_SPLIT';\nexport const TC_DATA_ADD = 'TC_DATA_ADD';\nexport const TC_DATA_CLEAR = 'TC_DATA_CLEAR';\nexport const TC_CLEAR = 'TC_CLEAR';\nexport const INFERENCE_CONFIG_SET = 'INFERENCE_CONFIG_SET';\nexport const INFERENCE_CONFIG_CLEAR = 'INFERENCE_CONFIG_CLEAR';\nexport const INFERENCE_SUBMIT = 'INFERENCE_SUBMIT';\nexport const INFERENCE_DOWNLOAD_SET_PYTORCH = 'INFERENCE_DOWNLOAD_SET_PYTORCH';\nexport const INFERENCE_DOWNLOAD_CLEAR_PYTORCH =\n  'INFERENCE_DOWNLOAD_CLEAR_PYTORCH';\nexport const INFERENCE_DOWNLOAD_SET_ONNX = 'INFERENCE_DOWNLOAD_SET_ONNX';\nexport const INFERENCE_DOWNLOAD_CLEAR_ONNX = 'INFERENCE_DOWNLOAD_CLEAR_ONNX';\nexport const INFERENCE_PREDICTION_CLEAR = 'INFERENCE_PREDICTION_CLEAR';\nexport const INFERENCE_CLEAR = 'INFERENCE_CLEAR';\nexport const PLAYGROUND_SUBMIT = 'PLAYGROUND_SUBMIT';\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_TRAIN_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_INFER_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import axios from 'axios';\n\nexport default axios.create({\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport trainApi from '../apis/train';\nimport inferApi from '../apis/infer';\nimport playApi from '../apis/play';\n\nexport const networkTransaction = async ({\n  url,\n  formData,\n  requestType,\n  maxNumTries,\n  apiType,\n}) => {\n  let response = null;\n  let numTries = 0;\n\n  let api = inferApi;\n  if (apiType === 'train') {\n    api = trainApi;\n  }\n\n  if (!maxNumTries) {\n    maxNumTries = 1;\n  }\n\n  while (numTries >= 0 && numTries < maxNumTries) {\n    try {\n      if (requestType === 'post') {\n        response = await api.post(url, formData);\n      } else {\n        response = await api.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n\nexport const statusCheck = async () => {\n  const response = await networkTransaction({\n    url: '/status',\n    requestType: 'get',\n    apiType: 'train',\n  });\n  return response.data.status !== 'active';\n};\n\nexport const toastError = message => {\n  toast.dark(\n    <div>\n      <MdError size={25} color=\"yellow\" />\n      &nbsp; {message}\n    </div>\n  );\n};\n\nexport const checkResponse = response => {\n  if (response && response.data) {\n    if (response.data.result === 'success') {\n      return true;\n    } else if (response.data.result === 'error') {\n      toastError(response.data.message);\n    } else {\n      toastError('500: Internal Server Error!');\n    }\n  } else {\n    toastError('500: Internal Server Error!');\n  }\n  return false;\n};\n\nexport const correctTaskTypeCase = taskType => {\n  return taskType === 'imageclassification'\n    ? 'imageClassification'\n    : 'textClassification';\n};\n\nexport const baseNetworkTransaction = async ({\n  url,\n  formData,\n  requestType,\n}) => {\n  let response = null;\n  let numTries = 0;\n  while (numTries >= 0 && numTries <= 2) {\n    try {\n      if (requestType === 'post') {\n        response = await playApi.post(url, formData);\n      } else {\n        response = await playApi.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n","import { reset } from 'redux-form';\n\nimport {\n  SET_NAV_LINKS,\n  SET_MOBILE,\n  SET_HOME,\n  CLEAR_HOME,\n  LOADING_FORM,\n  CLEAR_LOADING_FORM,\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n  TRAIN_TOKEN_SET,\n  TRAIN_TOKEN_CLEAR,\n  IC_CONFIG,\n  IC_MODEL_TYPE,\n  IC_DATA_SPLIT,\n  IC_ADD_CLASS,\n  IC_DELETE_CLASS,\n  IC_CURRENT_CLASS,\n  IC_ADD_IMAGES,\n  IC_DATA_CLEAR,\n  IC_CLEAR,\n  TC_CONFIG,\n  TC_RNN_TYPE,\n  TC_DATA_SPLIT,\n  TC_DATA_ADD,\n  TC_DATA_CLEAR,\n  TC_CLEAR,\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_DOWNLOAD_SET_PYTORCH,\n  INFERENCE_DOWNLOAD_CLEAR_PYTORCH,\n  INFERENCE_DOWNLOAD_SET_ONNX,\n  INFERENCE_DOWNLOAD_CLEAR_ONNX,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n  PLAYGROUND_SUBMIT,\n} from './types';\nimport {\n  networkTransaction,\n  statusCheck,\n  toastError,\n  checkResponse,\n  correctTaskTypeCase,\n  baseNetworkTransaction,\n} from './utils';\n\nexport const setNavLinks = navLinks => {\n  return {\n    type: SET_NAV_LINKS,\n    payload: navLinks,\n  };\n};\n\nexport const setMobile = isMobile => {\n  return {\n    type: SET_MOBILE,\n    payload: isMobile,\n  };\n};\n\nexport const setHome = () => {\n  return {\n    type: SET_HOME,\n  };\n};\n\nexport const clearHome = () => {\n  return {\n    type: CLEAR_HOME,\n  };\n};\n\nexport const loadingForm = formName => {\n  return {\n    type: LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const clearLoadingForm = formName => {\n  return {\n    type: CLEAR_LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const setFormFileFieldLabel = ({ taskName, label }) => {\n  return {\n    type: SET_FORM_FILE_FIELD_LABEL,\n    payload: { taskName, label },\n  };\n};\n\nexport const clearFormFileFieldLabel = formName => {\n  return {\n    type: CLEAR_FORM_FILE_FIELD_LABEL,\n    payload: formName,\n  };\n};\n\nexport const clearTrainToken = () => {\n  return {\n    type: TRAIN_TOKEN_CLEAR,\n  };\n};\n\nexport const setTrainConfig = ({ taskName, config }) => {\n  const actionType = taskName === 'imageClassification' ? IC_CONFIG : TC_CONFIG;\n  return {\n    type: actionType,\n    payload: config,\n  };\n};\n\nexport const setTrainDataSplit = ({ taskName, dataSplit }) => {\n  const actionType =\n    taskName === 'imageClassification' ? IC_DATA_SPLIT : TC_DATA_SPLIT;\n  return {\n    type: actionType,\n    payload: dataSplit,\n  };\n};\n\nexport const setTrainModelType = ({ taskName, modelType }) => {\n  const actionType =\n    taskName === 'imageClassification' ? IC_MODEL_TYPE : TC_RNN_TYPE;\n  return {\n    type: actionType,\n    payload: modelType,\n  };\n};\n\nexport const clearTrainData = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({\n    type: taskName === 'imageClassification' ? IC_DATA_CLEAR : TC_DATA_CLEAR,\n  });\n};\n\nexport const clearTrainConfig = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: taskName === 'imageClassification' ? IC_CLEAR : TC_CLEAR });\n};\n\nexport const submitTrainRequest =\n  ({ formName, trainConfig }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Check server status\n    const serverIsAvailable = await statusCheck();\n\n    if (serverIsAvailable) {\n      // Encode data\n      const formData = new FormData();\n      formData.append('training_data', JSON.stringify(trainConfig));\n\n      // Processing the last url in list to display in webpage\n      const response = await networkTransaction({\n        url: '/train',\n        formData,\n        requestType: 'post',\n        apiType: 'train',\n      });\n\n      if (checkResponse(response)) {\n        dispatch({ type: TRAIN_TOKEN_SET, payload: response.data.token });\n        dispatch(reset(formName));\n      }\n    } else {\n      toastError(\n        'Server is currently training another model! Please try again after a few minutes.'\n      );\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const icAddClass = classNameValue => {\n  return {\n    type: IC_ADD_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icDeleteClass = classNameValue => {\n  return {\n    type: IC_DELETE_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icCurrentClass = classNameValue => {\n  return {\n    type: IC_CURRENT_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icAddImages = ({\n  imagesList,\n  imagesListSize,\n  imagesListPreview,\n}) => {\n  return {\n    type: IC_ADD_IMAGES,\n    payload: { imagesList, imagesListSize, imagesListPreview },\n  };\n};\n\nexport const saAddData = csvData => {\n  return {\n    type: TC_DATA_ADD,\n    payload: csvData,\n  };\n};\n\nexport const clearInferenceConfig = () => {\n  return {\n    type: INFERENCE_CONFIG_CLEAR,\n  };\n};\n\nexport const clearInferencePrediction = () => {\n  return { type: INFERENCE_PREDICTION_CLEAR };\n};\n\nexport const clearInference = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: INFERENCE_CLEAR });\n};\n\nexport const submitInferenceToken =\n  ({ formName, token }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Encode data\n    const formData = new FormData();\n    formData.append('token', JSON.stringify({ token }));\n\n    const response = await networkTransaction({\n      url: '/check',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type: INFERENCE_CONFIG_SET,\n        payload: {\n          token,\n          taskType: correctTaskTypeCase(response.data.taskType),\n          isDownloadable: response.data.downloadable,\n          accuracy: response.data.accuracy,\n          accuracyPlot: response.data.accuracyPlot,\n        },\n      });\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const submitInferenceData =\n  ({ formName, formInput }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Encode data\n    const formData = new FormData();\n    formData.append('inferenceInput', JSON.stringify(formInput));\n\n    const response = await networkTransaction({\n      url: '/inference',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n      maxNumTries: 3,\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type: INFERENCE_SUBMIT,\n        payload: response.data.prediction,\n      });\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const clearInferenceDownloadUrl = format => {\n  return {\n    type:\n      format === 'pytorch'\n        ? INFERENCE_DOWNLOAD_CLEAR_PYTORCH\n        : INFERENCE_DOWNLOAD_CLEAR_ONNX,\n  };\n};\n\nexport const setInferenceDownloadUrl =\n  ({ token, format }) =>\n  async dispatch => {\n    // Encode data\n    const formData = new FormData();\n    formData.append('downloadConfig', JSON.stringify({ token, format }));\n\n    const response = await networkTransaction({\n      url: '/download',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type:\n          format === 'pytorch'\n            ? INFERENCE_DOWNLOAD_SET_PYTORCH\n            : INFERENCE_DOWNLOAD_SET_ONNX,\n        payload: { downloadUrl: response.data.url },\n      });\n    }\n  };\n\nexport const submitPlaygroundForm =\n  ({ url, formName, formData }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Processing the last url in list to display in webpage\n    let response = await baseNetworkTransaction({\n      url: url,\n      formData,\n      requestType: 'post',\n    });\n\n    // If response is null then this will avoid throwing error\n    let responseData = response;\n    if (response) {\n      responseData = response.data;\n    }\n\n    dispatch({\n      type: PLAYGROUND_SUBMIT,\n      payload: { name: formName, data: responseData },\n    });\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n","import _ from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Card from 'react-bootstrap/Card';\nimport { Link } from 'react-router-dom';\n\nimport '../../styles/Modal.css';\n\nclass CoverModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.modalCardContent = [\n      {\n        title: 'Training',\n        targetUrl: '/training',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/training.gif`,\n        contentText: (\n          <>\n            Train an{' '}\n            <mark>\n              <b>Image Classification</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>Text Classification</b>\n            </mark>{' '}\n            model on your custom dataset.\n          </>\n        ),\n        buttonText: 'Choose Task',\n      },\n      {\n        title: 'Inference',\n        targetUrl: '/inference',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/inference.gif`,\n        contentText:\n          'Already trained a model on Flash? Choose this to test your model.',\n        buttonText: 'Test Model',\n      },\n    ];\n  }\n\n  renderCardContent({\n    title,\n    targetUrl,\n    contentImage,\n    contentText,\n    buttonText,\n  }) {\n    return (\n      <Card className=\"card-hover\" key={targetUrl}>\n        <Card.Img\n          src={contentImage}\n          variant=\"top\"\n          style={{ height: '24vh' }}\n          alt={title}\n        />\n        <Card.Body>\n          <Card.Title className=\"text-center\" style={{ fontSize: '2.3vh' }}>\n            {title}\n          </Card.Title>\n          <Card.Text className=\"my-4\">{contentText}</Card.Text>\n          <div className=\"text-center\">\n            <Button variant=\"info\" as={Link} to={targetUrl}>\n              {buttonText}\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  renderContent() {\n    return (\n      <CardDeck className=\"px-0 px-md-5\">\n        {_.map(this.modalCardContent, item => {\n          return this.renderCardContent(item);\n        })}\n      </CardDeck>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={this.props.onDismiss}>\n        <div className=\"modal-body\" onClick={e => e.stopPropagation()}>\n          <h3 className=\"text-center\">Get Started</h3>\n          <hr className=\"w-100 mb-4\" />\n          {this.renderContent()}\n          <hr className=\"w-100 mt-4\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"warning\"\n                className=\"mr-2\"\n                onClick={this.props.onDismiss}\n              >\n                Go Back\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default CoverModal;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport { connect } from 'react-redux';\n\nimport { setHome, clearHome } from '../../actions';\nimport CoverModal from './CoverModal';\nimport '../../styles/Home.css';\n\nclass Home extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  componentDidMount() {\n    this.props.setHome();\n  }\n\n  componentWillUnmount() {\n    this.props.clearHome();\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <CoverModal onDismiss={this.toggleModal} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <header>\n          <div className=\"overlay\"></div>\n          <video playsInline=\"playsinline\" autoPlay=\"autoplay\" muted=\"muted\">\n            <source\n              src={`${process.env.PUBLIC_URL}/assets/media/home.mp4`}\n              type=\"video/mp4\"\n            />\n          </video>\n          <Container className=\"h-100\">\n            <div className=\"d-flex h-100 text-center align-items-center\">\n              <div className=\"w-100 text-white\">\n                <h1 style={{ fontSize: this.props.isMobile ? '3rem' : '5rem' }}>\n                  <Image\n                    src={`${process.env.PUBLIC_URL}/flash.svg`}\n                    style={{ height: '10vh' }}\n                    alt=\"flash-logo\"\n                  />{' '}\n                  F L A S H\n                </h1>\n                <button\n                  className=\"btn btn-outline-light mt-5\"\n                  onClick={() => this.toggleModal()}\n                >\n                  Get Started\n                </button>\n              </div>\n            </div>\n          </Container>\n        </header>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isMobile }) => {\n  return { isMobile };\n};\n\nexport default connect(mapStateToProps, { setHome, clearHome })(Home);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Image from 'react-bootstrap/Image';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setNavLinks } from '../actions';\n\nclass NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.navItems = [\n      { name: 'Training', id: 'training' },\n      { name: 'Inference', id: 'inference' },\n      { name: 'Playground', id: 'playground' },\n      { name: 'About', id: 'about' },\n    ];\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  };\n\n  closeNavbar = () => {\n    this.setState({ expanded: false });\n  };\n\n  componentDidMount() {\n    this.props.setNavLinks(this.navItems);\n  }\n\n  renderNavItem({ name, id }) {\n    return (\n      <Nav.Link\n        as={Link}\n        className={\n          this.props.history.location.pathname.substring(1) === id\n            ? 'active'\n            : ''\n        }\n        to={`/${id}`}\n        onClick={this.closeNavbar}\n        key={id}\n      >\n        {name}\n      </Nav.Link>\n    );\n  }\n\n  render() {\n    return (\n      <Navbar\n        expand=\"md\"\n        variant=\"dark\"\n        expanded={this.state.expanded}\n        fixed={this.props.isHome ? 'top' : ''}\n        style={{ backgroundColor: 'black' }}\n      >\n        <Container>\n          <Navbar.Brand as={Link} to=\"/\" onClick={this.closeNavbar}>\n            <Image\n              src={`${process.env.PUBLIC_URL}/flash.svg`}\n              style={{ height: '2rem' }}\n              className=\"mr-2\"\n              alt=\"flash logo\"\n            />{' '}\n            F L A S H\n          </Navbar.Brand>\n          <Navbar.Toggle\n            aria-controls=\"navbar-navigation\"\n            onClick={this.toggleNavbar}\n          />\n          <Navbar.Collapse id=\"navbar-navigation\">\n            <Nav className=\"ml-auto\">\n              {this.navItems.map(item => this.renderNavItem(item))}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isHome }) => {\n  return { isHome };\n};\n\nexport default connect(mapStateToProps, { setNavLinks })(\n  withRouter(NavigationBar)\n);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport '../styles/Footer.css';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.developerSocialMedia = [\n      { title: 'Website', url: 'https://www.shantanuacharya.com/' },\n      {\n        title: 'GitHub',\n        url: 'https://github.com/shan18',\n      },\n      {\n        title: 'LinkedIn',\n        url: 'https://www.linkedin.com/in/shanacharya/',\n      },\n      {\n        title: 'Instagram',\n        url: 'https://www.instagram.com/shan_1.0/',\n      },\n    ];\n  }\n\n  renderFooterBrand = () => {\n    return (\n      <Col\n        xs={12}\n        md={3}\n        className={`text-center ${\n          this.props.isMobile ? 'mb-5 mt-3' : 'my-auto'\n        }`}\n      >\n        <Image\n          src={`${process.env.PUBLIC_URL}/flash.svg`}\n          style={{ height: '5vh' }}\n          alt=\"flash logo\"\n        />\n        <span style={{ fontSize: '2rem' }}>F L A S H</span>\n      </Col>\n    );\n  };\n\n  renderNavItem({ name, id, type }) {\n    if (type === 'external') {\n      return (\n        <Nav.Link\n          href={id}\n          target=\"_blank\"\n          style={{ color: 'white' }}\n          key={name}\n        >\n          {name}\n        </Nav.Link>\n      );\n    }\n\n    return (\n      <Nav.Link\n        as={Link}\n        to={`/${id}`}\n        onClick={() => window.scrollTo(0, 0)}\n        style={{ color: 'white' }}\n        key={id}\n      >\n        {name}\n      </Nav.Link>\n    );\n  }\n\n  renderNavColumn({ title, items }) {\n    return (\n      <Col\n        xs={12}\n        md={2}\n        className={this.props.isMobile ? 'mb-5 text-center' : ''}\n        key={title}\n      >\n        <Nav className=\"flex-column\" variant=\"dark\">\n          <Nav.Link disabled className=\"mb-1\" style={{ color: 'white' }}>\n            <b>{title}</b>\n          </Nav.Link>\n          {items.map(item => this.renderNavItem(item))}\n        </Nav>\n      </Col>\n    );\n  }\n\n  renderNavColums() {\n    return [\n      {\n        title: 'LINKS',\n        items: [\n          {\n            name: 'Code',\n            id: 'https://github.com/shan18/Flash',\n            type: 'external',\n          },\n          {\n            name: 'Social',\n            id: 'https://www.linkedin.com/posts/shanacharya_deeplearning-ai-machinelearning-activity-6756135082655936512-BYV6',\n            type: 'external',\n          },\n        ],\n      },\n      {\n        title: 'FLASH',\n        items: this.props.navigationLinks,\n      },\n      {\n        title: 'DEVELOPER',\n        items: this.developerSocialMedia.map(({ title, url }) => {\n          return { name: title, id: url, type: 'external' };\n        }),\n      },\n    ].map(column => this.renderNavColumn(column));\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.isHome ? (\n          ''\n        ) : (\n          <footer className=\"mt-5\">\n            <Container>\n              <Row>\n                {this.renderFooterBrand()}\n                <Col />\n                {this.props.navigationLinks ? this.renderNavColums() : ''}\n              </Row>\n            </Container>\n\n            <Container fluid>\n              <hr\n                className=\"text-muted\"\n                style={{ border: '1px solid white', opacity: '0.2' }}\n              />\n            </Container>\n\n            <Container>\n              <Row>\n                <Col className=\"text-center\">\n                  <p className=\"text-muted\">\n                    © 2021 Flash - All Rights Reserved.\n                  </p>\n                </Col>\n              </Row>\n            </Container>\n          </footer>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isHome, navigationLinks, isMobile }) => {\n  return { isHome, navigationLinks, isMobile };\n};\n\nexport default connect(mapStateToProps)(Footer);\n","import _ from 'lodash';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass HoverButtons extends React.Component {\n  renderButton(buttonData) {\n    let buttonValue = '';\n    let buttonText = '';\n\n    if (buttonData instanceof Object) {\n      buttonValue = buttonData.buttonValue;\n      buttonText = buttonData.buttonText;\n    } else {\n      buttonValue = buttonData;\n      buttonText = buttonData;\n    }\n\n    return (\n      <Button\n        variant={this.props.currentButtonValue === buttonValue ? 'primary' : ''}\n        size={this.props.isSmall ? 'sm' : ''}\n        className=\"border border-secondary mx-2 my-2 btn-hover\"\n        onClick={event => {\n          event.preventDefault();\n          this.props.changeCurrentButtonValue(buttonValue);\n        }}\n        key={buttonValue}\n      >\n        {buttonText === undefined ? buttonValue : buttonText}\n      </Button>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {_.map(this.props.hoverButtons, buttonData =>\n          this.renderButton(buttonData)\n        )}\n      </>\n    );\n  }\n}\n\nexport default HoverButtons;\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const renderLoadingPage = loadingText => {\n  return (\n    <Row>\n      <Col className=\"text-center\">\n        <h4 className=\"heading\">{loadingText}</h4>\n      </Col>\n      <Col className=\"text-center\">\n        <Spinner animation=\"grow\" size=\"md\" role=\"status\" />\n      </Col>\n    </Row>\n  );\n};\n\nexport const convertFileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\nexport const removeFileBase64Header = image => {\n  return image.replace('data:', '').replace(/^.+,/, '');\n};\n\n/* Form utility functions */\n\nconst setErrorClass = ({ touched, error }) => {\n  return `${touched && error ? 'is-invalid' : ''}`;\n};\n\nexport const renderError = ({ error, touched }) => {\n  if (touched && error) {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  }\n};\n\nexport const renderTextInput = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  meta,\n}) => {\n  return (\n    <>\n      {label ? <Form.Label>{label}</Form.Label> : ''}\n      <InputGroup className={setErrorClass(meta)}>\n        <Form.Control\n          {...input}\n          type={type}\n          placeholder={placeholder}\n          autoComplete=\"off\"\n          readOnly={readOnly}\n        />\n        {textAppend ? (\n          <div className=\"input-group-append\">\n            {enableAppendSumbit ? (\n              <Button type=\"submit\" variant=\"danger\">\n                {textAppend}\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                variant=\"danger\"\n                onClick={event => event.preventDefault}\n              >\n                {textAppend}\n              </Button>\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </InputGroup>\n      {renderError(meta)}\n    </>\n  );\n};\n\nexport const renderTextInputGroup = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      {renderTextInput({\n        input,\n        label,\n        type,\n        placeholder,\n        textAppend,\n        enableAppendSumbit,\n        readOnly,\n        meta,\n      })}\n    </Form.Group>\n  );\n};\n\nexport const renderDropdownInputGroup = ({\n  input,\n  label,\n  options,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      {label ? <Form.Label>{label}</Form.Label> : ''}\n      <InputGroup className={setErrorClass(meta)}>\n        <Form.Control as=\"select\" {...input} className=\"custom-select\">\n          {options.default ? <option value=\"\">{options.default}</option> : ''}\n          {_.map(options, (value, key) => {\n            if (key !== 'default') {\n              return (\n                <option key={key} value={key}>\n                  {typeof value === 'string' ? value : value[0]}\n                </option>\n              );\n            }\n            return '';\n          })}\n        </Form.Control>\n      </InputGroup>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderFileInputGroup = ({\n  input,\n  label,\n  acceptFileFormat,\n  multiple,\n  formGroupClassName,\n  meta,\n}) => {\n  let isMultiple = multiple ? multiple : false;\n  return (\n    <Form.Group className={formGroupClassName}>\n      <div className={`custom-file ${setErrorClass(meta)}`}>\n        <Form.Label className=\"custom-file-label text-left\">{label}</Form.Label>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"custom-file-input\"\n          multiple={isMultiple}\n          accept={acceptFileFormat}\n        />\n      </div>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderSwitchInputGroup = ({\n  input,\n  label,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      <div className={`custom-control custom-switch ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n          id={`custom-switch-input-${label.split(' ')[0]}`}\n        />\n        <Form.Label\n          className=\"custom-control-label\"\n          htmlFor={`custom-switch-input-${label.split(' ')[0]}`}\n        >\n          {label}\n        </Form.Label>\n      </div>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderFileField = ({\n  input,\n  label,\n  required,\n  formGroupClassName,\n  meta,\n}) => {\n  const errorClassName = `${\n    required && meta.touched && meta.error ? 'is-invalid' : ''\n  }`;\n  return (\n    <Form.Group className={formGroupClassName}>\n      <Form.Label>{label}</Form.Label>\n      <InputGroup className={errorClassName}>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"form-control-file\"\n        />\n      </InputGroup>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderFormField = ({\n  input,\n  contentType,\n  type,\n  placeholder,\n  label,\n  options,\n  acceptFileFormat,\n  multiple,\n  textAppend,\n  enableAppendSumbit,\n  isFixed: readOnly,\n  formGroupClassName,\n  required,\n  meta,\n}) => {\n  if (contentType === 'text') {\n    return renderTextInputGroup({\n      input,\n      label,\n      type,\n      placeholder,\n      textAppend,\n      enableAppendSumbit,\n      readOnly,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'dropdown') {\n    return renderDropdownInputGroup({\n      input,\n      label,\n      options,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'file') {\n    return renderFileInputGroup({\n      input,\n      label,\n      acceptFileFormat,\n      multiple,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'switch') {\n    return renderSwitchInputGroup({\n      input,\n      label,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'fileField') {\n    return renderFileField({\n      input,\n      label,\n      required,\n      formGroupClassName,\n      meta,\n    });\n  }\n  return '';\n};\n\nexport const renderSubmitButton = ({\n  loading,\n  originalText,\n  loadingText,\n  onClick,\n  btnColor,\n  size,\n  type,\n  ref,\n}) => {\n  if (!size) {\n    size = '';\n  }\n  if (!type) {\n    type = 'submit';\n  }\n  if (!btnColor) {\n    btnColor = 'primary';\n  }\n  if (loading) {\n    return (\n      <Button variant={btnColor} type={type} ref={ref} size={size} disabled>\n        <Spinner\n          as=\"span\"\n          animation=\"border\"\n          size=\"sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></Spinner>\n        &nbsp;&nbsp;{loadingText}\n      </Button>\n    );\n  } else {\n    return (\n      <Button\n        variant={btnColor}\n        type={type}\n        ref={ref}\n        size={size}\n        onClick={onClick}\n      >\n        {originalText}\n      </Button>\n    );\n  }\n};\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { setTrainModelType, setTrainDataSplit } from '../../actions';\nimport { renderFormField } from '../../utils';\nimport HoverButtons from '../HoverButtons';\n\nclass TrainingConfigForm extends React.Component {\n  state = {\n    reduceLrOnPlateau: false,\n    stepLr: false,\n  };\n\n  toggleReduceLr = () => {\n    this.setState({ reduceLrOnPlateau: !this.state.reduceLrOnPlateau });\n  };\n\n  toggleStepLr = () => {\n    this.setState({ stepLr: !this.state.stepLr });\n  };\n\n  changeModelType = modelType => {\n    this.props.setTrainModelType({ taskName: this.props.taskName, modelType });\n  };\n\n  changeDataSplit = dataSplit => {\n    this.props.setTrainDataSplit({ taskName: this.props.taskName, dataSplit });\n  };\n\n  render() {\n    const {\n      batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n      numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n    } = this.props.configOptions;\n    return (\n      <Form onSubmit={this.props.handleSubmit}>\n        <Row>\n          <Col className=\"mx-auto\">\n            <Field\n              name=\"taskName\"\n              component={renderFormField}\n              contentType=\"text\"\n              placeholder=\"Enter Task Name\"\n              formGroupClassName=\"text-center\"\n              label={<h4>Task Name</h4>}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mr-auto text-center\">\n            <h4 className=\"mb-2\">{this.props.configOptions.modelFieldTitle}</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.modelTypes}\n              currentButtonValue={this.props.currentConfig.modelType}\n              changeCurrentButtonValue={this.changeModelType}\n              isSmall\n            />\n          </Col>\n          <Col xs={12} md={4} className=\"ml-auto mt-5 mt-md-0 text-center\">\n            <h4 className=\"mb-2\">Dataset Split</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.dataSplit}\n              currentButtonValue={this.props.currentConfig.dataSplit}\n              changeCurrentButtonValue={this.changeDataSplit}\n              isSmall\n            />\n          </Col>\n        </Row>\n        {this.props.configOptions.pretrainDatasets ? (\n          <Row className=\"mt-5\">\n            <Col xs={12} md={6} className=\"mx-auto text-center\">\n              <Field\n                name=\"pretrainDataset\"\n                component={renderFormField}\n                contentType=\"dropdown\"\n                label=\"Transfer Learning\"\n                options={this.props.configOptions.pretrainDatasets}\n              />\n            </Col>\n          </Row>\n        ) : (\n          ''\n        )}\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <h4 className=\"mb-2\">Callbacks</h4>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <Field\n              name=\"reduceLrOnPlateau\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Reduce LR on Plateau\"\n              onChange={() => this.toggleReduceLr()}\n            />\n          </Col>\n        </Row>\n        {this.state.reduceLrOnPlateau ? (\n          <Form.Group as={Row} className=\"mt-1 mb-5\">\n            <Col xs={12} md={4} className=\"text-center\">\n              <Field\n                name=\"reduceLrOnPlateauPatience\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Patience\"\n                placeholder=\"Enter Patience\"\n              />\n            </Col>\n            <Col xs={12} md={4} className=\"my-3 my-md-0 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauFactor\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Factor\"\n                placeholder=\"Enter Factor\"\n              />\n            </Col>\n            <Col xs={12} md={4} className=\"text-center\">\n              <Field\n                name=\"reduceLrOnPlateauMinLr\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Minimum LR\"\n                placeholder=\"Enter Min LR\"\n              />\n            </Col>\n          </Form.Group>\n        ) : (\n          ''\n        )}\n        <Row className=\"mt-2\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <Field\n              name=\"stepLr\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Step LR\"\n              onChange={() => this.toggleStepLr()}\n            />\n          </Col>\n        </Row>\n        {this.state.stepLr ? (\n          <Form.Group as={Row} className=\"mt-1 mb-5\">\n            <Col xs={12} md={6} className=\"text-center\">\n              <Field\n                name=\"stepLrStepSize\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Step Size\"\n                placeholder=\"Enter Step Size\"\n              />\n            </Col>\n            <Col xs={12} md={6} className=\"my-3 my-md-0 text-center\">\n              <Field\n                name=\"stepLrGamma\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Gamma\"\n                placeholder=\"Enter Gamma\"\n              />\n            </Col>\n          </Form.Group>\n        ) : (\n          ''\n        )}\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <h4 className=\"mb-2\">Hyperparameters</h4>\n          </Col>\n        </Row>\n        <Form.Group as={Row} className=\"my-5\">\n          <Col xs={12} md={6} className=\"text-center\">\n            <Field\n              name=\"optimizer\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              label=\"Optimizer\"\n              options={this.props.configOptions.optimizers}\n            />\n          </Col>\n          <Col xs={12} md={6} className=\"mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"learningRate\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Learning Rate\"\n              placeholder=\"Enter LR\"\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row}>\n          <Col xs={12} md={6} className=\"text-center\">\n            <Field\n              name=\"batchSize\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Batch Size\"\n              placeholder={`Range: ${batchSizeMin} - ${batchSizeMax}`}\n            />\n          </Col>\n          <Col xs={12} md={6} className=\"mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"epochs\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Epochs\"\n              placeholder={`Range: ${numEpochsMin} - ${numEpochsMax}`}\n            />\n          </Col>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nconst validate = (formValues, { configOptions }) => {\n  const errors = {};\n\n  // Task Name\n  if (!formValues.taskName) {\n    errors.taskName = 'You must enter a task name';\n  } else if (!/^[a-zA-Z0-9- ]+$/i.test(formValues.taskName)) {\n    errors.taskName =\n      'Task name can contain only alphabets, numbers, hyphens and spaces';\n  }\n\n  // Reduce LR on Plateau\n  if (formValues.reduceLrOnPlateau) {\n    const {\n      reduceLrOnPlateauLimit: {\n        factor: factorLimit,\n        patience: patienceLimit,\n        minLr: minLrLimit,\n      },\n      stepLrLimit: { stepSize: stepSizeLimit, gamma: gammaLimit },\n    } = configOptions;\n\n    // Reduce LR On Plateau - Patience\n    if (!formValues.reduceLrOnPlateauPatience) {\n      errors.reduceLrOnPlateauPatience = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.reduceLrOnPlateauPatience)) {\n      errors.reduceLrOnPlateauPatience = 'Must be an integer';\n    } else if (\n      formValues.reduceLrOnPlateauPatience < patienceLimit.min ||\n      formValues.reduceLrOnPlateauPatience > patienceLimit.max\n    ) {\n      errors.reduceLrOnPlateauPatience = `Must be between ${patienceLimit.min} and ${patienceLimit.max}`;\n    }\n\n    // Reduce LR On Plateau - Factor\n    if (!formValues.reduceLrOnPlateauFactor) {\n      errors.reduceLrOnPlateauFactor = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauFactor)\n    ) {\n      errors.reduceLrOnPlateauFactor = 'Enter a valid value';\n    } else if (\n      formValues.reduceLrOnPlateauFactor < factorLimit.min ||\n      formValues.reduceLrOnPlateauFactor > factorLimit.max\n    ) {\n      errors.reduceLrOnPlateauFactor = `Must be between ${factorLimit.min} and ${factorLimit.max}`;\n    }\n\n    // Reduce LR On Plateau - Min LR\n    if (!formValues.reduceLrOnPlateauMinLr) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauMinLr)\n    ) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a valid value';\n    } else if (formValues.reduceLrOnPlateauMinLr < minLrLimit) {\n      errors.reduceLrOnPlateauMinLr = `Minimum value is ${minLrLimit}`;\n    }\n\n    // Step LR - Step Size\n    if (!formValues.stepLrStepSize) {\n      errors.stepLrStepSize = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.stepLrStepSize)) {\n      errors.stepLrStepSize = 'Must be an integer';\n    } else if (\n      formValues.stepLrStepSize < stepSizeLimit.min ||\n      formValues.stepLrStepSize > stepSizeLimit.max\n    ) {\n      errors.stepLrStepSize = `Must be between ${stepSizeLimit.min} and ${stepSizeLimit.max}`;\n    }\n\n    // Step LR - Gamma\n    if (!formValues.stepLrGamma) {\n      errors.stepLrGamma = 'Enter a value';\n    } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.stepLrGamma)) {\n      errors.stepLrGamma = 'Enter a valid value';\n    } else if (\n      formValues.stepLrGamma < gammaLimit.min ||\n      formValues.stepLrGamma > gammaLimit.max\n    ) {\n      errors.stepLrGamma = `Must be between ${gammaLimit.min} and ${gammaLimit.max}`;\n    }\n  }\n\n  // Learning Rate\n  const {\n    learningRateLimit: { min: learningRateMin, max: learningRateMax },\n  } = configOptions;\n  if (!formValues.learningRate) {\n    errors.learningRate = 'You must enter a learning rate';\n  } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.learningRate)) {\n    errors.learningRate = 'Enter a valid value';\n  } else if (\n    formValues.learningRate < learningRateMin ||\n    formValues.learningRate > learningRateMax\n  ) {\n    errors.learningRate = `Must be between ${learningRateMin} and ${learningRateMax}`;\n  }\n\n  // Batch Size\n  const {\n    batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n  } = configOptions;\n  if (!formValues.batchSize) {\n    errors.batchSize = 'You must enter a batch size';\n  } else if (!/^[0-9]+$/i.test(formValues.batchSize)) {\n    errors.batchSize = 'Batch size must be an integer';\n  } else if (\n    formValues.batchSize < batchSizeMin ||\n    formValues.batchSize > batchSizeMax\n  ) {\n    errors.batchSize = `Must be between ${batchSizeMin} and ${batchSizeMax}`;\n  }\n\n  // Epochs\n  const {\n    numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n  } = configOptions;\n  if (!formValues.epochs) {\n    errors.epochs = 'You must enter the number of epochs';\n  } else if (!/^[0-9]+$/i.test(formValues.epochs)) {\n    errors.epochs = 'Number of epochs must be an integer';\n  } else if (\n    formValues.epochs < numEpochsMin ||\n    formValues.epochs > numEpochsMax\n  ) {\n    errors.epochs = `Must be between ${numEpochsMin} and ${numEpochsMax}`;\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const { configOptions, currentConfig } = state[ownProps.taskName];\n  return { configOptions, currentConfig, initialValues: currentConfig };\n};\n\nexport default connect(mapStateToProps, {\n  setTrainModelType,\n  setTrainDataSplit,\n})(reduxForm({ validate })(TrainingConfigForm));\n","import _ from 'lodash';\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { FaCheck } from 'react-icons/fa';\nimport { MdDelete, MdError } from 'react-icons/md';\n\nimport { icAddClass, icDeleteClass } from '../../../actions';\n\nclass ICClassListForm extends React.Component {\n  state = {\n    classValue: '',\n    isSaved: false,\n  };\n\n  toggleSaveMode = () => {\n    this.setState({ isSaved: !this.state.isSaved });\n  };\n\n  onSubmit() {\n    const { isSaved } = this.state;\n    if (!isSaved && this.props.classList.includes(this.state.classValue)) {\n      toast.error(\n        <div>\n          <MdError size={25} />\n          &nbsp; A class with name \"{this.state.classValue}\" already exists!\n        </div>\n      );\n    } else {\n      const { classValue } = this.state;\n      if (!isSaved) {\n        this.props.icAddClass(classValue);\n      } else {\n        this.props.icDeleteClass(classValue);\n        this.setState({ classValue: '' });\n      }\n      this.toggleSaveMode();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.initialData) {\n      this.setState({ ...this.props.initialData });\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={event => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n        className=\"my-2\"\n      >\n        <InputGroup>\n          <Form.Control\n            type=\"text\"\n            placeholder={`Enter class name${\n              this.props.isOptionalField ? ' (optional)' : ''\n            }`}\n            autoComplete=\"off\"\n            onChange={event =>\n              this.setState({ classValue: event.target.value })\n            }\n            value={this.state.classValue}\n            readOnly={this.state.isSaved}\n            pattern=\"[a-zA-Z0-9 ]+\"\n            title=\"Only alphabets, numbers and spaces are allowed\"\n            required\n          />\n          <div className=\"input-group-append\">\n            {this.state.isSaved ? (\n              <Button type=\"submit\" variant=\"danger\">\n                <MdDelete />\n              </Button>\n            ) : (\n              <Button type=\"submit\" variant=\"outline-success\">\n                <FaCheck />\n              </Button>\n            )}\n          </div>\n        </InputGroup>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ imageClassification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps, {\n  icAddClass,\n  icDeleteClass,\n})(ICClassListForm);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport ICClassListForm from './ICClassListForm';\n\nclass ICClassList extends React.Component {\n  renderClassList() {\n    return _.map(_.range(0, this.props.numClassesLimit.max), number => {\n      let isOptionalField =\n        number >= this.props.numClassesLimit.min ? true : false;\n      let initialData = null;\n      if (number < this.props.classList.length) {\n        initialData = {\n          classValue: this.props.classList[number],\n          isSaved: true,\n        };\n      }\n      return (\n        <ICClassListForm\n          form=\"classForm\"\n          isOptionalField={isOptionalField}\n          key={number}\n          initialData={initialData}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <h4>Classes</h4>\n        <small>\n          Number of classes must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numClassesLimit.min} -{' '}\n              {this.props.numClassesLimit.max}\n            </b>\n          </mark>\n        </small>\n        {this.renderClassList()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    dataset,\n    configOptions: { numClassesLimit },\n  },\n}) => {\n  return { classList: _.keys(dataset), numClassesLimit };\n};\n\nexport default connect(mapStateToProps)(ICClassList);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { renderFormField } from '../../../utils';\n\nclass IcClassChoiceForm extends React.Component {\n  render() {\n    const { classList } = this.props;\n    return (\n      <Form>\n        <Row className=\"mt-3\">\n          <Col xs={8} className=\"mx-auto\">\n            <Field\n              name=\"classChoice\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              options={{\n                default: 'Choose a class...',\n                ..._.zipObject(classList, classList),\n              }}\n            />\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ imageClassification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'icClassChoiceForm',\n    enableReinitialize: true,\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(IcClassChoiceForm)\n);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\n\nclass ICDataUploadForm extends React.Component {\n  render() {\n    return (\n      <>\n        {this.props.currentClass &&\n        !this.props.numImagesExceeded &&\n        !this.props.sizeExceeded ? (\n          <Form>\n            <Row className=\"mt-3\">\n              <Col xs={10} xl={6} className=\"mx-auto\">\n                <ImUpload3 size={30} className=\"mb-3\" />\n                <Field\n                  name=\"classImages\"\n                  component={renderFormField}\n                  contentType=\"file\"\n                  label=\"Choose File\"\n                  acceptFileFormat=\"image/jpeg,image/png\"\n                  multiple\n                />\n              </Col>\n            </Row>\n          </Form>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: {\n      numImagesLimit: { max: numImagesLimitMax },\n      sizeLimit,\n    },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesExceeded: dataset[currentClass]\n      ? dataset[currentClass].length >= numImagesLimitMax\n      : false,\n    sizeExceeded: datasetSize[currentClass]\n      ? datasetSize[currentClass] >= sizeLimit\n      : false,\n  };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'icDataUploadForm',\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ICDataUploadForm)\n);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nclass ICDataPreview extends React.Component {\n  renderCard(imgUrl, imgId) {\n    return (\n      <Col className=\"mb-3\" key={imgId}>\n        <Card\n          className=\"card-hover shadow bg-white rounded\"\n          style={{ width: '5rem' }}\n        >\n          <Card.Img variant=\"top\" src={imgUrl} alt={`data-${imgId}`} />\n        </Card>\n      </Col>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.imgList ? (\n          <Row xs={3} lg={4} xl={6} className=\"mt-5 mx-auto\">\n            {_.map(this.props.imgList, (image, imgId) =>\n              this.renderCard(image, imgId)\n            )}\n          </Row>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: { currentClass, datasetPreview },\n}) => {\n  return { imgList: datasetPreview[currentClass] };\n};\n\nexport default connect(mapStateToProps)(ICDataPreview);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { icCurrentClass, icAddImages } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport ICClassChoiceForm from './ICClassChoiceForm';\nimport ICDataUploadForm from './ICDataUploadForm';\nimport ICDataPreview from './ICDataPreview';\n\nclass ICDataset extends React.Component {\n  onClassChoiceSubmit = values => {\n    this.props.icCurrentClass(_.values(values)[0]);\n  };\n\n  fileListToArray = fileList => {\n    let imagesList = Array.from(fileList);\n    if (\n      this.props.currentClassImgCount + imagesList.length >\n      this.props.numImagesLimit.max\n    ) {\n      imagesList = imagesList.slice(\n        0,\n        this.props.numImagesLimit.max - this.props.currentClassImgCount\n      );\n    }\n    return imagesList;\n  };\n\n  getImageListSize = imagesList => {\n    let imagesListSize = 0;\n    if (imagesList.length > 0) {\n      imagesListSize = _.sumBy(['size'], _.partial(_.sumBy, imagesList));\n    }\n    return imagesListSize;\n  };\n\n  imageListToBase64 = async imagesList => {\n    let imagesListPreview = [];\n    for (let i = 0; i < imagesList.length; i++) {\n      imagesListPreview.push(await convertFileToBase64(imagesList[i]));\n    }\n    return imagesListPreview;\n  };\n\n  removeBase64HeaderFromImageList = imagesList => {\n    return _.map(imagesList, image => {\n      return removeFileBase64Header(image);\n    });\n  };\n\n  onDataUploadSubmit = async values => {\n    // Fetch list of images\n    let imagesList = this.fileListToArray(_.values(values)[0]);\n\n    // Obtain size\n    const imagesListSize = this.getImageListSize(imagesList);\n\n    if (this.props.currentSize + imagesListSize >= this.props.sizeLimit) {\n      toast.info(\n        <div>\n          <MdError size={25} />\n          &nbsp; Cannot upload images. Total size of the images for this class\n          are exceeding {this.props.sizeLimit / 1000000} MB.\n        </div>\n      );\n    } else if (imagesList.length > 0) {\n      // Get base64 string of each image\n      const imagesListPreview = await this.imageListToBase64(imagesList);\n\n      // Remove base64 header from image for backend support\n      imagesList = this.removeBase64HeaderFromImageList(imagesListPreview);\n\n      // Update redux store\n      this.props.icAddImages({\n        imagesList,\n        imagesListPreview,\n        imagesListSize,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h4>Images</h4>\n        <small>\n          Number of images for each class must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numImagesLimit.min} -{' '}\n              {this.props.numImagesLimit.max}\n            </b>\n          </mark>\n          .\n        </small>\n        <br />\n        <small>\n          If you upload more than {this.props.numImagesLimit.max} images then\n          only the{' '}\n          <mark>\n            <b>first {this.props.numImagesLimit.max} images</b>\n          </mark>{' '}\n          will be considered.\n        </small>\n        <br />\n        <small>\n          The total size of the images for each class must be{' '}\n          <mark>\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </mark>\n          .\n        </small>\n        <ICClassChoiceForm\n          onSubmit={this.onClassChoiceSubmit}\n          initialValues={{ classChoice: this.props.currentClass }}\n        />\n        <ICDataUploadForm onSubmit={this.onDataUploadSubmit} />\n        <ICDataPreview />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: { numImagesLimit, sizeLimit },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesLimit,\n    sizeLimit,\n    currentSize: datasetSize[currentClass],\n    currentClassImgCount: dataset[currentClass]\n      ? dataset[currentClass].length\n      : 0,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  icCurrentClass,\n  icAddImages,\n})(ICDataset);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport ICClassList from './ICClassList';\nimport ICDataset from './ICDataset';\nimport '../../../styles/Modal.css';\n\nclass IcModal extends React.Component {\n  renderContent() {\n    return (\n      <Row>\n        <Col xs={12} md={4} className=\"text-center\">\n          <ICClassList />\n        </Col>\n        <Col\n          xs={12}\n          md={8}\n          className={`${this.props.isMobile ? 'mt-5' : ''} text-center`}\n        >\n          <ICDataset />\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{\n            width: this.props.isMobile ? '90%' : '60%',\n            maxHeight: 'calc(100vh - 20vh)',\n          }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"success\"\n                className=\"mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </Button>\n              <Button\n                variant=\"warning\"\n                className=\"mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ isMobile }) => {\n  return { isMobile };\n};\n\nexport default connect(mapStateToProps)(IcModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport ICModal from './ICModal';\n\nclass ICCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkNumClasses = () => {\n    const {\n      configOptions: {\n        numClassesLimit: { min: numClassesLimitMin },\n      },\n      dataset,\n    } = this.props;\n    if (_.keys(dataset).length < numClassesLimitMin) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to create a minimum of {numClassesLimitMin} classes.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  checkNumImages = () => {\n    const {\n      configOptions: {\n        numImagesLimit: { min: numImagesLimitMin },\n      },\n      dataset,\n    } = this.props;\n\n    const datasetValues = _.values(dataset);\n    const datasetFailedClasses = _.sum(\n      _.map(datasetValues, items => (items.length < numImagesLimitMin ? 0 : 1))\n    );\n\n    if (datasetValues.length !== datasetFailedClasses) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to upload atleast {numImagesLimitMin} images per\n          class.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkNumClasses() && this.checkNumImages()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <ICModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <Row className=\"my-5 text-center\">\n          <Col>\n            <Button\n              variant=\"dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Create Dataset\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"mt-5 text-center\">\n          <Col>\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  imageClassification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ICCreate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport '../../styles/Modal.css';\n\nclass TrainingSubmitModal extends React.Component {\n  renderContent() {\n    return (\n      <Row className=\"my-4\">\n        <Col xs={12} className=\"mb-4\">\n          Your dataset and model configuration has been successfully uploaded to\n          the server for training.\n        </Col>\n        <Col xs={12}>\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp; {this.props.token}\n          </h5>\n        </Col>\n        <Col xs={12} className=\"mt-4\">\n          Please copy and save the token provided above. It will be required for\n          testing the model on the inference page.\n        </Col>\n        <Col xs={12} className=\"mt-4\">\n          Note:\n          <ul>\n            <li>\n              The model shall be trained and available for inference in 3-15\n              minutes depending upon the size of your dataset.\n            </li>\n            <li>\n              Trained models are available for testing only upto <b>2 hours</b>{' '}\n              starting from the point when they are made available for\n              inference.\n            </li>\n          </ul>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\">\n        <div\n          className=\"modal-body\"\n          style={{ width: '40%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Successful</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"success\"\n                className=\"mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Dismiss\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps)(TrainingSubmitModal);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n} from '../../../actions';\nimport history from '../../../history';\nimport ICCreate from './ICCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass ImageClassification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'imageClassification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['ResNet18', 'ResNet34', 'MobileNet v2'],\n      modelFieldTitle: 'Model',\n      pretrainDatasets: {\n        default: 'Select a dataset (Optional)...',\n        imagenet: 'ImageNet',\n        cifar100: 'CIFAR-100',\n      },\n      numClassesLimit: { min: 2, max: 10 },\n      numImagesLimit: { min: 10, max: 100 },\n      batchSizeLimit: { min: 1, max: 32 },\n      numEpochsLimit: { min: 1, max: 10 },\n      sizeLimit: 10000000, // In bytes (10 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'ResNet18',\n      dataSplit: '70 : 30',\n      optimizer: 'sgd',\n      learningRate: 0.01,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    // Send values to server\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col xs={9} md={4} className=\"mx-auto\">\n            <Card className=\"mx-auto mt-4\">\n              <Card.Img\n                variant=\"top\"\n                as=\"video\"\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                  type=\"video/mp4\"\n                />\n              </Card.Img>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={6} className=\"mx-auto\">\n            <ICCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n})(ImageClassification);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\n\nimport { setFormFileFieldLabel } from '../actions';\n\nclass FormFileField extends React.Component {\n  render() {\n    return (\n      <Field\n        {..._.omit(this.props.fieldConfig, 'label', 'hideFilename')}\n        label={\n          this.props.fieldLabel\n            ? this.props.fieldLabel\n            : this.props.fieldConfig.label\n        }\n        onChange={event => {\n          if (!this.props.hideFilename) {\n            this.props.setFormFileFieldLabel({\n              taskName: this.props.taskName,\n              label: event.target.files[0].name,\n            });\n          }\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ formFileField }, ownProps) => {\n  return { fieldLabel: formFileField[ownProps.taskName] };\n};\n\nexport default connect(mapStateToProps, { setFormFileFieldLabel })(\n  FormFileField\n);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\nimport FormFileField from '../../FormFileField';\n\nclass TCDataUploadForm extends React.Component {\n  render() {\n    return (\n      <Row className=\"text-center\">\n        <Col xs={12} className=\"mb-4\">\n          <h4>Upload Dataset</h4>\n        </Col>\n        <Col md={8} className=\"mx-auto\">\n          <Form>\n            <ImUpload3 size={30} className=\"mb-3\" />\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'tcCsvData',\n                component: renderFormField,\n                contentType: 'file',\n                label: 'Choose File',\n                acceptFileFormat: '.csv, text/csv',\n              }}\n            />\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'tcDataUploadForm',\n  onChange: (values, dispatch, props) => {\n    props.submit();\n  },\n})(TCDataUploadForm);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { saAddData } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport TCDataUploadForm from './TCDataUploadForm';\nimport '../../../styles/Modal.css';\n\nclass TCModal extends React.Component {\n  onDataUploadSubmit = async values => {\n    let csvData = values.tcCsvData;\n    if (csvData.length > 0) {\n      csvData = csvData[0];\n      if (csvData.size > this.props.sizeLimit) {\n        toast.info(\n          <div>\n            <MdError size={25} />\n            &nbsp; Cannot upload the file. Total size of the dataset is\n            exceeding {this.props.sizeLimit / 1000000} MB.\n          </div>\n        );\n      } else {\n        csvData = removeFileBase64Header(await convertFileToBase64(csvData));\n        this.props.saAddData(csvData);\n      }\n    }\n  };\n\n  renderContent() {\n    return (\n      <Row className=\"px-3\">\n        <Col className=\"text-justify\">\n          <p>\n            Upload the dataset as a <b>CSV (Comma-Separated Values)</b> file\n            with <b>two columns</b>:{' '}\n            <mark>\n              <b>input</b>\n            </mark>{' '}\n            and\n            <mark>\n              <b>label</b>\n            </mark>\n          </p>\n          Column Description:\n          <ul>\n            <li>\n              <mark>\n                <b>input</b>\n              </mark>\n              : Contains input sentences\n            </li>\n            <li>\n              <mark>\n                <b>label</b>\n              </mark>\n              : Contains the type (class) for the corresponding input sentences.\n            </li>\n          </ul>\n          <p>\n            NOTE: The CSV file must contain{' '}\n            <b>less than {this.props.numRows} rows</b> and its size must be{' '}\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </p>\n          <br />\n          <Row className=\"mb-4\">\n            <Col xs={12} md={6}>\n              <h4 className=\"mb-3 text-center\">Example Dataset Preview</h4>\n              <Card className=\"shadow bg-white rounded mx-auto\">\n                <Card.Img\n                  variant=\"top\"\n                  style={{ height: this.props.isMobile ? '20vh' : '24vh' }}\n                  src={`${process.env.PUBLIC_URL}/assets/media/textClassificationDataPreview.png`}\n                  alt=\"text classification example dataset preview\"\n                />\n              </Card>\n            </Col>\n            <Col\n              xs={12}\n              md={6}\n              className={this.props.isMobile ? 'mt-5' : 'my-auto'}\n            >\n              <TCDataUploadForm\n                onSubmit={this.onDataUploadSubmit}\n                taskName={this.props.taskName}\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{\n            width: this.props.isMobile ? '90%' : '50%',\n            maxHeight: 'calc(100vh - 20vh)',\n          }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  isMobile,\n  textClassification: {\n    configOptions: { sizeLimit, numRows },\n  },\n}) => {\n  return {\n    isMobile,\n    sizeLimit,\n    numRows,\n  };\n};\n\nexport default connect(mapStateToProps, { saAddData })(TCModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport TCModal from './TCModal';\n\nclass TCCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkDataset = () => {\n    if (!this.props.dataset) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; Please upload a dataset.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkDataset()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <TCModal\n            onDismiss={this.onModalDismiss}\n            taskName={this.props.taskName}\n          />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <Row className=\"my-5 text-center\">\n          <Col>\n            <Button\n              variant=\"dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Upload Dataset\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"mt-5 text-center\">\n          <Col>\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  textClassification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TCCreate);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n} from '../../../actions';\nimport history from '../../../history';\nimport TCCreate from './TCCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass TextClassification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'textClassification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['LSTM', 'GRU'],\n      modelFieldTitle: 'RNN Type',\n      numRows: 10000,\n      sizeLimit: 1000000, // In bytes (1 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'LSTM',\n      dataSplit: '70 : 30',\n      optimizer: 'adam',\n      learningRate: 0.001,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col xs={10} md={5} className=\"mx-auto\">\n            <Card className=\"mx-auto mt-4\">\n              <Card.Img\n                variant=\"top\"\n                as=\"video\"\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/textClassification.mp4`}\n                  type=\"video/mp4\"\n                />\n              </Card.Img>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={6} className=\"mx-auto\">\n            <TCCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n})(TextClassification);\n","import { Link } from 'react-router-dom';\nimport { Container, Button } from 'react-floating-action-button';\nimport { IoHelpSharp } from 'react-icons/io5';\n\nconst FloatinHelp = props => {\n  return (\n    <Container>\n      <Link\n        to={{\n          pathname: '/about',\n          state: { targetSection: props.target },\n        }}\n      >\n        <Button\n          tooltip=\"Help\"\n          styles={{ backgroundColor: '#000000', color: '#ffffff' }}\n        >\n          <IoHelpSharp size={25} />\n        </Button>\n      </Link>\n    </Container>\n  );\n};\n\nexport default FloatinHelp;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport HoverButtons from '../HoverButtons';\nimport ImageClassification from './imageClassification/ImageClassification';\nimport TextClassification from './textClassification/TextClassification';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Training extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.hoverButtons = [\n      {\n        buttonValue: 'imageClassification',\n        buttonText: 'Image Classification',\n      },\n      { buttonValue: 'textclassification', buttonText: 'Text Classification' },\n    ];\n\n    this.trainConfigOptions = {\n      dataSplit: ['70 : 30', '80 : 20'],\n      batchSizeLimit: { min: 1, max: 256 },\n      numEpochsLimit: { min: 1, max: 20 },\n      optimizers: { adam: 'Adam', sgd: 'SGD' },\n      learningRateLimit: { min: 1e-5, max: 2 },\n      reduceLrOnPlateauLimit: {\n        factor: { min: 0.01, max: 0.5 },\n        patience: { min: 1, max: 20 },\n        minLr: 1e-5,\n      },\n      stepLrLimit: {\n        stepSize: { min: 1, max: 10 },\n        gamma: { min: 0.01, max: 0.9 },\n      },\n    };\n\n    this.currentTrainConfig = {\n      reduceLrOnPlateau: false,\n      reduceLrOnPlateauPatience: 5,\n      reduceLrOnPlateauFactor: 0.1,\n      reduceLrOnPlateauMinLr: 1e-5,\n      stepLr: false,\n      stepLrStepSize: 4,\n      stepLrGamma: 0.1,\n    };\n\n    this.state = {\n      currentTask: 'imageClassification',\n    };\n  }\n\n  changeCurrentTask = currentTask => {\n    if (!(this.state.currentTask === currentTask)) {\n      this.setState({ currentTask });\n    }\n  };\n\n  renderCurrentTask() {\n    if (this.state.currentTask === 'imageClassification') {\n      return (\n        <ImageClassification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    } else {\n      return (\n        <TextClassification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Train a Model</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"text-center\">\n            <HoverButtons\n              hoverButtons={this.hoverButtons}\n              currentButtonValue={this.state.currentTask}\n              changeCurrentButtonValue={this.changeCurrentTask}\n            />\n          </Col>\n        </Row>\n        {this.renderCurrentTask()}\n        <FloatinHelp target=\"training\" />\n      </Container>\n    );\n  }\n}\n\nexport default Training;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\nimport { Field, reset, reduxForm } from 'redux-form';\nimport { MdDelete } from 'react-icons/md';\n\nimport { submitInferenceToken, clearInferenceConfig } from '../../actions';\nimport { renderFormField, renderSubmitButton } from '../../utils';\n\nclass TokenForm extends React.Component {\n  onSubmit = values => {\n    if (this.props.token) {\n      this.props.clearInferenceConfig();\n      this.props.dispatch(reset(this.props.form));\n    } else {\n      this.props.submitInferenceToken({\n        formName: this.props.form,\n        token: values.token,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Row className=\"mb-1 mt-3 py-5\">\n        <Col xs={10} md={6} className=\"mx-auto\">\n          {this.props.token ? (\n            <form\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\n              className=\"mb-4\"\n            >\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Token\"\n                textAppend={<MdDelete />}\n                enableAppendSubmit\n                isFixed\n              />\n            </form>\n          ) : (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                placeholder=\"Enter Token\"\n              />\n              <Row className=\"mt-3\">\n                <Col className=\"text-right\">\n                  {renderSubmitButton({\n                    loading: this.props.loadingForm.includes(this.props.form),\n                    originalText: 'Validate Token',\n                    loadingText: 'Validating...',\n                  })}\n                </Col>\n              </Row>\n            </form>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.token) {\n    errors.token = 'You must enter a token';\n  } else if (!/^[a-zA-Z0-9-_ ]+$/i.test(formValues.token)) {\n    errors.token = 'Invalid token';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceToken,\n  clearInferenceConfig,\n})(reduxForm({ form: 'tokenForm', validate })(TokenForm));\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\n\nimport {\n  setInferenceDownloadUrl,\n  clearInferenceDownloadUrl,\n} from '../../actions';\nimport { renderSubmitButton } from '../../utils';\n\nclass DownloadForm extends React.Component {\n  state = {\n    haltPytorch: false,\n    haltOnnx: false,\n  };\n\n  downloadFile = async url => {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    let objectUrl = window.URL.createObjectURL(blob);\n    let a = document.createElement('a');\n    a.href = objectUrl;\n    a.download = url.split('/').at(-1);\n    a.click();\n  };\n\n  onDownloadClick = format => {\n    this.props.setInferenceDownloadUrl({ token: this.props.token, format });\n  };\n\n  componentDidUpdate = async () => {\n    if (this.props.downloadUrlPytorch && !this.state.haltPytorch) {\n      this.setState({ haltPytorch: true });\n      await this.downloadFile(this.props.downloadUrlPytorch);\n      this.props.clearInferenceDownloadUrl('pytorch');\n      this.setState({ haltPytorch: false });\n    }\n\n    if (this.props.downloadUrlOnnx && !this.state.haltOnnx) {\n      this.setState({ haltOnnx: true });\n      await this.downloadFile(this.props.downloadUrlOnnx);\n      this.props.clearInferenceDownloadUrl('onnx');\n      this.setState({ haltOnnx: false });\n    }\n  };\n\n  render() {\n    return (\n      <Row className=\"mb-5\">\n        <Col xs={6} className=\"text-right\">\n          {renderSubmitButton({\n            loading: this.props.downloadUrlPytorch,\n            originalText: 'Download as PyTorch',\n            loadingText: 'Downloading...',\n            btnColor: 'dark',\n            size: 'sm',\n            onClick: () => this.onDownloadClick('pytorch'),\n          })}\n        </Col>\n        <Col xs={6} className=\"text-left\">\n          {renderSubmitButton({\n            loading: this.props.downloadUrlOnnx,\n            originalText: 'Download as ONNX',\n            loadingText: 'Downloading...',\n            btnColor: 'dark',\n            size: 'sm',\n            onClick: () => this.onDownloadClick('onnx'),\n          })}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  inference: { token, downloadUrlPytorch, downloadUrlOnnx },\n}) => {\n  return { token, downloadUrlPytorch, downloadUrlOnnx };\n};\n\nexport default connect(mapStateToProps, {\n  setInferenceDownloadUrl,\n  clearInferenceDownloadUrl,\n})(DownloadForm);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { submitInferenceData, clearInferencePrediction } from '../../actions';\nimport {\n  renderFormField,\n  renderSubmitButton,\n  convertFileToBase64,\n  removeFileBase64Header,\n} from '../../utils';\nimport FormFileField from '../FormFileField';\n\nclass InferenceForm extends React.Component {\n  onSubmit = async ({ inferenceInput }) => {\n    this.props.clearInferencePrediction();\n\n    // Get input type\n    let inputType = 'text';\n    if (typeof inferenceInput === 'object') {\n      inputType = 'image';\n      inferenceInput = await convertFileToBase64(inferenceInput[0]);\n    }\n\n    // If input is non-text, convert it to base64 string\n    this.props.submitInferenceData({\n      formName: this.props.form,\n      formInput: {\n        token: this.props.token,\n        input:\n          inputType === 'image'\n            ? removeFileBase64Header(inferenceInput)\n            : inferenceInput,\n      },\n    });\n\n    // Send input to props for display\n    this.props.onSubmit(inferenceInput);\n  };\n\n  render() {\n    const { contentType, label, acceptFileFormat } = this.props.field;\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"mt-5 mt-md-0\"\n      >\n        {contentType === 'file' ? (\n          <>\n            <div className=\"text-center\">\n              <ImUpload3 size={35} className=\"mb-3\" />\n            </div>\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'inferenceInput',\n                component: renderFormField,\n                contentType,\n                label,\n                acceptFileFormat,\n              }}\n            />\n          </>\n        ) : (\n          <Field\n            name=\"inferenceInput\"\n            component={renderFormField}\n            contentType={contentType}\n            label={label}\n          />\n        )}\n        <Row className=\"mt-3\">\n          <Col className=\"mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              originalText: 'Predict',\n              loadingText: 'Predicting...',\n            })}\n          </Col>\n          <Col xs={12}>\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.inferenceInput) {\n    errors.inferenceInput = 'This field cannot be empty';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceData,\n  clearInferencePrediction,\n})(reduxForm({ form: 'inferenceForm', validate })(InferenceForm));\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport DownloadForm from './DownloadForm';\nimport InferenceForm from './InferenceForm';\n\nclass TaskDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inferenceInput: null,\n    };\n\n    // Set field values for form\n    let fieldValues = {};\n    if (this.props.taskType === 'imageClassification') {\n      fieldValues = {\n        contentType: 'file',\n        label: 'Upload Image',\n        acceptFileFormat: 'image/jpeg,image/png',\n      };\n    } else {\n      fieldValues = {\n        contentType: 'text',\n        label: 'Enter Text:',\n      };\n    }\n    this.fieldValues = fieldValues;\n  }\n\n  onSubmit = inferenceInput => {\n    if (this.props.taskType === 'imageClassification') {\n      this.setState({ inferenceInput: inferenceInput });\n    } else {\n      this.setState({ inferenceInput });\n    }\n  };\n\n  renderAccuracy() {\n    return (\n      <>\n        <h5 className=\"text-center mb-3\">\n          Best Accuracy:{' '}\n          <mark>\n            <b>\n              {(\n                this.props.accuracy * (this.props.accuracy < 1 ? 100 : 1)\n              ).toFixed(2)}{' '}\n              %\n            </b>\n          </mark>\n        </h5>\n        <Card\n          className=\"shadow bg-white rounded mx-auto\"\n          style={{ height: this.props.isMobile ? '20vh' : '30vh' }}\n        >\n          <Card.Img\n            variant=\"top\"\n            src={`data:image/jpeg;base64,${this.props.accuracyPlot}`}\n            alt=\"text classification example dataset preview\"\n          />\n        </Card>\n      </>\n    );\n  }\n\n  renderOutput() {\n    return (\n      <Row className=\"mb-5\">\n        <Col xs={12} className=\"mt-4\">\n          <h4 className=\"text-center\">Results</h4>\n        </Col>\n        <Col xs={12} lg={6} className=\"mt-4 ml-auto text-center\">\n          <h4 className=\"text-center\">Input</h4>\n          {this.props.taskType === 'imageClassification' ? (\n            <Card\n              className=\"mx-auto mt-3 shadow bg-white rounded\"\n              style={{ width: '20rem' }}\n            >\n              <Card.Img\n                variant=\"top\"\n                src={this.state.inferenceInput}\n                alt=\"source\"\n              />\n            </Card>\n          ) : (\n            <Card className=\"mx-auto shadow p-3 bg-white rounded\">\n              <Card.Body>\n                <Card.Text as=\"h5\">{this.state.inferenceInput}</Card.Text>\n              </Card.Body>\n            </Card>\n          )}\n        </Col>\n        <Col xs={12} lg={6} className=\"mt-5 mt-md-4 mr-auto text-center\">\n          <h4 className=\"text-center\">Prediction</h4>\n          <Card className=\"mx-auto mt-3 shadow bg-white rounded\">\n            <Card.Body>\n              <Card.Title as=\"h5\">{this.props.prediction}</Card.Title>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row className={`mb-${this.props.isDownloadable ? '3' : '5'}`}>\n          <Col xs={12}>\n            <h4 className=\"text-center\">\n              {this.props.taskType === 'imageClassification'\n                ? 'Image Classification'\n                : 'Text Classification'}\n            </h4>\n          </Col>\n        </Row>\n        {this.props.isDownloadable ? <DownloadForm /> : ''}\n        <Row className=\"mb-5\">\n          <Col\n            xs={12}\n            md={5}\n            className={`${this.props.isMobile ? 'mb-5' : ''} mx-auto`}\n          >\n            {this.renderAccuracy()}\n          </Col>\n          <Col\n            xs={12}\n            md={4}\n            className={`${this.props.isMobile ? 'mt-5' : 'my-auto'} mx-auto`}\n          >\n            <InferenceForm\n              onSubmit={this.onSubmit}\n              taskName={this.props.taskName}\n              field={this.fieldValues}\n            />\n          </Col>\n        </Row>\n        {this.props.prediction ? this.renderOutput() : ''}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  isMobile,\n  inference: { taskType, prediction, isDownloadable, accuracy, accuracyPlot },\n}) => {\n  return {\n    isMobile,\n    taskType,\n    prediction,\n    isDownloadable,\n    accuracy,\n    accuracyPlot,\n  };\n};\n\nexport default connect(mapStateToProps)(TaskDisplay);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst PreviewTask = () => {\n  const classList = [\n    'birdhouse',\n    'hourglass',\n    'lemon',\n    'pizza',\n    'seashore',\n    'stopwatch',\n  ];\n\n  return (\n    <>\n      <Row className=\"mt-5 mb-4\">\n        <Col>\n          <h4 className=\"text-center\">Preview Model</h4>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={11} className=\"mx-auto\">\n          Want to test out the platform without training a model? No worries. We\n          have prepared a <b>preview</b>{' '}\n          <mark>\n            <b>image classification model</b>\n          </mark>{' '}\n          just for these cases. Please use the token given to below to test it\n          out.\n        </Col>\n      </Row>\n      <Row className=\"my-4\">\n        <Col xs={11} className=\"mx-auto\">\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp;\n            imageClassification-tinyimgnet-demo-a0uac\n          </h5>\n        </Col>\n      </Row>\n      <Row className=\"mt-5\">\n        <Col xs={11} className=\"mx-auto mb-2\">\n          <h5>About the Model</h5>\n        </Col>\n        <Col xs={11} className=\"mx-auto\">\n          <p>\n            The model can classify images belonging to the following{' '}\n            <mark>\n              <b>six classes</b>\n            </mark>\n            :\n          </p>\n          {_.map(classList, item => {\n            return (\n              <Button\n                variant=\"success\"\n                size=\"sm\"\n                className=\"mr-2 my-1\"\n                key={item}\n              >\n                {item}\n              </Button>\n            );\n          })}\n        </Col>\n        <Col xs={11} className=\"mx-auto mt-3\">\n          The model was trained by fine-tuning a{' '}\n          <mark>\n            <b>ResNet34</b>\n          </mark>{' '}\n          model pre-trained on the ImageNet dataset.\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PreviewTask;\n\n// imageClassification-tinyimgnet-demo-dbasb\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { connect } from 'react-redux';\n\nimport { clearInference } from '../../actions';\nimport TokenForm from './TokenForm';\nimport TaskDisplay from './TaskDisplay';\nimport PreviewTask from './PreviewTask';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Inference extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'inference';\n  }\n\n  componentWillUnmount() {\n    this.props.clearInference(this.taskName);\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1 className=\"heading\">Test your Model</h1>\n        <TokenForm />\n        {this.props.token ? (\n          <TaskDisplay taskName={this.taskName} />\n        ) : (\n          <PreviewTask />\n        )}\n        <FloatinHelp target=\"inference\" />\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ inference: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, { clearInference })(Inference);\n","import _ from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nimport FloatinHelp from '../FloatingHelp';\n\nclass Playground extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playItems = [\n      {\n        title: 'Human Pose Estimation',\n        link: `/playground/humanposeestimation`,\n        media: '/assets/media/humanPoseEstimation.gif',\n      },\n      {\n        title: 'Neural Style Transfer',\n        link: `/playground/styletransfer`,\n        media: '/assets/media/neuralStyleTransfer.gif',\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Playground</h1>\n          </Col>\n        </Row>\n        <Row className=\"mb-5\">\n          <Col xs={11} className=\"mx-auto text-center\">\n            <p style={{ fontSize: '1.7vh' }}>\n              Don't have any models to train yet? Don't worry, we have trained\n              some fun models for you to try out. The models are already trained\n              and deployed so that you can directly perform inference on them.\n            </p>\n          </Col>\n        </Row>\n        <Row xs={1} md={2} lg={3}>\n          {_.map(this.playItems, item => {\n            return (\n              <Col className=\"mb-5 mt-5 mx-auto\" key={item.link}>\n                <Card\n                  className=\"card-hover rounded mx-auto\"\n                  as={Link}\n                  to={item.link}\n                  style={{ textDecoration: 'none', color: 'black' }}\n                >\n                  <Card.Img\n                    variant=\"top\"\n                    src={`${process.env.PUBLIC_URL}${item.media}`}\n                    alt={item.title}\n                  />\n                  <Card.Body className=\"text-center\">\n                    <Card.Title>{item.title}</Card.Title>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n        <FloatinHelp target=\"training\" />\n      </Container>\n    );\n  }\n}\n\nexport default Playground;\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { renderFormField, renderSubmitButton } from '../../utils';\n\nclass PlaygroundForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = formValues => {\n    const formData = new FormData();\n    let objectURL = {};\n    let otherData = {};\n    for (let i in formValues) {\n      if (typeof formValues[i] === 'object') {\n        let objectItem = formValues[i];\n        if (objectItem.length) {\n          objectItem = objectItem[0];\n        }\n        formData.append(i, objectItem);\n        objectURL[i] = URL.createObjectURL(objectItem);\n      } else {\n        formData.append(i, formValues[i]);\n        otherData[i] = formValues[i];\n      }\n    }\n    this.props.onSubmit({ formData, objectURL, otherData });\n  };\n\n  render() {\n    let buttonText = {\n      originalText: 'Predict',\n      loadingText: 'Predicting...',\n    };\n    if (this.props.buttonText) {\n      buttonText = this.props.buttonText;\n    }\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        {_.map(this.props.fields, item => {\n          return (\n            <Field\n              name={item.name}\n              key={item.name}\n              component={renderFormField}\n              contentType={item.contentType}\n              label={item.label}\n              options={item.options}\n              required\n            />\n          );\n        })}\n        <Row className=\"mt-3\">\n          <Col className=\"mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              ref: this.submitButtonRef,\n              ...buttonText,\n            })}\n          </Col>\n          <Col xs={12}>\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.image) {\n    errors.image = 'Please upload an image';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm }) => {\n  return { loadingForm };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({ validate })(PlaygroundForm)\n);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport { submitPlaygroundForm } from '../../actions';\nimport PlaygroundForm from './PlaygroundForm';\n\nclass HumanPoseEstimation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'humanposeestimation';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitPlaygroundForm({\n      url: 'https://wrad2oqme9.execute-api.ap-south-1.amazonaws.com/dev/pose',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.play.name === this.formName) {\n      return (\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mt-4 ml-auto text-center\">\n            <Card className=\"mx-auto\" style={{ width: '20rem' }}>\n              <Card.Img variant=\"top\" src={this.state.objectURL} alt=\"source\" />\n              <Card.Body>\n                <Card.Text>Input Image</Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col xs={12} md={6} className=\"mt-4 ml-auto text-center\">\n            <Card className=\"mx-auto\" style={{ width: '20rem' }}>\n              <Card.Img\n                variant=\"top\"\n                src={`data:image/jpeg;base64,${this.props.play.data.data}`}\n                alt=\"pose\"\n              />\n              <Card.Body>\n                <Card.Text>Pose Estimated Image</Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Human Pose Estimation</h1>\n          </Col>\n        </Row>\n\n        <Row className=\"my-4\">\n          <Col xs={11} lg={6} className=\"mx-auto\">\n            <p align=\"justify\">\n              This model uses a ResNet-50 model pre-trained on the MPII dataset\n              to predict and draw pose of a human in the input image.\n            </p>\n          </Col>\n        </Row>\n\n        <Row className=\"my-4\">\n          <Col xs={11} lg={6} className=\"mx-auto\">\n            <PlaygroundForm\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'fileField',\n                  label: 'Upload Face Image',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n\n        {this.renderOutput()}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ play }) => {\n  return { play };\n};\n\nexport default connect(mapStateToProps, { submitPlaygroundForm })(\n  HumanPoseEstimation\n);\n","import _ from 'lodash';\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport { submitPlaygroundForm } from '../../actions';\nimport PlaygroundForm from './PlaygroundForm';\n\nclass StyleTransfer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contentImageURL: null,\n      styleImageURL: null,\n    };\n\n    this.formName = 'styletransfer';\n    this.submitButtonRef = React.createRef();\n    this.styleMap = {\n      1: ['Candy', `${process.env.PUBLIC_URL}/assets/styles/candy.jpg`],\n      2: [\n        'Composition VII',\n        `${process.env.PUBLIC_URL}/assets/styles/composition_vii.jpg`,\n      ],\n      3: ['Feathers', `${process.env.PUBLIC_URL}/assets/styles/feathers.jpg`],\n      4: ['La Muse', `${process.env.PUBLIC_URL}/assets/styles/la_muse.jpg`],\n      5: ['Mosaic', `${process.env.PUBLIC_URL}/assets/styles/mosaic.jpg`],\n      6: [\n        'Starry Night',\n        `${process.env.PUBLIC_URL}/assets/styles/starry_night.jpg`,\n      ],\n      7: [\n        'The Scream',\n        `${process.env.PUBLIC_URL}/assets/styles/the_scream.jpg`,\n      ],\n      8: ['Udnie', `${process.env.PUBLIC_URL}/assets/styles/udnie.jpg`],\n      9: ['Wave', `${process.env.PUBLIC_URL}/assets/styles/wave.jpg`],\n    };\n  }\n\n  onSubmit = ({ formData, objectURL, otherData }) => {\n    this.props.submitPlaygroundForm({\n      url: 'https://0g0e7jb2ni.execute-api.ap-south-1.amazonaws.com/dev/style',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({\n      contentImageURL: objectURL.content,\n      styleImageURL: this.styleMap[otherData.style][1],\n    });\n  };\n\n  renderOutputSmallDisplay() {\n    return (\n      <React.Fragment>\n        <Col xs={12} className=\"d-block d-md-none mx-auto\">\n          <Row>\n            <Col xs={12} className=\"mb-2\">\n              <h3 className=\"text-center\">Inputs</h3>\n            </Col>\n            <Col xs={12}>\n              <Card>\n                <Card.Img\n                  variant=\"top\"\n                  src={this.state.contentImageURL}\n                  alt=\"content\"\n                />\n                <Card.Body>\n                  <Card.Text>Content Image</Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col xs={12} className=\"mt-2\">\n              <Card>\n                <Card.Img\n                  variant=\"top\"\n                  src={this.state.styleImageURL}\n                  alt=\"style\"\n                />\n                <Card.Body>\n                  <Card.Text>Style Image</Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={12} className=\"d-block d-md-none mx-auto\">\n          <Row>\n            <Col xs={12} className=\"mt-5 mb-2\">\n              <h3 className=\"text-center\">Output</h3>\n            </Col>\n          </Row>\n          <Col xs={12}>\n            <Card>\n              <Card.Img\n                variant=\"top\"\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                alt=\"styled\"\n              />\n              <Card.Body>\n                <Card.Text>Styled Content Image</Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Col>\n      </React.Fragment>\n    );\n  }\n\n  renderOutputLargeDisplay() {\n    return (\n      <React.Fragment>\n        <Col xs={7} className=\"d-none d-md-block ml-auto\">\n          <Row>\n            <Col xs={12}>\n              <h3 className=\"text-center\">Inputs</h3>\n            </Col>\n            <Col xs={6}>\n              <Card>\n                <Card.Img\n                  variant=\"top\"\n                  src={this.state.contentImageURL}\n                  alt=\"content\"\n                />\n                <Card.Body>\n                  <Card.Text>Content Image</Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col xs={6}>\n              <Card>\n                <Card.Img\n                  variant=\"top\"\n                  src={this.state.styleImageURL}\n                  alt=\"style\"\n                />\n                <Card.Body>\n                  <Card.Text>Style Image</Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={1} className=\"d-none d-md-block\" />\n        <Col xs={4} className=\"d-none d-md-block mr-auto\">\n          <Row>\n            <Col xs={12}>\n              <h3 className=\"text-center\">Output</h3>\n            </Col>\n          </Row>\n          <Col xs={12}>\n            <Card>\n              <Card.Img\n                variant=\"top\"\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                alt=\"styled\"\n              />\n              <Card.Body>\n                <Card.Text>Styled Content Image</Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Col>\n      </React.Fragment>\n    );\n  }\n\n  renderOutput() {\n    if (this.props.play.name === this.formName) {\n      return (\n        <Row className=\"mt-5\">\n          {this.renderOutputSmallDisplay()}\n          {this.renderOutputLargeDisplay()}\n        </Row>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Neural Style Transfer</h1>\n          </Col>\n        </Row>\n\n        <Row className=\"my-4\">\n          <Col xs={11} lg={8} className=\"mx-auto\">\n            <p align=\"justify\">\n              This model uses MSG-Net to perform Neural Style Transfer. Upload\n              your content image and select a style from one of the styles\n              available below. The selected style will be applied to you content\n              image.\n            </p>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12}>\n            <h3 className=\"heading\">Available Styles</h3>\n          </Col>\n          <Col>\n            <Row xs={1} md={3} lg={5}>\n              {_.map(this.styleMap, (value, key) => {\n                return (\n                  <Col className=\"mb-4\" key={key}>\n                    <Card>\n                      <Card.Img variant=\"top\" src={value[1]} alt={value[0]} />\n                      <Card.Body>\n                        <Card.Text>{value[0]}</Card.Text>\n                      </Card.Body>\n                    </Card>\n                  </Col>\n                );\n              })}\n            </Row>\n          </Col>\n        </Row>\n\n        <Row className=\"my-5\">\n          <Col xs={11} lg={6} className=\"mx-auto\">\n            <PlaygroundForm\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'content',\n                  contentType: 'fileField',\n                  label: 'Upload Content Image',\n                },\n                {\n                  name: 'style',\n                  contentType: 'dropdown',\n                  label: 'Select Style Image',\n                  options: this.styleMap,\n                },\n              ]}\n              buttonText={{\n                originalText: 'Style',\n                loadingText: 'Styling',\n              }}\n            />\n          </Col>\n        </Row>\n\n        {this.renderOutput()}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ play }) => {\n  return { play };\n};\n\nexport default connect(mapStateToProps, { submitPlaygroundForm })(\n  StyleTransfer\n);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Card from 'react-bootstrap/Card';\nimport { Link } from 'react-router-dom';\nimport { FaGithub, FaLinkedin } from 'react-icons/fa';\nimport { SiInstagram } from 'react-icons/si';\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.trainingSectionRef = React.createRef();\n    this.inferenceSectionRef = React.createRef();\n    this.playgroundSectionRef = React.createRef();\n\n    this.trainingSnapshots = [\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/training_page.png`,\n        text: 'Training page',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/img_classification_data_upload.png`,\n        text: 'Image classification data upload',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/tc_data_upload.png`,\n        text: 'Text classification data upload',\n      },\n    ];\n\n    this.inferenceSnapshots = [\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/tc_inference_form.png`,\n        text: 'Inference results',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/img_classification_prediction.png`,\n        text: 'Image classification prediction',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/inference_page.png`,\n        text: 'Inference page',\n      },\n    ];\n\n    this.playgroundSnapshots = [\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/playground_page.png`,\n        text: 'Playground page',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/neural_style_transfer_page.png`,\n        text: 'Neural style transfer results',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/human_pose_estimation_page.png`,\n        text: 'Human pose estimation results',\n      },\n    ];\n  }\n\n  componentDidMount() {\n    const { state: locationState } = this.props.location;\n    if (locationState) {\n      if (locationState.targetSection === 'training') {\n        this.trainingSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      } else if (locationState.targetSection === 'inference') {\n        this.inferenceSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      }\n    }\n  }\n\n  renderFlash() {\n    return (\n      <mark>\n        <b>\n          <Image\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '1.8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          F L A S H\n        </b>\n      </mark>\n    );\n  }\n\n  renderImageClassificationInfo() {\n    return (\n      <Row>\n        <Col xs={12} md={7} className=\"my-auto\">\n          <h3 className=\"mb-3\">Image Classification</h3>\n          <p>\n            Classify images from your own dataset by using them to train a{' '}\n            <mark>\n              <b>ResNet-34</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>MobileNet v2</b>\n            </mark>{' '}\n            model.\n          </p>\n          <p>\n            Training happens via transfer learning where models available will\n            be pre-trained on the ImageNet dataset.\n          </p>\n        </Col>\n        <Col xs={12} md={5} className=\"my-auto\">\n          <Card className=\"mx-auto mt-4\">\n            <Card.Img\n              variant=\"top\"\n              as=\"video\"\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                type=\"video/mp4\"\n              />\n            </Card.Img>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  renderTextClassificationInfo() {\n    return (\n      <Row className=\"my-5\">\n        <Col xs={12} md={7} className=\"my-auto\">\n          <h3 className=\"mb-3\">Text Classification</h3>\n          <p>\n            Classify sentences by training a{' '}\n            <mark>\n              <b>LSTM</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>GRU</b>\n            </mark>{' '}\n            based sequential model on your own dataset.\n          </p>\n          <p>The models will be trained from scratch.</p>\n        </Col>\n        <Col xs={12} md={5} className=\"my-auto\">\n          <Card className=\"mx-auto mt-4\">\n            <Card.Img\n              variant=\"top\"\n              as=\"video\"\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/textClassification.mp4`}\n                type=\"video/mp4\"\n              />\n            </Card.Img>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  renderSnapshots(snapshotData) {\n    return (\n      <Row xs={1} md={3} className=\"mx-auto mt-4\">\n        {snapshotData.map(snapshot => (\n          <Col className=\"mb-3\" key={snapshot.text}>\n            <Card className=\"card-hover shadow bg-white rounded\">\n              <Card.Img\n                variant=\"top\"\n                className=\"img-fluid\"\n                src={snapshot.image}\n                alt={snapshot.text}\n              />\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n\n  renderTrainingInfo() {\n    return (\n      <div ref={this.trainingSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Training</h3>\n        <p>\n          For training a model, you'll have to <b>upload your own dataset</b>{' '}\n          and <b>select the model parameters</b>. Depending on the size of the\n          dataset, the model can take anywhere between{' '}\n          <b>\n            <mark>3 - 10 minutes</mark> to train and deploy your model\n          </b>\n          .\n        </p>\n        <p>\n          After you upload your configuration, the platform will assign you a\n          unique{' '}\n          <mark>\n            <b>token</b>\n          </mark>\n          . Please save the token as it will used to test the model on the{' '}\n          <Link to=\"/inference\">inference page</Link>.\n        </p>\n        <p>\n          To train a model, <Link to=\"/training\">go here</Link>.\n        </p>\n        {this.renderSnapshots(this.trainingSnapshots)}\n      </div>\n    );\n  }\n\n  renderInferenceInfo() {\n    return (\n      <div ref={this.inferenceSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Inference</h3>\n        <p>\n          You can perform inference on a trained model by using the{' '}\n          <b>\n            <mark>token</mark>\n          </b>{' '}\n          provided to you after submitting the training configuration on the{' '}\n          <Link to=\"/training\">training page</Link>.\n        </p>\n        <p>\n          After submitting the token, you'll get a form where you can upload\n          inputs to check the performance of your trained model. The inference\n          page also provides you with the <b>results of the training process</b>{' '}\n          by showing you the{' '}\n          <b>\n            <mark>accuracy</mark>\n          </b>{' '}\n          of the model <b>on validation set</b> as well as the{' '}\n          <b>\n            <mark>change in accuracy</mark>\n          </b>{' '}\n          during training.\n        </p>\n        <p>\n          To test your model, <Link to=\"/inference\">go here</Link>.\n        </p>\n        {this.renderSnapshots(this.inferenceSnapshots)}\n      </div>\n    );\n  }\n\n  renderPlaygroundInfo() {\n    return (\n      <div ref={this.playgroundSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Playground</h3>\n        <p>\n          Don't have any models to train yet? Don't worry, we have trained some\n          fun models such as{' '}\n          <b>\n            <mark>Human Pose Estimation</mark>\n          </b>{' '}\n          and{' '}\n          <b>\n            <mark>Neural Style Transfer</mark>\n          </b>{' '}\n          for you to try out in the{' '}\n          <Link to=\"/playground\">playground page</Link>. The models are already\n          trained and deployed so that you can directly perform inference on\n          them.\n        </p>\n        {this.renderSnapshots(this.playgroundSnapshots)}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Container style={{ fontSize: '1.6vh' }}>\n        <h1 className=\"heading\">\n          About{' '}\n          <Image\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          Flash\n        </h1>\n        <Row>\n          <Col xs={12} className=\"mx-auto\">\n            <p className=\"text-center mb-5\">\n              {this.renderFlash()}\n              &nbsp;&nbsp;&nbsp; is an <b>end-to-end Deep Learning</b> platform\n              which allows users to create, train and deploy their own neural\n              network models in a matter of minutes without writing a single\n              line of code.\n            </p>\n            <p>The platform currently supports two types of tasks:</p>\n            {this.renderImageClassificationInfo()}\n            {this.renderTextClassificationInfo()}\n            <hr className=\"my-5\" />\n            <h2>How It Works</h2>\n            <p className=\"my-4\">\n              Using {this.renderFlash()} is easy. With just a few clicks you can\n              train and deploy your models automatically. You just have to\n              select your model and upload the dataset, and you're good to go.{' '}\n              <b>No code or experience required.</b>\n            </p>\n            {this.renderTrainingInfo()}\n            {this.renderInferenceInfo()}\n            {this.renderPlaygroundInfo()}\n            <hr className=\"my-5\" />\n            <p>\n              The source code of the project is hosted on GitHub. Please{' '}\n              <a\n                href=\"https://github.com/shan18/Flash\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                click here\n              </a>{' '}\n              to visit.\n            </p>\n            <p className=\"mt-4\">\n              To know about the author, check the links below\n            </p>\n            <p>\n              <a\n                className=\"anchor-black\"\n                href=\"https://github.com/shan18\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaGithub size={25} title=\"GitHub: shan18\" />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.linkedin.com/in/shanacharya/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaLinkedin\n                  size={25}\n                  title=\"LinkedIn: shanacharya\"\n                  className=\"mx-3\"\n                />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.instagram.com/shan_1.0/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <SiInstagram size={25} title=\"Instagram: shan_1.0\" />\n              </a>\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\n\nimport history from '../history';\nimport Home from './cover/Home';\nimport NavigationBar from './NavigationBar';\nimport Footer from './Footer';\nimport Training from './train/Training';\nimport Inference from './infer/Inference';\nimport Playground from './play/Playground';\nimport HumanPoseEstimation from './play/HumanPoseEstimation';\nimport StyleTransfer from './play/StyleTransfer';\nimport About from './About';\nimport { setMobile } from '../actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  resize() {\n    this.props.setMobile(window.innerWidth <= 767);\n  }\n\n  componentDidMount() {\n    // Check for mobile view\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"page-container\">\n          <div className=\"content-wrap\">\n            <ToastContainer\n              position=\"top-center\"\n              autoClose={false}\n              newestOnTop={false}\n              closeOnClick\n              rtl={false}\n              pauseOnFocusLoss\n              draggable\n              style={{ width: '40%' }}\n            />\n            <NavigationBar />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/training\" exact component={Training} />\n              <Route path=\"/inference\" exact component={Inference} />\n              <Route path=\"/playground\" exact component={Playground} />\n              <Route\n                path=\"/playground/humanposeestimation\"\n                exact\n                component={HumanPoseEstimation}\n              />\n              <Route\n                path=\"/playground/styletransfer\"\n                exact\n                component={StyleTransfer}\n              />\n              <Route path=\"/about\" exact component={About} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default connect(null, { setMobile })(App);\n","import { SET_NAV_LINKS } from '../actions/types';\n\nconst navigationReducer = (state = [], action) => {\n  switch (action.type) {\n    case SET_NAV_LINKS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default navigationReducer;\n","import { SET_MOBILE } from '../actions/types';\n\nconst homeReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_MOBILE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","import { SET_HOME, CLEAR_HOME } from '../actions/types';\n\nconst homeReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_HOME:\n      return true;\n    case CLEAR_HOME:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","import { LOADING_FORM, CLEAR_LOADING_FORM } from '../actions/types';\n\nconst loadingFormReducer = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_FORM:\n      return [...state, action.payload];\n    case CLEAR_LOADING_FORM:\n      return state.filter(element => element !== action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default loadingFormReducer;\n","import _ from 'lodash';\nimport {\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n} from '../actions/types';\n\nconst INITIAL_STATE = {};\n\nconst formFileFieldReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_FORM_FILE_FIELD_LABEL:\n      return { ...state, [action.payload.taskName]: action.payload.label };\n    case CLEAR_FORM_FILE_FIELD_LABEL:\n      return _.omit(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default formFileFieldReducer;\n","import _ from 'lodash';\nimport {\n  IC_CONFIG,\n  IC_MODEL_TYPE,\n  IC_DATA_SPLIT,\n  IC_ADD_CLASS,\n  IC_DELETE_CLASS,\n  IC_CURRENT_CLASS,\n  IC_ADD_IMAGES,\n  IC_DATA_CLEAR,\n  IC_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentClass: '',\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: {},\n  datasetSize: {},\n  datasetPreview: {},\n};\n\nconst imageClassificationReducer = (state = INITIAL_STATE, action) => {\n  let dataset, datasetSize, datasetPreview, currentConfig, currentClass;\n  switch (action.type) {\n    case IC_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case IC_MODEL_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case IC_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case IC_ADD_CLASS:\n      dataset = { ...state.dataset, [action.payload]: [] };\n      datasetSize = { ...state.datasetSize, [action.payload]: 0 };\n      datasetPreview = { ...state.datasetPreview, [action.payload]: [] };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case IC_DELETE_CLASS:\n      dataset = _.omit(state.dataset, action.payload);\n      datasetSize = _.omit(state.datasetSize, action.payload);\n      datasetPreview = _.omit(state.datasetPreview, action.payload);\n      currentClass =\n        state.currentClass === action.payload\n          ? INITIAL_STATE.currentClass\n          : state.currentClass;\n      return { ...state, dataset, datasetSize, datasetPreview, currentClass };\n    case IC_CURRENT_CLASS:\n      return { ...state, currentClass: action.payload };\n    case IC_ADD_IMAGES:\n      dataset = {\n        ...state.dataset,\n        [state.currentClass]: [\n          ...state.dataset[state.currentClass],\n          ...action.payload.imagesList,\n        ],\n      };\n      datasetSize = {\n        ...state.datasetSize,\n        [state.currentClass]:\n          state.datasetSize[state.currentClass] + action.payload.imagesListSize,\n      };\n      datasetPreview = {\n        ...state.datasetPreview,\n        [state.currentClass]: [\n          ...state.datasetPreview[state.currentClass],\n          ...action.payload.imagesListPreview,\n        ],\n      };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case IC_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case IC_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default imageClassificationReducer;\n","import _ from 'lodash';\nimport {\n  TC_CONFIG,\n  TC_RNN_TYPE,\n  TC_DATA_SPLIT,\n  TC_DATA_ADD,\n  TC_DATA_CLEAR,\n  TC_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: null,\n};\n\nconst textClassificationReducer = (state = INITIAL_STATE, action) => {\n  let currentConfig;\n  switch (action.type) {\n    case TC_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case TC_RNN_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case TC_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case TC_DATA_ADD:\n      return {\n        ...state,\n        dataset: action.payload,\n      };\n    case TC_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case TC_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default textClassificationReducer;\n","import { TRAIN_TOKEN_SET, TRAIN_TOKEN_CLEAR } from '../actions/types';\n\nconst serverConfigReducer = (state = {}, action) => {\n  switch (action.type) {\n    case TRAIN_TOKEN_SET:\n      return { ...state, token: action.payload };\n    case TRAIN_TOKEN_CLEAR:\n      return { ...state, token: '' };\n    default:\n      return state;\n  }\n};\n\nexport default serverConfigReducer;\n","import _ from 'lodash';\n\nimport {\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n  INFERENCE_DOWNLOAD_SET_PYTORCH,\n  INFERENCE_DOWNLOAD_CLEAR_PYTORCH,\n  INFERENCE_DOWNLOAD_SET_ONNX,\n  INFERENCE_DOWNLOAD_CLEAR_ONNX,\n} from '../actions/types';\n\nconst inferenceReducer = (state = {}, action) => {\n  switch (action.type) {\n    case INFERENCE_CONFIG_SET:\n      return { ...state, ...action.payload };\n    case INFERENCE_CONFIG_CLEAR:\n      return _.omit(state, 'token', 'prediction', 'accuracy', 'accuracyPlot');\n    case INFERENCE_SUBMIT:\n      return { ...state, prediction: action.payload };\n    case INFERENCE_PREDICTION_CLEAR:\n      return _.omit(state, 'prediction');\n    case INFERENCE_DOWNLOAD_SET_PYTORCH:\n      return { ...state, downloadUrlPytorch: action.payload.downloadUrl };\n    case INFERENCE_DOWNLOAD_CLEAR_PYTORCH:\n      return _.omit(state, 'downloadUrlPytorch');\n    case INFERENCE_DOWNLOAD_SET_ONNX:\n      return { ...state, downloadUrlOnnx: action.payload.downloadUrl };\n    case INFERENCE_DOWNLOAD_CLEAR_ONNX:\n      return _.omit(state, 'downloadUrlOnnx');\n    case INFERENCE_CLEAR:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default inferenceReducer;\n","import { PLAYGROUND_SUBMIT } from '../actions/types';\n\nconst INITIAL_STATE = {\n  name: '',\n  data: null,\n};\n\nconst playgroundReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PLAYGROUND_SUBMIT:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default playgroundReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport navigationReducer from './navigationReducer';\nimport mobileViewReducer from './mobileViewReducer';\nimport homeReducer from './homeReducer';\nimport loadingFormReducer from './loadingFormReducer';\nimport formFileFieldReducer from './formFileFieldReducer';\nimport imageClassificationReducer from './imageClassificationReducer';\nimport textClassificationReducer from './textClassificationReducer';\nimport serverConfigReducer from './serverConfigReducer';\nimport inferenceReducer from './inferenceReducer';\nimport playgroundReducer from './playgroundReducer';\n\nexport default combineReducers({\n  form: formReducer,\n  navigationLinks: navigationReducer,\n  isMobile: mobileViewReducer,\n  isHome: homeReducer,\n  loadingForm: loadingFormReducer,\n  formFileField: formFileFieldReducer,\n  imageClassification: imageClassificationReducer,\n  textClassification: textClassificationReducer,\n  serverConfig: serverConfigReducer,\n  inference: inferenceReducer,\n  play: playgroundReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}