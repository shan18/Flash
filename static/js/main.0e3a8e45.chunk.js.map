{"version":3,"sources":["history.js","actions/types.js","apis/train.js","apis/infer.js","actions/utils.js","actions/index.js","components/cover/CoverModal.js","components/cover/Home.js","components/Navbar.js","components/Footer.js","components/HoverButtons.js","utils/index.js","components/train/TrainingConfigForm.js","components/train/imageClassification/ClassificationClassListForm.js","components/train/imageClassification/ClassificationClassList.js","components/train/imageClassification/ClassificationClassChoiceForm.js","components/train/imageClassification/ClassificationDataUploadForm.js","components/train/imageClassification/ClassificationDataPreview.js","components/train/imageClassification/ClassificationDataset.js","components/train/imageClassification/ClassificationModal.js","components/train/imageClassification/ClassificationCreate.js","components/train/TrainingSubmitModal.js","components/train/imageClassification/Classification.js","components/FormFileField.js","components/train/textClassification/SADataUploadForm.js","components/train/textClassification/SAModal.js","components/train/textClassification/SACreate.js","components/train/textClassification/SentimentAnalysis.js","components/FloatingHelp.js","components/train/Training.js","components/infer/TokenForm.js","components/infer/InferenceForm.js","components/infer/TaskDisplay.js","components/infer/PreviewTask.js","components/infer/Inference.js","components/About.js","components/App.js","reducers/homeReducer.js","reducers/loadingFormReducer.js","reducers/formFileFieldReducer.js","reducers/classificationReducer.js","reducers/sentimentAnalysisReducer.js","reducers/serverConfigReducer.js","reducers/inferenceReducer.js","reducers/index.js","index.js"],"names":["createBrowserHistory","basename","process","SET_HOME","CLEAR_HOME","LOADING_FORM","CLEAR_LOADING_FORM","SET_FORM_FILE_FIELD_LABEL","CLEAR_FORM_FILE_FIELD_LABEL","TRAIN_TOKEN_SET","TRAIN_TOKEN_CLEAR","CLASSIFY_CONFIG","CLASSIFY_MODEL_TYPE","CLASSIFY_DATA_SPLIT","CLASSIFY_ADD_CLASS","CLASSIFY_DELETE_CLASS","CLASSIFY_CURRENT_CLASS","CLASSIFY_ADD_IMAGES","CLASSIFY_DATA_CLEAR","CLASSIFY_CLEAR","SA_CONFIG","SA_RNN_TYPE","SA_DATA_SPLIT","SA_DATA_ADD","SA_DATA_CLEAR","SA_CLEAR","INFERENCE_CONFIG_SET","INFERENCE_CONFIG_CLEAR","INFERENCE_SUBMIT","INFERENCE_PREDICTION_CLEAR","INFERENCE_CLEAR","axios","create","baseURL","headers","post","networkTransaction","a","url","formData","requestType","maxNumTries","apiType","response","numTries","api","inferApi","trainApi","get","console","log","statusCheck","data","status","toastError","message","toast","dark","size","color","checkResponse","result","loadingForm","formName","type","payload","clearLoadingForm","clearFormFileFieldLabel","clearTrainToken","setTrainConfig","taskName","config","clearTrainData","dispatch","clearTrainConfig","submitTrainRequest","trainConfig","FormData","append","JSON","stringify","token","reset","CoverModal","props","modalCardContent","title","targetUrl","contentImage","contentText","buttonText","className","src","style","height","alt","to","_","map","this","item","renderCardContent","ReactDOM","createPortal","onClick","onDismiss","e","stopPropagation","renderContent","document","querySelector","React","Component","Home","state","displayModal","toggleModal","setState","setHome","clearHome","playsInline","autoPlay","muted","renderModal","connect","Navbar","toggleNavbar","collapsed","activeNavItem","history","location","pathname","substring","isHome","backgroundColor","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","withRouter","rel","href","target","HoverButtons","buttonData","buttonValue","Object","isSmall","currentButtonValue","event","preventDefault","changeCurrentButtonValue","undefined","hoverButtons","renderButton","renderLoadingPage","loadingText","role","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","removeFileBase64Header","image","replace","setErrorClass","touched","renderError","renderTextInput","input","label","placeholder","textAppend","enableAppendSumbit","readOnly","meta","autoComplete","renderFormField","contentType","options","acceptFileFormat","multiple","isFixed","formGroupClassName","renderTextInputGroup","default","value","key","renderDropdownInputGroup","isMultiple","omit","accept","renderFileInputGroup","htmlFor","renderSwitchInputGroup","renderSubmitButton","loading","originalText","btnColor","ref","disabled","aria-hidden","TrainingConfigForm","reduceLrOnPlateau","toggleReduceLr","changeModelType","modelType","setTrainModelType","changeDataSplit","dataSplit","setTrainDataSplit","configOptions","batchSizeLimit","batchSizeMin","min","batchSizeMax","max","numEpochsLimit","numEpochsMin","numEpochsMax","onSubmit","handleSubmit","Field","name","component","modelFieldTitle","modelTypes","currentConfig","onChange","optimizers","ownProps","initialValues","reduxForm","validate","formValues","errors","test","reduceLrOnPlateauLimit","factorLimit","factor","patienceLimit","patience","minLrLimit","minLr","reduceLrOnPlateauPatience","reduceLrOnPlateauFactor","reduceLrOnPlateauMinLr","learningRateLimit","learningRateMin","learningRateMax","learningRate","batchSize","epochs","ClassificationClassListForm","classValue","isSaved","toggleSaveMode","classList","includes","classifyDeleteClass","classifyAddClass","initialData","isOptionalField","pattern","required","dataset","classification","keys","classNameValue","ClassificationClassList","range","numClassesLimit","number","length","form","renderClassList","ClassificationClassChoiceForm","zipObject","enableReinitialize","values","submit","ClassificationDataUploadForm","currentClass","numImagesExceeded","sizeExceeded","datasetSize","numImagesLimitMax","numImagesLimit","sizeLimit","ClassificationDataPreview","imgUrl","imgId","width","imgList","renderCard","datasetPreview","ClassificationDataset","onClassChoiceSubmit","classifyCurrentClass","fileListToArray","fileList","imagesList","Array","from","currentClassImgCount","slice","getImageListSize","imagesListSize","sumBy","partial","imageListToBase64","imagesListPreview","i","push","removeBase64HeaderFromImageList","onDataUploadSubmit","currentSize","info","classifyAddImages","classChoice","ClassificationModal","maxHeight","ClassificationCreate","onModalDismiss","clear","checkNumClasses","numClassesLimitMin","checkNumImages","numImagesLimitMin","datasetValues","datasetFailedClasses","sum","items","onConfigSubmit","mode","taskType","isEmpty","bindActionCreators","TrainingSubmitModal","serverConfig","Classification","optimizer","currentTrainConfig","trainConfigOptions","FormFileField","fieldConfig","fieldLabel","hideFilename","setFormFileFieldLabel","files","formFileField","SADataUploadForm","SAModal","csvData","saCsvData","saAddData","numRows","sentimentAnalysis","SACreate","checkDataset","SentimentAnalysis","FloatinHelp","targetSection","tooltip","styles","Training","changeCurrentTask","currentTask","adam","sgd","renderCurrentTask","TokenForm","clearInferenceConfig","submitInferenceToken","enableAppendSubmit","inference","accuracy","accuracyPlot","InferenceForm","inferenceInput","clearInferencePrediction","inputType","submitInferenceData","formInput","field","prediction","TaskDisplay","fieldValues","toFixed","renderAccuracy","renderOutput","PreviewTask","Inference","clearInference","About","trainingSectionRef","createRef","inferenceSectionRef","locationState","current","scrollIntoView","behaviour","fontSize","renderFlash","renderImageClassificationInfo","renderSentimentAnalysisInfo","renderTrainingInfo","renderInferenceInfo","App","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","path","exact","homeReducer","action","loadingFormReducer","filter","element","INITIAL_STATE","formFileFieldReducer","classificationReducer","sentimentAnalysisReducer","serverConfigReducer","inferenceReducer","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.0e3a8e45.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","export const SET_HOME = 'SET_HOME';\nexport const CLEAR_HOME = 'CLEAR_HOME';\nexport const LOADING_FORM = 'LOADING_FORM';\nexport const CLEAR_LOADING_FORM = 'CLEAR_LOADING_FORM';\nexport const SET_FORM_FILE_FIELD_LABEL = 'SET_FORM_FILE_FIELD_LABEL';\nexport const CLEAR_FORM_FILE_FIELD_LABEL = 'CLEAR_FORM_FILE_FIELD_LABEL';\nexport const TRAIN_TOKEN_SET = 'TRAIN_TOKEN_SET';\nexport const TRAIN_TOKEN_CLEAR = 'TRAIN_TOKEN_CLEAR';\nexport const CLASSIFY_CONFIG = 'CLASSIFY_CONFIG';\nexport const CLASSIFY_MODEL_TYPE = 'CLASSIFY_MODEL_TYPE';\nexport const CLASSIFY_DATA_SPLIT = 'CLASSIFY_DATA_SPLIT';\nexport const CLASSIFY_ADD_CLASS = 'CLASSIFY_ADD_CLASS';\nexport const CLASSIFY_DELETE_CLASS = 'CLASSIFY_DELETE_CLASS';\nexport const CLASSIFY_CURRENT_CLASS = 'CLASSIFY_CURRENT_CLASS';\nexport const CLASSIFY_ADD_IMAGES = 'CLASSIFY_ADD_IMAGES';\nexport const CLASSIFY_DATA_CLEAR = 'CLASSIFY_DATA_CLEAR';\nexport const CLASSIFY_CLEAR = 'CLASSIFY_CLEAR';\nexport const SA_CONFIG = 'SA_CONFIG';\nexport const SA_RNN_TYPE = 'SA_RNN_TYPE';\nexport const SA_DATA_SPLIT = 'SA_DATA_SPLIT';\nexport const SA_DATA_ADD = 'SA_DATA_ADD';\nexport const SA_DATA_CLEAR = 'SA_DATA_CLEAR';\nexport const SA_CLEAR = 'SA_CLEAR';\nexport const INFERENCE_CONFIG_SET = 'INFERENCE_CONFIG_SET';\nexport const INFERENCE_CONFIG_CLEAR = 'INFERENCE_CONFIG_CLEAR';\nexport const INFERENCE_SUBMIT = 'INFERENCE_SUBMIT';\nexport const INFERENCE_PREDICTION_CLEAR = 'INFERENCE_PREDICTION_CLEAR';\nexport const INFERENCE_CLEAR = 'INFERENCE_CLEAR';\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_TRAIN_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_INFER_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport trainApi from '../apis/train';\nimport inferApi from '../apis/infer';\n\nexport const networkTransaction = async ({\n  url,\n  formData,\n  requestType,\n  maxNumTries,\n  apiType,\n}) => {\n  let response = null;\n  let numTries = 0;\n\n  let api = inferApi;\n  if (apiType === 'train') {\n    api = trainApi;\n  }\n\n  if (!maxNumTries) {\n    maxNumTries = 1;\n  }\n\n  while (numTries >= 0 && numTries < maxNumTries) {\n    try {\n      if (requestType === 'post') {\n        response = await api.post(url, formData);\n      } else {\n        response = await api.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n\nexport const statusCheck = async () => {\n  const response = await networkTransaction({\n    url: '/status',\n    requestType: 'get',\n    apiType: 'train',\n  });\n  return response.data.status !== 'active';\n};\n\nexport const toastError = message => {\n  toast.dark(\n    <div>\n      <MdError size={25} color=\"yellow\" />\n      &nbsp; {message}\n    </div>\n  );\n};\n\nexport const checkResponse = response => {\n  if (response && response.data) {\n    if (response.data.result === 'success') {\n      return true;\n    } else if (response.data.result === 'error') {\n      toastError(response.data.message);\n    } else {\n      toastError('500: Internal Server Error!');\n    }\n  } else {\n    toastError('500: Internal Server Error!');\n  }\n  return false;\n};\n","import { reset } from 'redux-form';\n\nimport {\n  SET_HOME,\n  CLEAR_HOME,\n  LOADING_FORM,\n  CLEAR_LOADING_FORM,\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n  TRAIN_TOKEN_SET,\n  TRAIN_TOKEN_CLEAR,\n  CLASSIFY_CONFIG,\n  CLASSIFY_MODEL_TYPE,\n  CLASSIFY_DATA_SPLIT,\n  CLASSIFY_ADD_CLASS,\n  CLASSIFY_DELETE_CLASS,\n  CLASSIFY_CURRENT_CLASS,\n  CLASSIFY_ADD_IMAGES,\n  CLASSIFY_DATA_CLEAR,\n  CLASSIFY_CLEAR,\n  SA_CONFIG,\n  SA_RNN_TYPE,\n  SA_DATA_SPLIT,\n  SA_DATA_ADD,\n  SA_DATA_CLEAR,\n  SA_CLEAR,\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n} from './types';\nimport {\n  networkTransaction,\n  statusCheck,\n  toastError,\n  checkResponse,\n} from './utils';\n\nexport const setHome = () => {\n  return {\n    type: SET_HOME,\n  };\n};\n\nexport const clearHome = () => {\n  return {\n    type: CLEAR_HOME,\n  };\n};\n\nexport const loadingForm = formName => {\n  return {\n    type: LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const clearLoadingForm = formName => {\n  return {\n    type: CLEAR_LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const setFormFileFieldLabel = ({ taskName, label }) => {\n  return {\n    type: SET_FORM_FILE_FIELD_LABEL,\n    payload: { taskName, label },\n  };\n};\n\nexport const clearFormFileFieldLabel = formName => {\n  return {\n    type: CLEAR_FORM_FILE_FIELD_LABEL,\n    payload: formName,\n  };\n};\n\nexport const clearTrainToken = () => {\n  return {\n    type: TRAIN_TOKEN_CLEAR,\n  };\n};\n\nexport const setTrainConfig = ({ taskName, config }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_CONFIG : SA_CONFIG;\n  return {\n    type: actionType,\n    payload: config,\n  };\n};\n\nexport const setTrainDataSplit = ({ taskName, dataSplit }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_DATA_SPLIT : SA_DATA_SPLIT;\n  return {\n    type: actionType,\n    payload: dataSplit,\n  };\n};\n\nexport const setTrainModelType = ({ taskName, modelType }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_MODEL_TYPE : SA_RNN_TYPE;\n  return {\n    type: actionType,\n    payload: modelType,\n  };\n};\n\nexport const clearTrainData = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({\n    type: taskName === 'classification' ? CLASSIFY_DATA_CLEAR : SA_DATA_CLEAR,\n  });\n};\n\nexport const clearTrainConfig = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: taskName === 'classification' ? CLASSIFY_CLEAR : SA_CLEAR });\n};\n\nexport const submitTrainRequest = ({\n  formName,\n  trainConfig,\n}) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Check server status\n  const serverIsAvailable = await statusCheck();\n\n  if (serverIsAvailable) {\n    // Encode data\n    const formData = new FormData();\n    formData.append('training_data', JSON.stringify(trainConfig));\n\n    // Processing the last url in list to display in webpage\n    const response = await networkTransaction({\n      url: '/train',\n      formData,\n      requestType: 'post',\n      apiType: 'train',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({ type: TRAIN_TOKEN_SET, payload: response.data.token });\n      dispatch(reset(formName));\n    }\n  } else {\n    toastError(\n      'Server is currently training another model! Please try again after a few minutes.'\n    );\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n\nexport const classifyAddClass = classNameValue => {\n  return {\n    type: CLASSIFY_ADD_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyDeleteClass = classNameValue => {\n  return {\n    type: CLASSIFY_DELETE_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyCurrentClass = classNameValue => {\n  return {\n    type: CLASSIFY_CURRENT_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyAddImages = ({\n  imagesList,\n  imagesListSize,\n  imagesListPreview,\n}) => {\n  return {\n    type: CLASSIFY_ADD_IMAGES,\n    payload: { imagesList, imagesListSize, imagesListPreview },\n  };\n};\n\nexport const saAddData = csvData => {\n  return {\n    type: SA_DATA_ADD,\n    payload: csvData,\n  };\n};\n\nexport const clearInferenceConfig = () => {\n  return {\n    type: INFERENCE_CONFIG_CLEAR,\n  };\n};\n\nexport const clearInferencePrediction = () => {\n  return { type: INFERENCE_PREDICTION_CLEAR };\n};\n\nexport const clearInference = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: INFERENCE_CLEAR });\n};\n\nexport const submitInferenceToken = ({ formName, token }) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Encode data\n  const formData = new FormData();\n  formData.append('token', JSON.stringify({ token }));\n\n  const response = await networkTransaction({\n    url: '/check',\n    formData,\n    requestType: 'post',\n    apiType: 'inference',\n  });\n\n  if (checkResponse(response)) {\n    dispatch({\n      type: INFERENCE_CONFIG_SET,\n      payload: {\n        token,\n        taskType: response.data.taskType,\n        accuracy: response.data.accuracy,\n        accuracyPlot: response.data.accuracyPlot,\n      },\n    });\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n\nexport const submitInferenceData = ({\n  formName,\n  formInput,\n}) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Encode data\n  const formData = new FormData();\n  formData.append('inferenceInput', JSON.stringify(formInput));\n\n  const response = await networkTransaction({\n    url: '/inference',\n    formData,\n    requestType: 'post',\n    apiType: 'inference',\n    maxNumTries: 3,\n  });\n\n  if (checkResponse(response)) {\n    dispatch({\n      type: INFERENCE_SUBMIT,\n      payload: response.data.prediction,\n    });\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from 'react-router-dom';\n\nimport '../../styles/Modal.css';\n\nclass CoverModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.modalCardContent = [\n      {\n        title: 'Training',\n        targetUrl: '/training',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/training.gif`,\n        contentText: (\n          <>\n            Train an{' '}\n            <mark>\n              <b>Image Classification</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>Sentiment Analysis</b>\n            </mark>{' '}\n            model on your custom dataset.\n          </>\n        ),\n        buttonText: 'Choose Task',\n      },\n      {\n        title: 'Inference',\n        targetUrl: '/inference',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/inference.gif`,\n        contentText:\n          'Already trained a model on Flash? Choose this to test your model.',\n        buttonText: 'Test Model',\n      },\n    ];\n  }\n\n  renderCardContent({\n    title,\n    targetUrl,\n    contentImage,\n    contentText,\n    buttonText,\n  }) {\n    return (\n      <div className=\"card card-hover\" key={targetUrl}>\n        <img\n          src={contentImage}\n          className=\"card-img-top\"\n          style={{ height: '24vh' }}\n          alt=\"source\"\n        />\n        <div className=\"card-body\">\n          <h4 className=\"card-title text-center\">{title}</h4>\n          <p className=\"card-text my-4\">{contentText}</p>\n          <div className=\"text-center\">\n            <Link to={targetUrl}>\n              <button className=\"btn btn-info\">{buttonText}</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderContent() {\n    return (\n      <div className=\"card-deck px-0 px-md-5\">\n        {_.map(this.modalCardContent, item => {\n          return this.renderCardContent(item);\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={this.props.onDismiss}>\n        <div className=\"modal-body\" onClick={e => e.stopPropagation()}>\n          <h3 className=\"text-center\">Get Started</h3>\n          <hr className=\"w-100 mb-4\" />\n          {this.renderContent()}\n          <hr className=\"w-100 mt-4\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={this.props.onDismiss}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default CoverModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setHome, clearHome } from '../../actions';\nimport CoverModal from './CoverModal';\nimport '../../styles/Home.css';\n\nclass Home extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  componentDidMount() {\n    this.props.setHome();\n  }\n\n  componentWillUnmount() {\n    this.props.clearHome();\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <CoverModal onDismiss={this.toggleModal} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <header>\n          <div className=\"overlay\"></div>\n          <video playsInline=\"playsinline\" autoPlay=\"autoplay\" muted=\"muted\">\n            <source\n              src={`${process.env.PUBLIC_URL}/assets/media/home.mp4`}\n              type=\"video/mp4\"\n            />\n          </video>\n          <div className=\"container h-100\">\n            <div className=\"d-flex h-100 text-center align-items-center\">\n              <div className=\"w-100 text-white\">\n                <h1 className=\"display-3\">\n                  <img\n                    src={`${process.env.PUBLIC_URL}/flash.svg`}\n                    style={{ height: '10vh' }}\n                    alt=\"flash-logo\"\n                  />{' '}\n                  F L A S H\n                </h1>\n                <button\n                  className=\"btn btn-outline-light mt-5\"\n                  onClick={() => this.toggleModal()}\n                >\n                  Get Started\n                </button>\n              </div>\n            </div>\n          </div>\n        </header>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nexport default connect(null, { setHome, clearHome })(Home);\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n    };\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    const activeNavItem = this.props.history.location.pathname.substring(1);\n    return (\n      <nav\n        className={`navbar ${\n          this.props.isHome ? 'fixed-top' : ''\n        } navbar-expand-lg navbar-dark`}\n        style={{ backgroundColor: 'black' }}\n      >\n        <div className=\"container\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            <img\n              src={`${process.env.PUBLIC_URL}/flash.svg`}\n              style={{ height: '2rem' }}\n              className=\"mr-2\"\n              alt=\"logo\"\n            />{' '}\n            F L A S H\n          </Link>\n          <button\n            className={`navbar-toggler navbar-toggler-right ${\n              this.state.collapsed ? 'collapsed' : ''\n            }`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n            onClick={this.toggleNavbar}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div\n            className={`collapse navbar-collapse ${\n              this.state.collapsed ? '' : 'show'\n            }`}\n            id=\"navbarSupportedContent\"\n            onClick={this.toggleNavbar}\n          >\n            <ul className=\"navbar-nav ml-auto\">\n              <li\n                className={`nav-item ${\n                  activeNavItem === 'training' ? 'active' : ''\n                }`}\n                key=\"training\"\n              >\n                <Link className=\"nav-link\" to=\"/training\">\n                  Training\n                </Link>\n              </li>\n              <li\n                className={`nav-item ${\n                  activeNavItem === 'inference' ? 'active' : ''\n                }`}\n                key=\"inference\"\n              >\n                <Link className=\"nav-link\" to=\"/inference\">\n                  Inference\n                </Link>\n              </li>\n              <li\n                className={`nav-item ${\n                  activeNavItem === 'about' ? 'active' : ''\n                }`}\n                key=\"about\"\n              >\n                <Link className=\"nav-link\" to=\"/about\">\n                  About\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isHome }) => {\n  return { isHome };\n};\n\nexport default connect(mapStateToProps)(withRouter(Navbar));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport '../styles/Footer.css';\n\nconst Footer = props => {\n  return (\n    <>\n      {props.isHome ? (\n        ''\n      ) : (\n        <footer className=\"footer py-3 mt-5\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-6 text-left\">\n                <img\n                  src={`${process.env.PUBLIC_URL}/flash.svg`}\n                  style={{ height: '2rem' }}\n                  alt=\"logo\"\n                />\n                <span className=\"text-muted ml-3\">Flash</span>\n              </div>\n              <div className=\"col-6 text-right\">\n                <span className=\"text-muted mr-3\">\n                  <a\n                    className=\"anchor-black\"\n                    rel=\"noreferrer\"\n                    href=\"https://github.com/shan18/Flash\"\n                    target=\"_blank\"\n                  >\n                    GitHub\n                  </a>\n                </span>\n                <img\n                  src={`${process.env.PUBLIC_URL}/github_logo.png`}\n                  style={{ height: '1.5rem' }}\n                  alt=\"github\"\n                />\n              </div>\n            </div>\n          </div>\n        </footer>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ isHome }) => {\n  return { isHome };\n};\n\nexport default connect(mapStateToProps)(Footer);\n","import _ from 'lodash';\nimport React from 'react';\n\nclass HoverButtons extends React.Component {\n  renderButton(buttonData) {\n    let buttonValue = '';\n    let buttonText = '';\n\n    if (buttonData instanceof Object) {\n      buttonValue = buttonData.buttonValue;\n      buttonText = buttonData.buttonText;\n    } else {\n      buttonValue = buttonData;\n      buttonText = buttonData;\n    }\n\n    return (\n      <button\n        className={`btn border border-secondary mx-2 my-2 btn-hover ${\n          this.props.isSmall ? 'btn-sm' : ''\n        } ${\n          this.props.currentButtonValue === buttonValue ? 'btn-primary' : ''\n        }`}\n        onClick={event => {\n          event.preventDefault();\n          this.props.changeCurrentButtonValue(buttonValue);\n        }}\n        key={buttonValue}\n      >\n        {buttonText === undefined ? buttonValue : buttonText}\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {_.map(this.props.hoverButtons, buttonData =>\n          this.renderButton(buttonData)\n        )}\n      </>\n    );\n  }\n}\n\nexport default HoverButtons;\n","import _ from 'lodash';\nimport React from 'react';\n\nexport const renderLoadingPage = loadingText => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 text-center\">\n        <h4 className=\"heading\">{loadingText}</h4>\n      </div>\n      <div className=\"col-12 text-center\">\n        <div className=\"spinner-grow spinner-grow-md\" role=\"status\" />\n      </div>\n    </div>\n  );\n};\n\nexport const convertFileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\nexport const removeFileBase64Header = image => {\n  return image.replace('data:', '').replace(/^.+,/, '');\n};\n\n/* Form utility functions */\n\nconst setErrorClass = ({ touched, error }) => {\n  return `${touched && error ? 'is-invalid' : ''}`;\n};\n\nexport const renderError = ({ error, touched }) => {\n  if (touched && error) {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  }\n};\n\nexport const renderTextInput = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  meta,\n}) => {\n  return (\n    <>\n      {label ? <label>{label}</label> : ''}\n      <div className={`input-group ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type={type}\n          className=\"form-control\"\n          placeholder={placeholder}\n          autoComplete=\"off\"\n          readOnly={readOnly}\n        />\n        {textAppend ? (\n          <div className=\"input-group-append\">\n            {enableAppendSumbit ? (\n              <button className=\"btn btn-danger\">{textAppend}</button>\n            ) : (\n              <button\n                className=\"btn btn-danger\"\n                onClick={event => event.preventDefault}\n              >\n                {textAppend}\n              </button>\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      {renderError(meta)}\n    </>\n  );\n};\n\nexport const renderTextInputGroup = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      {renderTextInput({\n        input,\n        label,\n        type,\n        placeholder,\n        textAppend,\n        enableAppendSumbit,\n        readOnly,\n        meta,\n      })}\n    </div>\n  );\n};\n\nexport const renderDropdownInputGroup = ({\n  input,\n  label,\n  options,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      {label ? <label>{label}</label> : ''}\n      <div className={`input-group ${setErrorClass(meta)}`}>\n        <select {...input} className=\"form-control custom-select\">\n          {options.default ? <option value=\"\">{options.default}</option> : ''}\n          {_.map(options, (value, key) => {\n            if (key !== 'default') {\n              return (\n                <option key={key} value={key}>\n                  {value}\n                </option>\n              );\n            }\n            return '';\n          })}\n        </select>\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderFileInputGroup = ({\n  input,\n  label,\n  acceptFileFormat,\n  multiple,\n  formGroupClassName,\n  meta,\n}) => {\n  let isMultiple = multiple ? multiple : false;\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <div className={`custom-file ${setErrorClass(meta)}`}>\n        <label className=\"custom-file-label text-left\">{label}</label>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"custom-file-input\"\n          multiple={isMultiple}\n          accept={acceptFileFormat}\n        />\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderSwitchInputGroup = ({\n  input,\n  label,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <div className={`custom-control custom-switch ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n          id=\"custom-switch-input\"\n        />\n        <label className=\"custom-control-label\" htmlFor=\"custom-switch-input\">\n          {label}\n        </label>\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderFormField = ({\n  input,\n  contentType,\n  type,\n  placeholder,\n  label,\n  options,\n  acceptFileFormat,\n  multiple,\n  textAppend,\n  enableAppendSumbit,\n  isFixed: readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  if (contentType === 'text') {\n    return renderTextInputGroup({\n      input,\n      label,\n      type,\n      placeholder,\n      textAppend,\n      enableAppendSumbit,\n      readOnly,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'dropdown') {\n    return renderDropdownInputGroup({\n      input,\n      label,\n      options,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'file') {\n    return renderFileInputGroup({\n      input,\n      label,\n      acceptFileFormat,\n      multiple,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'switch') {\n    return renderSwitchInputGroup({\n      input,\n      label,\n      formGroupClassName,\n      meta,\n    });\n  }\n  return '';\n};\n\nexport const renderSubmitButton = ({\n  loading,\n  originalText,\n  loadingText,\n  onClick,\n  btnColor,\n  type,\n  ref,\n}) => {\n  if (!type) {\n    type = 'submit';\n  }\n  if (!btnColor) {\n    btnColor = 'primary';\n  }\n  if (loading) {\n    return (\n      <button className={`btn btn-${btnColor}`} type={type} ref={ref} disabled>\n        <span\n          className=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n        &nbsp;&nbsp;{loadingText}\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn btn-${btnColor}`}\n        type={type}\n        ref={ref}\n        onClick={onClick}\n      >\n        {originalText}\n      </button>\n    );\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { setTrainModelType, setTrainDataSplit } from '../../actions';\nimport { renderFormField } from '../../utils';\nimport HoverButtons from '../HoverButtons';\n\nclass TrainingConfigForm extends React.Component {\n  state = {\n    reduceLrOnPlateau: false,\n  };\n\n  toggleReduceLr = () => {\n    this.setState({ reduceLrOnPlateau: !this.state.reduceLrOnPlateau });\n  };\n\n  changeModelType = modelType => {\n    this.props.setTrainModelType({ taskName: this.props.taskName, modelType });\n  };\n\n  changeDataSplit = dataSplit => {\n    this.props.setTrainDataSplit({ taskName: this.props.taskName, dataSplit });\n  };\n\n  render() {\n    const {\n      batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n      numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n    } = this.props.configOptions;\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col mx-auto\">\n            <Field\n              name=\"taskName\"\n              component={renderFormField}\n              contentType=\"text\"\n              placeholder=\"Enter Task Name\"\n              formGroupClassName=\"text-center\"\n              label={<h4>Task Name</h4>}\n            />\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mr-auto text-center\">\n            <h4 className=\"mb-2\">{this.props.configOptions.modelFieldTitle}</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.modelTypes}\n              currentButtonValue={this.props.currentConfig.modelType}\n              changeCurrentButtonValue={this.changeModelType}\n              isSmall\n            />\n          </div>\n          <div className=\"col-12 col-md-4 ml-auto mt-5 mt-md-0 text-center\">\n            <h4 className=\"mb-2\">Dataset Split</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.dataSplit}\n              currentButtonValue={this.props.currentConfig.dataSplit}\n              changeCurrentButtonValue={this.changeDataSplit}\n              isSmall\n            />\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mx-auto text-center\">\n            <h4 className=\"mb-2\">Callbacks</h4>\n            <Field\n              name=\"reduceLrOnPlateau\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Reduce LR on Plateau\"\n              onChange={() => this.toggleReduceLr()}\n            />\n          </div>\n        </div>\n        {this.state.reduceLrOnPlateau ? (\n          <div className=\"form-group row mt-1 mb-5\">\n            <div className=\"col-12 col-md-4 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauPatience\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Patience\"\n                placeholder=\"Enter Patience\"\n              />\n            </div>\n            <div className=\"col-12 col-md-4 my-3 my-md-0 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauFactor\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Factor\"\n                placeholder=\"Enter Factor\"\n              />\n            </div>\n            <div className=\"col-12 col-md-4 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauMinLr\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Minimum LR\"\n                placeholder=\"Enter Min LR\"\n              />\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n        <div className=\"form-group row my-5\">\n          <div className=\"col-12 col-md-6 text-center\">\n            <Field\n              name=\"optimizer\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              label=\"Optimizer\"\n              options={this.props.configOptions.optimizers}\n            />\n          </div>\n          <div className=\"col-12 col-md-6 mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"learningRate\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Learning Rate\"\n              placeholder=\"Enter LR\"\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <div className=\"col-12 col-md-6 text-center\">\n            <Field\n              name=\"batchSize\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Batch Size\"\n              placeholder={`Range: ${batchSizeMin} - ${batchSizeMax}`}\n            />\n          </div>\n          <div className=\"col-12 col-md-6 mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"epochs\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Epochs\"\n              placeholder={`Range: ${numEpochsMin} - ${numEpochsMax}`}\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = (formValues, { configOptions }) => {\n  const errors = {};\n\n  // Task Name\n  if (!formValues.taskName) {\n    errors.taskName = 'You must enter a task name';\n  } else if (!/^[a-zA-Z0-9- ]+$/i.test(formValues.taskName)) {\n    errors.taskName =\n      'Task name can contain only alphabets, numbers, hyphens and spaces';\n  }\n\n  // Reduce LR on Plateau\n  if (formValues.reduceLrOnPlateau) {\n    const {\n      reduceLrOnPlateauLimit: {\n        factor: factorLimit,\n        patience: patienceLimit,\n        minLr: minLrLimit,\n      },\n    } = configOptions;\n\n    // Patience\n    if (!formValues.reduceLrOnPlateauPatience) {\n      errors.reduceLrOnPlateauPatience = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.reduceLrOnPlateauPatience)) {\n      errors.reduceLrOnPlateauPatience = 'Must be an integer';\n    } else if (\n      formValues.reduceLrOnPlateauPatience < patienceLimit.min ||\n      formValues.reduceLrOnPlateauPatience > patienceLimit.max\n    ) {\n      errors.reduceLrOnPlateauPatience = `Must be between ${patienceLimit.min} and ${patienceLimit.max}`;\n    }\n\n    // Factor\n    if (!formValues.reduceLrOnPlateauFactor) {\n      errors.reduceLrOnPlateauFactor = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauFactor)\n    ) {\n      errors.reduceLrOnPlateauFactor = 'Enter a valid value';\n    } else if (\n      formValues.reduceLrOnPlateauFactor < factorLimit.min ||\n      formValues.reduceLrOnPlateauFactor > factorLimit.max\n    ) {\n      errors.reduceLrOnPlateauFactor = `Must be between ${factorLimit.min} and ${factorLimit.max}`;\n    }\n\n    // Min LR\n    if (!formValues.reduceLrOnPlateauMinLr) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauMinLr)\n    ) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a valid value';\n    } else if (formValues.reduceLrOnPlateauMinLr < minLrLimit) {\n      errors.reduceLrOnPlateauMinLr = `Minimum value is ${minLrLimit}`;\n    }\n  }\n\n  // Learning Rate\n  const {\n    learningRateLimit: { min: learningRateMin, max: learningRateMax },\n  } = configOptions;\n  if (!formValues.learningRate) {\n    errors.learningRate = 'You must enter a learning rate';\n  } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.learningRate)) {\n    errors.learningRate = 'Enter a valid value';\n  } else if (\n    formValues.learningRate < learningRateMin ||\n    formValues.learningRate > learningRateMax\n  ) {\n    errors.learningRate = `Must be between ${learningRateMin} and ${learningRateMax}`;\n  }\n\n  // Batch Size\n  const {\n    batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n  } = configOptions;\n  if (!formValues.batchSize) {\n    errors.batchSize = 'You must enter a batch size';\n  } else if (!/^[0-9]+$/i.test(formValues.batchSize)) {\n    errors.batchSize = 'Batch size must be an integer';\n  } else if (\n    formValues.batchSize < batchSizeMin ||\n    formValues.batchSize > batchSizeMax\n  ) {\n    errors.batchSize = `Must be between ${batchSizeMin} and ${batchSizeMax}`;\n  }\n\n  // Epochs\n  const {\n    numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n  } = configOptions;\n  if (!formValues.epochs) {\n    errors.epochs = 'You must enter the number of epochs';\n  } else if (!/^[0-9]+$/i.test(formValues.epochs)) {\n    errors.epochs = 'Number of epochs must be an integer';\n  } else if (\n    formValues.epochs < numEpochsMin ||\n    formValues.epochs > numEpochsMax\n  ) {\n    errors.epochs = `Must be between ${numEpochsMin} and ${numEpochsMax}`;\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const { configOptions, currentConfig } = state[ownProps.taskName];\n  return { configOptions, currentConfig, initialValues: currentConfig };\n};\n\nexport default connect(mapStateToProps, {\n  setTrainModelType,\n  setTrainDataSplit,\n})(reduxForm({ validate })(TrainingConfigForm));\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { FaCheck } from 'react-icons/fa';\nimport { MdDelete, MdError } from 'react-icons/md';\n\nimport { classifyAddClass, classifyDeleteClass } from '../../../actions';\n\nclass ClassificationClassListForm extends React.Component {\n  state = {\n    classValue: '',\n    isSaved: false,\n  };\n\n  toggleSaveMode = () => {\n    this.setState({ isSaved: !this.state.isSaved });\n  };\n\n  onSubmit() {\n    const { isSaved } = this.state;\n    if (!isSaved && this.props.classList.includes(this.state.classValue)) {\n      toast.error(\n        <div>\n          <MdError size={25} />\n          &nbsp; A class with name \"{this.state.classValue}\" already exists!\n        </div>\n      );\n    } else {\n      const { classValue } = this.state;\n      if (!isSaved) {\n        this.props.classifyAddClass(classValue);\n      } else {\n        this.props.classifyDeleteClass(classValue);\n        this.setState({ classValue: '' });\n      }\n      this.toggleSaveMode();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.initialData) {\n      this.setState({ ...this.props.initialData });\n    }\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={event => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n        className=\"my-2\"\n      >\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder={`Enter class name${\n              this.props.isOptionalField ? ' (optional)' : ''\n            }`}\n            autoComplete=\"off\"\n            onChange={event =>\n              this.setState({ classValue: event.target.value })\n            }\n            value={this.state.classValue}\n            readOnly={this.state.isSaved}\n            pattern=\"[a-zA-Z0-9 ]+\"\n            title=\"Only alphabets, numbers and spaces are allowed\"\n            required\n          />\n          <div className=\"input-group-append\">\n            {this.state.isSaved ? (\n              <button className=\"btn btn-danger\">\n                <MdDelete />\n              </button>\n            ) : (\n              <button className=\"btn btn-outline-success\">\n                <FaCheck />\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ classification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps, {\n  classifyAddClass,\n  classifyDeleteClass,\n})(ClassificationClassListForm);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport ClassificationClassListForm from './ClassificationClassListForm';\n\nclass ClassificationClassList extends React.Component {\n  renderClassList() {\n    return _.map(_.range(0, this.props.numClassesLimit.max), number => {\n      let isOptionalField =\n        number >= this.props.numClassesLimit.min ? true : false;\n      let initialData = null;\n      if (number < this.props.classList.length) {\n        initialData = {\n          classValue: this.props.classList[number],\n          isSaved: true,\n        };\n      }\n      return (\n        <ClassificationClassListForm\n          form=\"classForm\"\n          isOptionalField={isOptionalField}\n          key={number}\n          initialData={initialData}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <h4>Classes</h4>\n        <small>\n          Number of classes must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numClassesLimit.min} -{' '}\n              {this.props.numClassesLimit.max}\n            </b>\n          </mark>\n        </small>\n        {this.renderClassList()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    dataset,\n    configOptions: { numClassesLimit },\n  },\n}) => {\n  return { classList: _.keys(dataset), numClassesLimit };\n};\n\nexport default connect(mapStateToProps)(ClassificationClassList);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { renderFormField } from '../../../utils';\n\nclass ClassificationClassChoiceForm extends React.Component {\n  render() {\n    const { classList } = this.props;\n    return (\n      <form>\n        <div className=\"row mt-3\">\n          <div className=\"col-8 mx-auto\">\n            <Field\n              name=\"classChoice\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              options={{\n                default: 'Choose a class...',\n                ..._.zipObject(classList, classList),\n              }}\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ classification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'classificationClassChoiceForm',\n    enableReinitialize: true,\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ClassificationClassChoiceForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\n\nclass ClassificationDataUploadForm extends React.Component {\n  render() {\n    return (\n      <>\n        {this.props.currentClass &&\n        !this.props.numImagesExceeded &&\n        !this.props.sizeExceeded ? (\n          <form>\n            <div className=\"row mt-3\">\n              <div className=\"col-5 mx-auto\">\n                <ImUpload3 size={30} className=\"mb-3\" />\n                <Field\n                  name=\"classImages\"\n                  component={renderFormField}\n                  contentType=\"file\"\n                  label=\"Choose File\"\n                  acceptFileFormat=\"image/jpeg,image/png\"\n                  multiple\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: {\n      numImagesLimit: { max: numImagesLimitMax },\n      sizeLimit,\n    },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesExceeded: dataset[currentClass]\n      ? dataset[currentClass].length >= numImagesLimitMax\n      : false,\n    sizeExceeded: datasetSize[currentClass]\n      ? datasetSize[currentClass] >= sizeLimit\n      : false,\n  };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'classificationDataUploadForm',\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ClassificationDataUploadForm)\n);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass ClassificationDataPreview extends React.Component {\n  renderCard(imgUrl, imgId) {\n    return (\n      <div className=\"col mb-3\" key={imgId}>\n        <div\n          className=\"card card-hover shadow bg-white rounded\"\n          style={{ width: '5rem' }}\n        >\n          <img src={imgUrl} className=\"card-img-top\" alt={`data-${imgId}`} />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.imgList ? (\n          <div className=\"row row-cols-1 row-cols-md-3 row-cols-lg-4 row-cols-xl-6 mt-5 mx-auto\">\n            {_.map(this.props.imgList, (image, imgId) =>\n              this.renderCard(image, imgId)\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: { currentClass, datasetPreview },\n}) => {\n  return { imgList: datasetPreview[currentClass] };\n};\n\nexport default connect(mapStateToProps)(ClassificationDataPreview);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { classifyCurrentClass, classifyAddImages } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport ClassificationClassChoiceForm from './ClassificationClassChoiceForm';\nimport ClassificationDataUploadForm from './ClassificationDataUploadForm';\nimport ClassificationDataPreview from './ClassificationDataPreview';\n\nclass ClassificationDataset extends React.Component {\n  onClassChoiceSubmit = values => {\n    this.props.classifyCurrentClass(_.values(values)[0]);\n  };\n\n  fileListToArray = fileList => {\n    let imagesList = Array.from(fileList);\n    if (\n      this.props.currentClassImgCount + imagesList.length >\n      this.props.numImagesLimit.max\n    ) {\n      imagesList = imagesList.slice(\n        0,\n        this.props.numImagesLimit.max - this.props.currentClassImgCount\n      );\n    }\n    return imagesList;\n  };\n\n  getImageListSize = imagesList => {\n    let imagesListSize = 0;\n    if (imagesList.length > 0) {\n      imagesListSize = _.sumBy(['size'], _.partial(_.sumBy, imagesList));\n    }\n    return imagesListSize;\n  };\n\n  imageListToBase64 = async imagesList => {\n    let imagesListPreview = [];\n    for (let i = 0; i < imagesList.length; i++) {\n      imagesListPreview.push(await convertFileToBase64(imagesList[i]));\n    }\n    return imagesListPreview;\n  };\n\n  removeBase64HeaderFromImageList = imagesList => {\n    return _.map(imagesList, image => {\n      return removeFileBase64Header(image);\n    });\n  };\n\n  onDataUploadSubmit = async values => {\n    // Fetch list of images\n    let imagesList = this.fileListToArray(_.values(values)[0]);\n\n    // Obtain size\n    const imagesListSize = this.getImageListSize(imagesList);\n\n    if (this.props.currentSize + imagesListSize >= this.props.sizeLimit) {\n      toast.info(\n        <div>\n          <MdError size={25} />\n          &nbsp; Cannot upload images. Total size of the images for this class\n          are exceeding {this.props.sizeLimit / 1000000} MB.\n        </div>\n      );\n    } else if (imagesList.length > 0) {\n      // Get base64 string of each image\n      const imagesListPreview = await this.imageListToBase64(imagesList);\n\n      // Remove base64 header from image for backend support\n      imagesList = this.removeBase64HeaderFromImageList(imagesListPreview);\n\n      // Update redux store\n      this.props.classifyAddImages({\n        imagesList,\n        imagesListPreview,\n        imagesListSize,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h4>Images</h4>\n        <small>\n          Number of images for each class must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numImagesLimit.min} -{' '}\n              {this.props.numImagesLimit.max}\n            </b>\n          </mark>\n          .\n        </small>\n        <br />\n        <small>\n          If you upload more than {this.props.numImagesLimit.max} images then\n          only the{' '}\n          <mark>\n            <b>first {this.props.numImagesLimit.max} images</b>\n          </mark>{' '}\n          will be considered.\n        </small>\n        <br />\n        <small>\n          The total size of the images for each class must be{' '}\n          <mark>\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </mark>\n          .\n        </small>\n        <ClassificationClassChoiceForm\n          onSubmit={this.onClassChoiceSubmit}\n          initialValues={{ classChoice: this.props.currentClass }}\n        />\n        <ClassificationDataUploadForm onSubmit={this.onDataUploadSubmit} />\n        <ClassificationDataPreview />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: { numImagesLimit, sizeLimit },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesLimit,\n    sizeLimit,\n    currentSize: datasetSize[currentClass],\n    currentClassImgCount: dataset[currentClass]\n      ? dataset[currentClass].length\n      : 0,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  classifyCurrentClass,\n  classifyAddImages,\n})(ClassificationDataset);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ClassificationClassList from './ClassificationClassList';\nimport ClassificationDataset from './ClassificationDataset';\nimport '../../../styles/Modal.css';\n\nclass ClassificationModal extends React.Component {\n  renderContent() {\n    return (\n      <div className=\"row\">\n        <div className=\"col col-md-4 text-center\">\n          <ClassificationClassList />\n        </div>\n        <div className=\"col col-md-8 text-center\">\n          <ClassificationDataset />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{ width: '60%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default ClassificationModal;\n","import _ from 'lodash';\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport ClassificationModal from './ClassificationModal';\n\nclass ClassificationCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkNumClasses = () => {\n    const {\n      configOptions: {\n        numClassesLimit: { min: numClassesLimitMin },\n      },\n      dataset,\n    } = this.props;\n    if (_.keys(dataset).length < numClassesLimitMin) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to create a minimum of {numClassesLimitMin} classes.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  checkNumImages = () => {\n    const {\n      configOptions: {\n        numImagesLimit: { min: numImagesLimitMin },\n      },\n      dataset,\n    } = this.props;\n\n    const datasetValues = _.values(dataset);\n    const datasetFailedClasses = _.sum(\n      _.map(datasetValues, items => (items.length < numImagesLimitMin ? 0 : 1))\n    );\n\n    if (datasetValues.length !== datasetFailedClasses) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to upload atleast {numImagesLimitMin} images per\n          class.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkNumClasses() && this.checkNumImages()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <ClassificationModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <div className=\"row my-5 text-center\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Create Dataset\n            </button>\n          </div>\n        </div>\n        <div className=\"row mt-5 text-center\">\n          <div className=\"col\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  classification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ClassificationCreate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\n\nimport '../../styles/Modal.css';\n\nclass TrainingSubmitModal extends React.Component {\n  renderContent() {\n    return (\n      <div className=\"row my-4\">\n        <div className=\"col-12 mb-4\">\n          Your dataset and model configuration has been successfully uploaded to\n          the server for training.\n        </div>\n        <div className=\"col-12\">\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp; {this.props.token}\n          </h5>\n        </div>\n        <div className=\"col-12 mt-4\">\n          Please copy and save the token provided above. It will be required for\n          testing the model on the inference page.\n        </div>\n        <div className=\"col-12 mt-4\">\n          Note:\n          <ul>\n            <li>\n              The model shall be trained and available for inference in 3-15\n              minutes depending upon the size of your dataset.\n            </li>\n            <li>\n              Trained models are available for testing only upto <b>2 hours</b>{' '}\n              starting from the point when they are made available for\n              inference.\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\">\n        <div\n          className=\"modal-body\"\n          style={{ width: '40%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Successful</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps)(TrainingSubmitModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n} from '../../../actions';\nimport history from '../../../history';\nimport ClassificationCreate from './ClassificationCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass Classification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'classification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['MobileNet v2', 'ResNet34'],\n      modelFieldTitle: 'Model',\n      numClassesLimit: { min: 2, max: 10 },\n      numImagesLimit: { min: 10, max: 100 },\n      batchSizeLimit: { min: 1, max: 32 },\n      numEpochsLimit: { min: 1, max: 10 },\n      sizeLimit: 10000000, // In bytes (10 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'MobileNet v2',\n      dataSplit: '70 : 30',\n      optimizer: 'sgd',\n      learningRate: 0.01,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    // Send values to server\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col-9 col-md-4 mx-auto\">\n            <div className=\"card mx-auto mt-4\">\n              <video\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n                className=\"card-img-top\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                  type=\"video/mp4\"\n                />\n              </video>\n            </div>\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-6 mx-auto\">\n            <ClassificationCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n})(Classification);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\n\nimport { setFormFileFieldLabel } from '../actions';\n\nclass FormFileField extends React.Component {\n  render() {\n    return (\n      <Field\n        {..._.omit(this.props.fieldConfig, 'label', 'hideFilename')}\n        label={\n          this.props.fieldLabel\n            ? this.props.fieldLabel\n            : this.props.fieldConfig.label\n        }\n        onChange={event => {\n          if (!this.props.hideFilename) {\n            this.props.setFormFileFieldLabel({\n              taskName: this.props.taskName,\n              label: event.target.files[0].name,\n            });\n          }\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ formFileField }, ownProps) => {\n  return { fieldLabel: formFileField[ownProps.taskName] };\n};\n\nexport default connect(mapStateToProps, { setFormFileFieldLabel })(\n  FormFileField\n);\n","import React from 'react';\nimport { reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\nimport FormFileField from '../../FormFileField';\n\nclass SADataUploadForm extends React.Component {\n  render() {\n    return (\n      <div className=\"row text-center\">\n        <div className=\"col-12 mb-4\">\n          <h4>Upload Dataset</h4>\n        </div>\n        <div className=\"col col-md-8 mx-auto\">\n          <form>\n            <ImUpload3 size={30} className=\"mb-3\" />\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'saCsvData',\n                component: renderFormField,\n                contentType: 'file',\n                label: 'Choose File',\n                acceptFileFormat: '.csv, text/csv',\n              }}\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'saDataUploadForm',\n  onChange: (values, dispatch, props) => {\n    props.submit();\n  },\n})(SADataUploadForm);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { saAddData } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport SADataUploadForm from './SADataUploadForm';\nimport '../../../styles/Modal.css';\n\nclass SAModal extends React.Component {\n  onDataUploadSubmit = async values => {\n    let csvData = values.saCsvData;\n    if (csvData.length > 0) {\n      csvData = csvData[0];\n      if (csvData.size > this.props.sizeLimit) {\n        toast.info(\n          <div>\n            <MdError size={25} />\n            &nbsp; Cannot upload the file. Total size of the dataset is\n            exceeding {this.props.sizeLimit / 1000000} MB.\n          </div>\n        );\n      } else {\n        csvData = removeFileBase64Header(await convertFileToBase64(csvData));\n        this.props.saAddData(csvData);\n      }\n    }\n  };\n\n  renderContent() {\n    return (\n      <div className=\"row px-3\">\n        <div className=\"col text-justify\">\n          <p>\n            Upload the dataset as a <b>CSV (Comma-Separated Values)</b> file\n            with <b>two columns</b>:{' '}\n            <mark>\n              <b>input</b>\n            </mark>{' '}\n            and\n            <mark>\n              <b>label</b>\n            </mark>\n          </p>\n          Column Description:\n          <ul>\n            <li>\n              <mark>\n                <b>input</b>\n              </mark>\n              : Contains input sentences\n            </li>\n            <li>\n              <mark>\n                <b>label</b>\n              </mark>\n              : Contains the label (sentiment) for the corresponding input\n              sentences.\n            </li>\n          </ul>\n          <p>\n            NOTE: The CSV file must contain{' '}\n            <b>less than {this.props.numRows} rows</b> and its size must be{' '}\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </p>\n          <br />\n          <div className=\"row\">\n            <div className=\"col col-md-6\">\n              <h4 className=\"mb-3 text-center\">Example Dataset Preview</h4>\n              <div\n                className=\"card shadow bg-white rounded mx-auto\"\n                style={{ width: '25rem' }}\n              >\n                <img\n                  src={`${process.env.PUBLIC_URL}/assets/media/saDataPreview.png`}\n                  className=\"card-img-top\"\n                  alt=\"sentiment analysis example dataset preview\"\n                />\n              </div>\n            </div>\n            <div className=\"col col-md-6\">\n              <SADataUploadForm\n                onSubmit={this.onDataUploadSubmit}\n                taskName={this.props.taskName}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{ width: '50%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  sentimentAnalysis: {\n    configOptions: { sizeLimit, numRows },\n  },\n}) => {\n  return {\n    sizeLimit,\n    numRows,\n  };\n};\n\nexport default connect(mapStateToProps, { saAddData })(SAModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport SAModal from './SAModal';\n\nclass SACreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkDataset = () => {\n    if (!this.props.dataset) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; Please upload a dataset.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkDataset()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <SAModal\n            onDismiss={this.onModalDismiss}\n            taskName={this.props.taskName}\n          />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <div className=\"row my-5 text-center\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Upload Dataset\n            </button>\n          </div>\n        </div>\n        <div className=\"row mt-5 text-center\">\n          <div className=\"col\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  sentimentAnalysis: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SACreate);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n} from '../../../actions';\nimport history from '../../../history';\nimport SACreate from './SACreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass SentimentAnalysis extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'sentimentAnalysis';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['LSTM', 'GRU'],\n      modelFieldTitle: 'RNN Type',\n      numRows: 10000,\n      sizeLimit: 1000000, // In bytes (1 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'LSTM',\n      dataSplit: '70 : 30',\n      optimizer: 'adam',\n      learningRate: 0.001,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col-10 col-md-5 mx-auto\">\n            <div className=\"card mx-auto mt-4\">\n              <video\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n                className=\"card-img-top\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/sentimentAnalysis.mp4`}\n                  type=\"video/mp4\"\n                />\n              </video>\n            </div>\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-6 mx-auto\">\n            <SACreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n})(SentimentAnalysis);\n","import { Link } from 'react-router-dom';\nimport { Container, Button } from 'react-floating-action-button';\nimport { IoHelpSharp } from 'react-icons/io5';\n\nconst FloatinHelp = props => {\n  return (\n    <Container>\n      <Link\n        to={{\n          pathname: '/about',\n          state: { targetSection: props.target },\n        }}\n      >\n        <Button\n          tooltip=\"Help\"\n          styles={{ backgroundColor: '#000000', color: '#ffffff' }}\n        >\n          <IoHelpSharp size={25} />\n        </Button>\n      </Link>\n    </Container>\n  );\n};\n\nexport default FloatinHelp;\n","import React from 'react';\n\nimport HoverButtons from '../HoverButtons';\nimport Classification from './imageClassification/Classification';\nimport SentimentAnalysis from './textClassification/SentimentAnalysis';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Training extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.hoverButtons = [\n      { buttonValue: 'classification', buttonText: 'Image Classification' },\n      { buttonValue: 'sentiment', buttonText: 'Sentiment Analysis' },\n    ];\n\n    this.trainConfigOptions = {\n      dataSplit: ['70 : 30', '80 : 20'],\n      batchSizeLimit: { min: 1, max: 256 },\n      numEpochsLimit: { min: 1, max: 20 },\n      optimizers: { adam: 'Adam', sgd: 'SGD' },\n      learningRateLimit: { min: 1e-5, max: 2 },\n      reduceLrOnPlateauLimit: {\n        factor: { min: 0.01, max: 0.5 },\n        patience: { min: 1, max: 20 },\n        minLr: 1e-5,\n      },\n    };\n\n    this.currentTrainConfig = {\n      reduceLrOnPlateau: false,\n      reduceLrOnPlateauPatience: 5,\n      reduceLrOnPlateauFactor: 0.1,\n      reduceLrOnPlateauMinLr: 1e-5,\n    };\n\n    this.state = {\n      currentTask: 'classification',\n    };\n  }\n\n  changeCurrentTask = currentTask => {\n    if (!(this.state.currentTask === currentTask)) {\n      this.setState({ currentTask });\n    }\n  };\n\n  renderCurrentTask() {\n    if (this.state.currentTask === 'classification') {\n      return (\n        <Classification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    } else {\n      return (\n        <SentimentAnalysis\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Train a Model</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <HoverButtons\n              hoverButtons={this.hoverButtons}\n              currentButtonValue={this.state.currentTask}\n              changeCurrentButtonValue={this.changeCurrentTask}\n            />\n          </div>\n        </div>\n        {this.renderCurrentTask()}\n        <FloatinHelp target=\"training\" />\n      </div>\n    );\n  }\n}\n\nexport default Training;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reset, reduxForm } from 'redux-form';\nimport { MdDelete } from 'react-icons/md';\n\nimport { submitInferenceToken, clearInferenceConfig } from '../../actions';\nimport { renderFormField, renderSubmitButton } from '../../utils';\n\nclass TokenForm extends React.Component {\n  onSubmit = values => {\n    if (this.props.token) {\n      this.props.clearInferenceConfig();\n      this.props.dispatch(reset(this.props.form));\n    } else {\n      this.props.submitInferenceToken({\n        formName: this.props.form,\n        token: values.token,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"row mb-1 mt-3 py-5\">\n        <div className=\"col-10 col-md-6 mx-auto\">\n          {this.props.token ? (\n            <form\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\n              className=\"mb-4\"\n            >\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Token\"\n                textAppend={<MdDelete />}\n                enableAppendSubmit\n                isFixed\n              />\n            </form>\n          ) : (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                placeholder=\"Enter Token\"\n              />\n              <div className=\"row mt-3\">\n                <div className=\"col text-right\">\n                  {renderSubmitButton({\n                    loading: this.props.loadingForm.includes(this.props.form),\n                    originalText: 'Validate Token',\n                    loadingText: 'Validating...',\n                  })}\n                </div>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.token) {\n    errors.token = 'You must enter a token';\n  } else if (!/^[a-zA-Z0-9-_ ]+$/i.test(formValues.token)) {\n    errors.token = 'Invalid token';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceToken,\n  clearInferenceConfig,\n})(reduxForm({ form: 'tokenForm', validate })(TokenForm));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { submitInferenceData, clearInferencePrediction } from '../../actions';\nimport {\n  renderFormField,\n  renderSubmitButton,\n  convertFileToBase64,\n  removeFileBase64Header,\n} from '../../utils';\nimport FormFileField from '../FormFileField';\n\nclass InferenceForm extends React.Component {\n  onSubmit = async ({ inferenceInput }) => {\n    this.props.clearInferencePrediction();\n\n    // Get input type\n    let inputType = 'text';\n    if (typeof inferenceInput === 'object') {\n      inputType = 'image';\n      inferenceInput = await convertFileToBase64(inferenceInput[0]);\n    }\n\n    // If input is non-text, convert it to base64 string\n    this.props.submitInferenceData({\n      formName: this.props.form,\n      formInput: {\n        token: this.props.token,\n        input:\n          inputType === 'image'\n            ? removeFileBase64Header(inferenceInput)\n            : inferenceInput,\n      },\n    });\n\n    // Send input to props for display\n    this.props.onSubmit(inferenceInput);\n  };\n\n  render() {\n    const { contentType, label, acceptFileFormat } = this.props.field;\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"mt-5 mt-md-0\"\n      >\n        {contentType === 'file' ? (\n          <>\n            <div className=\"text-center\">\n              <ImUpload3 size={35} className=\"mb-3\" />\n            </div>\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'inferenceInput',\n                component: renderFormField,\n                contentType,\n                label,\n                acceptFileFormat,\n              }}\n            />\n          </>\n        ) : (\n          <Field\n            name=\"inferenceInput\"\n            component={renderFormField}\n            contentType={contentType}\n            label={label}\n          />\n        )}\n        <div className=\"row mt-3\">\n          <div className=\"col mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              originalText: 'Predict',\n              loadingText: 'Predicting...',\n            })}\n          </div>\n          <div className=\"col-12\">\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.inferenceInput) {\n    errors.inferenceInput = 'This field cannot be empty';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceData,\n  clearInferencePrediction,\n})(reduxForm({ form: 'inferenceForm', validate })(InferenceForm));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport InferenceForm from './InferenceForm';\n\nclass TaskDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inferenceInput: null,\n    };\n\n    // Set field values for form\n    let fieldValues = {};\n    if (this.props.taskType === 'classification') {\n      fieldValues = {\n        contentType: 'file',\n        label: 'Upload Image',\n        acceptFileFormat: 'image/jpeg,image/png',\n      };\n    } else {\n      fieldValues = {\n        contentType: 'text',\n        label: 'Enter Text:',\n      };\n    }\n    this.fieldValues = fieldValues;\n  }\n\n  onSubmit = inferenceInput => {\n    if (this.props.taskType === 'classification') {\n      this.setState({ inferenceInput: inferenceInput });\n    } else {\n      this.setState({ inferenceInput });\n    }\n  };\n\n  renderAccuracy() {\n    return (\n      <>\n        <h5 className=\"text-center mb-3\">\n          Best Accuracy:{' '}\n          <mark>\n            <b>\n              {(\n                this.props.accuracy * (this.props.accuracy < 1 ? 100 : 1)\n              ).toFixed(2)}{' '}\n              %\n            </b>\n          </mark>\n        </h5>\n        <div\n          className=\"card shadow bg-white rounded mx-auto\"\n          style={{ width: '28rem' }}\n        >\n          <img\n            src={`data:image/jpeg;base64,${this.props.accuracyPlot}`}\n            className=\"card-img-top\"\n            alt=\"sentiment analysis example dataset preview\"\n          />\n        </div>\n      </>\n    );\n  }\n\n  renderOutput() {\n    return (\n      <div className=\"row mt-5\">\n        <div className=\"col-12 mt-4\">\n          <h4 className=\"text-center\">Results</h4>\n        </div>\n        <div className=\"col-12 col-lg-6 mt-4 ml-auto text-center\">\n          <h4 className=\"text-center\">Input</h4>\n          {this.props.taskType === 'classification' ? (\n            <div\n              className=\"card mx-auto mt-3 shadow bg-white rounded\"\n              style={{ width: '20rem' }}\n            >\n              <img\n                src={this.state.inferenceInput}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n            </div>\n          ) : (\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-text\">{this.state.inferenceInput}</h5>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"col-12 col-lg-6 mt-5 mt-md-4 mr-auto text-center\">\n          <h4 className=\"text-center\">Prediction</h4>\n          <div className=\"card mx-auto mt-3 shadow bg-white rounded\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{this.props.prediction}</h5>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row mb-5\">\n          <div className=\"col-12\">\n            <h4 className=\"text-center\">\n              {this.props.taskType === 'classification'\n                ? 'Image Classification'\n                : 'Sentiment Analysis'}\n            </h4>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 col-md-5 mx-auto\">{this.renderAccuracy()}</div>\n          <div className=\"col-12 col-md-4 my-auto mx-auto\">\n            <InferenceForm\n              onSubmit={this.onSubmit}\n              taskName={this.props.taskName}\n              field={this.fieldValues}\n            />\n          </div>\n        </div>\n        {this.props.prediction ? this.renderOutput() : ''}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  inference: { taskType, prediction, accuracy, accuracyPlot },\n}) => {\n  return { taskType, prediction, accuracy, accuracyPlot };\n};\n\nexport default connect(mapStateToProps)(TaskDisplay);\n","import _ from 'lodash';\nimport React from 'react';\n\nconst PreviewTask = () => {\n  const classList = [\n    'birdhouse',\n    'hourglass',\n    'lemon',\n    'pizza',\n    'seashore',\n    'stopwatch',\n  ];\n\n  return (\n    <>\n      <div className=\"row mt-5 mb-4\">\n        <div className=\"col\">\n          <h4 className=\"text-center\">Preview Model</h4>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-11 mx-auto\">\n          Want to test out the platform without training a model? No worries. We\n          have prepared a <b>preview</b>{' '}\n          <mark>\n            <b>image classification model</b>\n          </mark>{' '}\n          just for these cases. Please use the token given to below to test it\n          out.\n        </div>\n      </div>\n      <div className=\"row my-4\">\n        <div className=\"col-11 mx-auto\">\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp; classification-tinyimgnet-demo-dbasb\n          </h5>\n        </div>\n      </div>\n      <div className=\"row mt-5\">\n        <div className=\"col-11 mx-auto mb-2\">\n          <h5>About the Model</h5>\n        </div>\n        <div className=\"col-11 mx-auto\">\n          <p>\n            The model can classify images belonging to the following{' '}\n            <mark>\n              <b>six classes</b>\n            </mark>\n            :\n          </p>\n          {_.map(classList, item => {\n            return (\n              <button className=\"btn btn-sm btn-success mr-2 my-1\" key={item}>\n                {item}\n              </button>\n            );\n          })}\n        </div>\n        <div className=\"col-11 mx-auto mt-3\">\n          The model was trained by fine-tuning a{' '}\n          <mark>\n            <b>ResNet34</b>\n          </mark>{' '}\n          model pre-trained on the ImageNet dataset.\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PreviewTask;\n\n// classification-tinyimgnet-demo-dbasb\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { clearInference } from '../../actions';\nimport TokenForm from './TokenForm';\nimport TaskDisplay from './TaskDisplay';\nimport PreviewTask from './PreviewTask';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Inference extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'inference';\n  }\n\n  componentWillUnmount() {\n    this.props.clearInference(this.taskName);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"heading\">Test your Model</h1>\n        <TokenForm />\n        {this.props.token ? (\n          <TaskDisplay taskName={this.taskName} />\n        ) : (\n          <PreviewTask />\n        )}\n        <FloatinHelp target=\"inference\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ inference: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, { clearInference })(Inference);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaGithub, FaLinkedin } from 'react-icons/fa';\nimport { SiInstagram } from 'react-icons/si';\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.trainingSectionRef = React.createRef();\n    this.inferenceSectionRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { state: locationState } = this.props.location;\n    console.log(locationState);\n    if (locationState) {\n      if (locationState.targetSection === 'training') {\n        this.trainingSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      } else if (locationState.targetSection === 'inference') {\n        this.inferenceSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      }\n    }\n  }\n\n  renderFlash() {\n    return (\n      <mark>\n        <b>\n          <img\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '1.8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          F L A S H\n        </b>\n      </mark>\n    );\n  }\n\n  renderImageClassificationInfo() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-12 col-md-7 my-auto\">\n          <h3 className=\"mb-3\">Image Classification</h3>\n          <p>\n            Classify images from your own dataset by using them to train a{' '}\n            <mark>\n              <b>ResNet-34</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>MobileNet v2</b>\n            </mark>{' '}\n            model.\n          </p>\n          <p>\n            Training happens via transfer learning where models available will\n            be pre-trained on the ImageNet dataset.\n          </p>\n        </div>\n        <div className=\"col-12 col-md-5 my-auto\">\n          <div className=\"card mx-auto mt-4\">\n            <video\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n              className=\"card-img-top\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                type=\"video/mp4\"\n              />\n            </video>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderSentimentAnalysisInfo() {\n    return (\n      <div className=\"row my-5\">\n        <div className=\"col-12 col-md-7 my-auto\">\n          <h3 className=\"mb-3\">Sentiment Analysis</h3>\n          <p>\n            Predict sentiment from sentences by training a{' '}\n            <mark>\n              <b>LSTM</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>GRU</b>\n            </mark>{' '}\n            based sequential model on your own dataset.\n          </p>\n          <p>The models will be trained from scratch.</p>\n        </div>\n        <div className=\"col-12 col-md-5 my-auto\">\n          <div className=\"card mx-auto mt-4\">\n            <video\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n              className=\"card-img-top\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/sentimentAnalysis.mp4`}\n                type=\"video/mp4\"\n              />\n            </video>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderTrainingInfo() {\n    return (\n      <div ref={this.trainingSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Training</h3>\n        <p>\n          For training a model, you'll have to <b>upload your own dataset</b>{' '}\n          and <b>select the model parameters</b>. Depending on the size of the\n          dataset, the model can take anywhere between{' '}\n          <b>\n            <mark>3 - 10 minutes</mark> to train and deploy your model\n          </b>\n          .\n        </p>\n        <p>\n          After you upload your configuration, the platform will assign you a\n          unique{' '}\n          <mark>\n            <b>token</b>\n          </mark>\n          . Please save the token as it will used to test the model on the{' '}\n          <Link to=\"/inference\">inference page</Link>.\n        </p>\n        <p>\n          To train a model, <Link to=\"/training\">go here</Link>.\n        </p>\n        <div className=\"row row-cols-1 row-cols-md-3 mx-auto mt-4\">\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/training_page.png`}\n                alt=\"training page\"\n              />\n            </div>\n          </div>\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/img_classification_data_upload.png`}\n                alt=\"img classification data upload\"\n              />\n            </div>\n          </div>\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/sa_data_upload.png`}\n                alt=\"sentiment analysis data upload\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderInferenceInfo() {\n    return (\n      <div ref={this.inferenceSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Inference</h3>\n        <p>\n          You can perform inference on a trained model by using the{' '}\n          <b>\n            <mark>token</mark>\n          </b>{' '}\n          provided to you after submitting the training configuration on the{' '}\n          <Link to=\"/training\">training page</Link>.\n        </p>\n        <p>\n          After submitting the token, you'll get a form where you can upload\n          inputs to check the performance of your trained model. The inference\n          page also provides you with the <b>results of the training process</b>{' '}\n          by showing you the{' '}\n          <b>\n            <mark>accuracy</mark>\n          </b>{' '}\n          of the model <b>on validation set</b> as well as the{' '}\n          <b>\n            <mark>change in accuracy</mark>\n          </b>{' '}\n          during training.\n        </p>\n        <p>\n          To test your model, <Link to=\"/inference\">go here</Link>.\n        </p>\n        <div className=\"row row-cols-1 row-cols-md-3 mx-auto mt-4\">\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/sa_inference_form.png`}\n                alt=\"img classification data upload\"\n              />\n            </div>\n          </div>\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/img_classification_prediction.png`}\n                alt=\"img classification prediction\"\n              />\n            </div>\n          </div>\n          <div className=\"col mb-3\">\n            <div className=\"card card-hover shadow bg-white rounded\">\n              <img\n                className=\"img-fluid card-img-top\"\n                src={`${process.env.PUBLIC_URL}/assets/media/inference_page.png`}\n                alt=\"inference page\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\" style={{ fontSize: '1.6vh' }}>\n        <h1 className=\"heading\">\n          About{' '}\n          <img\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          Flash\n        </h1>\n        <div className=\"row\">\n          <div className=\"col-12 mx-auto\">\n            <p className=\"text-center mb-5\">\n              {this.renderFlash()}\n              &nbsp;&nbsp;&nbsp; is an <b>end-to-end Deep Learning</b> platform\n              which allows users to create, train and deploy their own neural\n              network models in a matter of minutes without writing a single\n              line of code.\n            </p>\n            <p>The platform currently supports two types of tasks:</p>\n            {this.renderImageClassificationInfo()}\n            {this.renderSentimentAnalysisInfo()}\n            <hr className=\"my-5\" />\n            <h2>How It Works</h2>\n            <p className=\"my-4\">\n              Using {this.renderFlash()} is easy. With just a few clicks you can\n              train and deploy your models automatically. You just have to\n              select your model and upload the dataset, and you're good to go.{' '}\n              <b>No code or experience required.</b>\n            </p>\n            {this.renderTrainingInfo()}\n            {this.renderInferenceInfo()}\n            <hr className=\"my-5\" />\n            <p>\n              The source code of the project is hosted on GitHub. Please{' '}\n              <a\n                href=\"https://github.com/shan18/Flash\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                click here\n              </a>{' '}\n              to visit.\n            </p>\n            <p className=\"mt-4\">\n              To know about the author, check the links below\n            </p>\n            <p>\n              <a\n                className=\"anchor-black\"\n                href=\"https://github.com/shan18\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaGithub size={25} title=\"GitHub: shan18\" />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.linkedin.com/in/shanacharya/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaLinkedin\n                  size={25}\n                  title=\"LinkedIn: shanacharya\"\n                  className=\"mx-3\"\n                />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.instagram.com/shan_1.0/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <SiInstagram size={25} title=\"Instagram: shan_1.0\" />\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n\nimport history from '../history';\nimport Home from './cover/Home';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport Training from './train/Training';\nimport Inference from './infer/Inference';\nimport About from './About';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"page-container\">\n        <div className=\"content-wrap\">\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            style={{ width: '40%' }}\n          />\n          <Router history={history}>\n            <Navbar />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/training\" exact component={Training} />\n              <Route path=\"/inference\" exact component={Inference} />\n              <Route path=\"/about\" exact component={About} />\n            </Switch>\n          </Router>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { SET_HOME, CLEAR_HOME } from '../actions/types';\n\nconst homeReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_HOME:\n      return true;\n    case CLEAR_HOME:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","import { LOADING_FORM, CLEAR_LOADING_FORM } from '../actions/types';\n\nconst loadingFormReducer = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_FORM:\n      return [...state, action.payload];\n    case CLEAR_LOADING_FORM:\n      return state.filter(element => element !== action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default loadingFormReducer;\n","import _ from 'lodash';\nimport {\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n} from '../actions/types';\n\nconst INITIAL_STATE = {};\n\nconst formFileFieldReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_FORM_FILE_FIELD_LABEL:\n      return { ...state, [action.payload.taskName]: action.payload.label };\n    case CLEAR_FORM_FILE_FIELD_LABEL:\n      return _.omit(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default formFileFieldReducer;\n","import _ from 'lodash';\nimport {\n  CLASSIFY_CONFIG,\n  CLASSIFY_MODEL_TYPE,\n  CLASSIFY_DATA_SPLIT,\n  CLASSIFY_ADD_CLASS,\n  CLASSIFY_DELETE_CLASS,\n  CLASSIFY_CURRENT_CLASS,\n  CLASSIFY_ADD_IMAGES,\n  CLASSIFY_DATA_CLEAR,\n  CLASSIFY_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentClass: '',\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: {},\n  datasetSize: {},\n  datasetPreview: {},\n};\n\nconst classificationReducer = (state = INITIAL_STATE, action) => {\n  let dataset, datasetSize, datasetPreview, currentConfig, currentClass;\n  switch (action.type) {\n    case CLASSIFY_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case CLASSIFY_MODEL_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case CLASSIFY_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case CLASSIFY_ADD_CLASS:\n      dataset = { ...state.dataset, [action.payload]: [] };\n      datasetSize = { ...state.datasetSize, [action.payload]: 0 };\n      datasetPreview = { ...state.datasetPreview, [action.payload]: [] };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case CLASSIFY_DELETE_CLASS:\n      dataset = _.omit(state.dataset, action.payload);\n      datasetSize = _.omit(state.datasetSize, action.payload);\n      datasetPreview = _.omit(state.datasetPreview, action.payload);\n      currentClass =\n        state.currentClass === action.payload\n          ? INITIAL_STATE.currentClass\n          : state.currentClass;\n      return { ...state, dataset, datasetSize, datasetPreview, currentClass };\n    case CLASSIFY_CURRENT_CLASS:\n      return { ...state, currentClass: action.payload };\n    case CLASSIFY_ADD_IMAGES:\n      dataset = {\n        ...state.dataset,\n        [state.currentClass]: [\n          ...state.dataset[state.currentClass],\n          ...action.payload.imagesList,\n        ],\n      };\n      datasetSize = {\n        ...state.datasetSize,\n        [state.currentClass]:\n          state.datasetSize[state.currentClass] + action.payload.imagesListSize,\n      };\n      datasetPreview = {\n        ...state.datasetPreview,\n        [state.currentClass]: [\n          ...state.datasetPreview[state.currentClass],\n          ...action.payload.imagesListPreview,\n        ],\n      };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case CLASSIFY_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case CLASSIFY_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default classificationReducer;\n","import _ from 'lodash';\nimport {\n  SA_CONFIG,\n  SA_RNN_TYPE,\n  SA_DATA_SPLIT,\n  SA_DATA_ADD,\n  SA_DATA_CLEAR,\n  SA_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: null,\n};\n\nconst sentimentAnalysisReducer = (state = INITIAL_STATE, action) => {\n  let currentConfig;\n  switch (action.type) {\n    case SA_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case SA_RNN_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case SA_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case SA_DATA_ADD:\n      return {\n        ...state,\n        dataset: action.payload,\n      };\n    case SA_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case SA_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default sentimentAnalysisReducer;\n","import { TRAIN_TOKEN_SET, TRAIN_TOKEN_CLEAR } from '../actions/types';\n\nconst serverConfigReducer = (state = {}, action) => {\n  switch (action.type) {\n    case TRAIN_TOKEN_SET:\n      return { ...state, token: action.payload };\n    case TRAIN_TOKEN_CLEAR:\n      return { ...state, token: '' };\n    default:\n      return state;\n  }\n};\n\nexport default serverConfigReducer;\n","import _ from 'lodash';\n\nimport {\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n} from '../actions/types';\n\nconst inferenceReducer = (state = {}, action) => {\n  switch (action.type) {\n    case INFERENCE_CONFIG_SET:\n      return { ...state, ...action.payload };\n    case INFERENCE_CONFIG_CLEAR:\n      return _.omit(state, 'token', 'prediction', 'accuracy', 'accuracyPlot');\n    case INFERENCE_SUBMIT:\n      return { ...state, prediction: action.payload };\n    case INFERENCE_PREDICTION_CLEAR:\n      return _.omit(state, 'prediction');\n    case INFERENCE_CLEAR:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default inferenceReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport homeReducer from './homeReducer';\nimport loadingFormReducer from './loadingFormReducer';\nimport formFileFieldReducer from './formFileFieldReducer';\nimport classificationReducer from './classificationReducer';\nimport sentimentAnalysisReducer from './sentimentAnalysisReducer';\nimport serverConfigReducer from './serverConfigReducer';\nimport inferenceReducer from './inferenceReducer';\n\nexport default combineReducers({\n  form: formReducer,\n  isHome: homeReducer,\n  loadingForm: loadingFormReducer,\n  formFileField: formFileFieldReducer,\n  classification: classificationReducer,\n  sentimentAnalysis: sentimentAnalysisReducer,\n  serverConfig: serverConfigReducer,\n  inference: inferenceReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}