{"version":3,"sources":["history.js","actions/types.js","apis/train.js","apis/infer.js","actions/utils.js","actions/index.js","components/cover/CoverModal.js","components/cover/Home.js","components/NavigationBar.js","components/Footer.js","components/HoverButtons.js","utils/index.js","components/train/TrainingConfigForm.js","components/train/imageClassification/ICClassListForm.js","components/train/imageClassification/ICClassList.js","components/train/imageClassification/ICClassChoiceForm.js","components/train/imageClassification/ICDataUploadForm.js","components/train/imageClassification/ICDataPreview.js","components/train/imageClassification/ICDataset.js","components/train/imageClassification/ICModal.js","components/train/imageClassification/ICCreate.js","components/train/TrainingSubmitModal.js","components/train/imageClassification/ImageClassification.js","components/FormFileField.js","components/train/textClassification/TCDataUploadForm.js","components/train/textClassification/TCModal.js","components/train/textClassification/TCCreate.js","components/train/textClassification/TextClassification.js","components/FloatingHelp.js","components/train/Training.js","components/infer/TokenForm.js","components/infer/DownloadForm.js","components/infer/InferenceForm.js","components/infer/TaskDisplay.js","components/infer/PreviewTask.js","components/infer/Inference.js","components/play/Playground.js","components/About.js","components/App.js","reducers/navigationReducer.js","reducers/mobileViewReducer.js","reducers/homeReducer.js","reducers/loadingFormReducer.js","reducers/formFileFieldReducer.js","reducers/imageClassificationReducer.js","reducers/textClassificationReducer.js","reducers/serverConfigReducer.js","reducers/inferenceReducer.js","reducers/index.js","index.js"],"names":["createBrowserHistory","basename","process","SET_NAV_LINKS","SET_MOBILE","SET_HOME","CLEAR_HOME","LOADING_FORM","CLEAR_LOADING_FORM","SET_FORM_FILE_FIELD_LABEL","CLEAR_FORM_FILE_FIELD_LABEL","TRAIN_TOKEN_SET","TRAIN_TOKEN_CLEAR","IC_CONFIG","IC_MODEL_TYPE","IC_DATA_SPLIT","IC_ADD_CLASS","IC_DELETE_CLASS","IC_CURRENT_CLASS","IC_ADD_IMAGES","IC_DATA_CLEAR","IC_CLEAR","TC_CONFIG","TC_RNN_TYPE","TC_DATA_SPLIT","TC_DATA_ADD","TC_DATA_CLEAR","TC_CLEAR","INFERENCE_CONFIG_SET","INFERENCE_CONFIG_CLEAR","INFERENCE_SUBMIT","INFERENCE_DOWNLOAD_SET_PYTORCH","INFERENCE_DOWNLOAD_CLEAR_PYTORCH","INFERENCE_DOWNLOAD_SET_ONNX","INFERENCE_DOWNLOAD_CLEAR_ONNX","INFERENCE_PREDICTION_CLEAR","INFERENCE_CLEAR","axios","create","baseURL","headers","post","networkTransaction","a","url","formData","requestType","maxNumTries","apiType","response","numTries","api","inferApi","trainApi","get","console","log","statusCheck","data","status","toastError","message","toast","dark","size","color","checkResponse","result","loadingForm","formName","type","payload","clearLoadingForm","clearFormFileFieldLabel","clearTrainToken","setTrainConfig","taskName","config","clearTrainData","dispatch","clearTrainConfig","submitTrainRequest","trainConfig","FormData","append","JSON","stringify","token","reset","CoverModal","props","modalCardContent","title","targetUrl","contentImage","contentText","buttonText","Card","className","Img","src","variant","style","height","alt","Body","Title","fontSize","Text","Button","as","Link","to","CardDeck","_","map","this","item","renderCardContent","ReactDOM","createPortal","onClick","onDismiss","e","stopPropagation","renderContent","Row","Col","document","querySelector","React","Component","Home","state","displayModal","toggleModal","setState","setHome","clearHome","playsInline","autoPlay","muted","Container","isMobile","Image","renderModal","connect","NavigationBar","toggleNavbar","expanded","closeNavbar","navItems","name","id","setNavLinks","Nav","history","location","pathname","substring","Navbar","expand","fixed","isHome","backgroundColor","Brand","Toggle","aria-controls","Collapse","renderNavItem","navLinks","withRouter","Footer","renderFooterBrand","xs","md","developerSocialMedia","href","target","window","scrollTo","items","disabled","navigationLinks","column","renderNavColumn","renderNavColums","fluid","border","opacity","HoverButtons","buttonData","buttonValue","Object","currentButtonValue","isSmall","event","preventDefault","changeCurrentButtonValue","undefined","hoverButtons","renderButton","renderLoadingPage","loadingText","Spinner","animation","role","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","removeFileBase64Header","image","replace","setErrorClass","touched","renderError","renderTextInput","input","label","placeholder","textAppend","enableAppendSumbit","readOnly","meta","Form","Label","InputGroup","Control","autoComplete","renderFormField","contentType","options","acceptFileFormat","multiple","isFixed","formGroupClassName","Group","renderTextInputGroup","default","value","key","renderDropdownInputGroup","isMultiple","omit","accept","renderFileInputGroup","split","htmlFor","renderSwitchInputGroup","renderSubmitButton","loading","originalText","btnColor","ref","aria-hidden","TrainingConfigForm","reduceLrOnPlateau","stepLr","toggleReduceLr","toggleStepLr","changeModelType","modelType","setTrainModelType","changeDataSplit","dataSplit","setTrainDataSplit","configOptions","batchSizeLimit","batchSizeMin","min","batchSizeMax","max","numEpochsLimit","numEpochsMin","numEpochsMax","onSubmit","handleSubmit","Field","component","modelFieldTitle","modelTypes","currentConfig","onChange","optimizers","ownProps","initialValues","reduxForm","validate","formValues","errors","test","reduceLrOnPlateauLimit","factorLimit","factor","patienceLimit","patience","minLrLimit","minLr","stepLrLimit","stepSizeLimit","stepSize","gammaLimit","gamma","reduceLrOnPlateauPatience","reduceLrOnPlateauFactor","reduceLrOnPlateauMinLr","stepLrStepSize","stepLrGamma","learningRateLimit","learningRateMin","learningRateMax","learningRate","batchSize","epochs","ICClassListForm","classValue","isSaved","toggleSaveMode","classList","includes","icDeleteClass","icAddClass","initialData","isOptionalField","pattern","required","dataset","imageClassification","keys","classNameValue","ICClassList","range","numClassesLimit","number","length","form","renderClassList","IcClassChoiceForm","zipObject","enableReinitialize","values","submit","ICDataUploadForm","currentClass","numImagesExceeded","sizeExceeded","xl","datasetSize","numImagesLimitMax","numImagesLimit","sizeLimit","ICDataPreview","imgUrl","imgId","width","imgList","lg","renderCard","datasetPreview","ICDataset","onClassChoiceSubmit","icCurrentClass","fileListToArray","fileList","imagesList","Array","from","currentClassImgCount","slice","getImageListSize","imagesListSize","sumBy","partial","imageListToBase64","imagesListPreview","i","push","removeBase64HeaderFromImageList","onDataUploadSubmit","currentSize","info","icAddImages","ICClassChoiceForm","classChoice","IcModal","maxHeight","ICCreate","onModalDismiss","clear","checkNumClasses","numClassesLimitMin","checkNumImages","numImagesLimitMin","datasetValues","datasetFailedClasses","sum","onConfigSubmit","mode","taskType","ICModal","isEmpty","bindActionCreators","TrainingSubmitModal","serverConfig","ImageClassification","optimizer","currentTrainConfig","trainConfigOptions","FormFileField","fieldConfig","fieldLabel","hideFilename","setFormFileFieldLabel","files","formFileField","TCDataUploadForm","TCModal","csvData","tcCsvData","saAddData","numRows","textClassification","TCCreate","checkDataset","TextClassification","FloatinHelp","targetSection","tooltip","styles","Training","changeCurrentTask","currentTask","adam","sgd","renderCurrentTask","TokenForm","clearInferenceConfig","submitInferenceToken","enableAppendSubmit","inference","isDownloadable","downloadable","accuracy","accuracyPlot","DownloadForm","haltPytorch","haltOnnx","downloadFile","fetch","blob","objectUrl","URL","createObjectURL","createElement","download","at","click","onDownloadClick","format","setInferenceDownloadUrl","componentDidUpdate","downloadUrlPytorch","clearInferenceDownloadUrl","downloadUrlOnnx","downloadUrl","InferenceForm","inferenceInput","clearInferencePrediction","inputType","submitInferenceData","formInput","field","prediction","TaskDisplay","fieldValues","toFixed","renderAccuracy","renderOutput","PreviewTask","Inference","clearInference","About","trainingSectionRef","createRef","inferenceSectionRef","trainingSnapshots","text","inferenceSnapshots","locationState","current","scrollIntoView","behaviour","snapshotData","snapshot","renderSnapshots","renderFlash","renderImageClassificationInfo","renderTextClassificationInfo","renderTrainingInfo","renderInferenceInfo","rel","App","setMobile","innerWidth","addEventListener","resize","bind","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","path","exact","navigationReducer","action","homeReducer","loadingFormReducer","filter","element","INITIAL_STATE","formFileFieldReducer","imageClassificationReducer","textClassificationReducer","serverConfigReducer","inferenceReducer","combineReducers","formReducer","mobileViewReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.58a4a3e4.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","export const SET_NAV_LINKS = 'SET_NAV_LINKS';\nexport const SET_MOBILE = 'SET_MOBILE';\nexport const SET_HOME = 'SET_HOME';\nexport const CLEAR_HOME = 'CLEAR_HOME';\nexport const LOADING_FORM = 'LOADING_FORM';\nexport const CLEAR_LOADING_FORM = 'CLEAR_LOADING_FORM';\nexport const SET_FORM_FILE_FIELD_LABEL = 'SET_FORM_FILE_FIELD_LABEL';\nexport const CLEAR_FORM_FILE_FIELD_LABEL = 'CLEAR_FORM_FILE_FIELD_LABEL';\nexport const TRAIN_TOKEN_SET = 'TRAIN_TOKEN_SET';\nexport const TRAIN_TOKEN_CLEAR = 'TRAIN_TOKEN_CLEAR';\nexport const IC_CONFIG = 'IC_CONFIG';\nexport const IC_MODEL_TYPE = 'IC_MODEL_TYPE';\nexport const IC_DATA_SPLIT = 'IC_DATA_SPLIT';\nexport const IC_ADD_CLASS = 'IC_ADD_CLASS';\nexport const IC_DELETE_CLASS = 'IC_DELETE_CLASS';\nexport const IC_CURRENT_CLASS = 'IC_CURRENT_CLASS';\nexport const IC_ADD_IMAGES = 'IC_ADD_IMAGES';\nexport const IC_DATA_CLEAR = 'IC_DATA_CLEAR';\nexport const IC_CLEAR = 'IC_CLEAR';\nexport const TC_CONFIG = 'TC_CONFIG';\nexport const TC_RNN_TYPE = 'TC_RNN_TYPE';\nexport const TC_DATA_SPLIT = 'TC_DATA_SPLIT';\nexport const TC_DATA_ADD = 'TC_DATA_ADD';\nexport const TC_DATA_CLEAR = 'TC_DATA_CLEAR';\nexport const TC_CLEAR = 'TC_CLEAR';\nexport const INFERENCE_CONFIG_SET = 'INFERENCE_CONFIG_SET';\nexport const INFERENCE_CONFIG_CLEAR = 'INFERENCE_CONFIG_CLEAR';\nexport const INFERENCE_SUBMIT = 'INFERENCE_SUBMIT';\nexport const INFERENCE_DOWNLOAD_SET_PYTORCH = 'INFERENCE_DOWNLOAD_SET_PYTORCH';\nexport const INFERENCE_DOWNLOAD_CLEAR_PYTORCH =\n  'INFERENCE_DOWNLOAD_CLEAR_PYTORCH';\nexport const INFERENCE_DOWNLOAD_SET_ONNX = 'INFERENCE_DOWNLOAD_SET_ONNX';\nexport const INFERENCE_DOWNLOAD_CLEAR_ONNX = 'INFERENCE_DOWNLOAD_CLEAR_ONNX';\nexport const INFERENCE_PREDICTION_CLEAR = 'INFERENCE_PREDICTION_CLEAR';\nexport const INFERENCE_CLEAR = 'INFERENCE_CLEAR';\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_TRAIN_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_INFER_LAMBDA_ENDPOINT,\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport trainApi from '../apis/train';\nimport inferApi from '../apis/infer';\n\nexport const networkTransaction = async ({\n  url,\n  formData,\n  requestType,\n  maxNumTries,\n  apiType,\n}) => {\n  let response = null;\n  let numTries = 0;\n\n  let api = inferApi;\n  if (apiType === 'train') {\n    api = trainApi;\n  }\n\n  if (!maxNumTries) {\n    maxNumTries = 1;\n  }\n\n  while (numTries >= 0 && numTries < maxNumTries) {\n    try {\n      if (requestType === 'post') {\n        response = await api.post(url, formData);\n      } else {\n        response = await api.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n\nexport const statusCheck = async () => {\n  const response = await networkTransaction({\n    url: '/status',\n    requestType: 'get',\n    apiType: 'train',\n  });\n  return response.data.status !== 'active';\n};\n\nexport const toastError = message => {\n  toast.dark(\n    <div>\n      <MdError size={25} color=\"yellow\" />\n      &nbsp; {message}\n    </div>\n  );\n};\n\nexport const checkResponse = response => {\n  if (response && response.data) {\n    if (response.data.result === 'success') {\n      return true;\n    } else if (response.data.result === 'error') {\n      toastError(response.data.message);\n    } else {\n      toastError('500: Internal Server Error!');\n    }\n  } else {\n    toastError('500: Internal Server Error!');\n  }\n  return false;\n};\n\nexport const correctTaskTypeCase = taskType => {\n  return taskType === 'imageclassification'\n    ? 'imageClassification'\n    : 'textClassification';\n};\n","import { reset } from 'redux-form';\n\nimport {\n  SET_NAV_LINKS,\n  SET_MOBILE,\n  SET_HOME,\n  CLEAR_HOME,\n  LOADING_FORM,\n  CLEAR_LOADING_FORM,\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n  TRAIN_TOKEN_SET,\n  TRAIN_TOKEN_CLEAR,\n  IC_CONFIG,\n  IC_MODEL_TYPE,\n  IC_DATA_SPLIT,\n  IC_ADD_CLASS,\n  IC_DELETE_CLASS,\n  IC_CURRENT_CLASS,\n  IC_ADD_IMAGES,\n  IC_DATA_CLEAR,\n  IC_CLEAR,\n  TC_CONFIG,\n  TC_RNN_TYPE,\n  TC_DATA_SPLIT,\n  TC_DATA_ADD,\n  TC_DATA_CLEAR,\n  TC_CLEAR,\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_DOWNLOAD_SET_PYTORCH,\n  INFERENCE_DOWNLOAD_CLEAR_PYTORCH,\n  INFERENCE_DOWNLOAD_SET_ONNX,\n  INFERENCE_DOWNLOAD_CLEAR_ONNX,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n} from './types';\nimport {\n  networkTransaction,\n  statusCheck,\n  toastError,\n  checkResponse,\n  correctTaskTypeCase,\n} from './utils';\n\nexport const setNavLinks = navLinks => {\n  return {\n    type: SET_NAV_LINKS,\n    payload: navLinks,\n  };\n};\n\nexport const setMobile = isMobile => {\n  return {\n    type: SET_MOBILE,\n    payload: isMobile,\n  };\n};\n\nexport const setHome = () => {\n  return {\n    type: SET_HOME,\n  };\n};\n\nexport const clearHome = () => {\n  return {\n    type: CLEAR_HOME,\n  };\n};\n\nexport const loadingForm = formName => {\n  return {\n    type: LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const clearLoadingForm = formName => {\n  return {\n    type: CLEAR_LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const setFormFileFieldLabel = ({ taskName, label }) => {\n  return {\n    type: SET_FORM_FILE_FIELD_LABEL,\n    payload: { taskName, label },\n  };\n};\n\nexport const clearFormFileFieldLabel = formName => {\n  return {\n    type: CLEAR_FORM_FILE_FIELD_LABEL,\n    payload: formName,\n  };\n};\n\nexport const clearTrainToken = () => {\n  return {\n    type: TRAIN_TOKEN_CLEAR,\n  };\n};\n\nexport const setTrainConfig = ({ taskName, config }) => {\n  const actionType = taskName === 'imageClassification' ? IC_CONFIG : TC_CONFIG;\n  return {\n    type: actionType,\n    payload: config,\n  };\n};\n\nexport const setTrainDataSplit = ({ taskName, dataSplit }) => {\n  const actionType =\n    taskName === 'imageClassification' ? IC_DATA_SPLIT : TC_DATA_SPLIT;\n  return {\n    type: actionType,\n    payload: dataSplit,\n  };\n};\n\nexport const setTrainModelType = ({ taskName, modelType }) => {\n  const actionType =\n    taskName === 'imageClassification' ? IC_MODEL_TYPE : TC_RNN_TYPE;\n  return {\n    type: actionType,\n    payload: modelType,\n  };\n};\n\nexport const clearTrainData = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({\n    type: taskName === 'imageClassification' ? IC_DATA_CLEAR : TC_DATA_CLEAR,\n  });\n};\n\nexport const clearTrainConfig = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: taskName === 'imageClassification' ? IC_CLEAR : TC_CLEAR });\n};\n\nexport const submitTrainRequest =\n  ({ formName, trainConfig }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Check server status\n    const serverIsAvailable = await statusCheck();\n\n    if (serverIsAvailable) {\n      // Encode data\n      const formData = new FormData();\n      formData.append('training_data', JSON.stringify(trainConfig));\n\n      // Processing the last url in list to display in webpage\n      const response = await networkTransaction({\n        url: '/train',\n        formData,\n        requestType: 'post',\n        apiType: 'train',\n      });\n\n      if (checkResponse(response)) {\n        dispatch({ type: TRAIN_TOKEN_SET, payload: response.data.token });\n        dispatch(reset(formName));\n      }\n    } else {\n      toastError(\n        'Server is currently training another model! Please try again after a few minutes.'\n      );\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const icAddClass = classNameValue => {\n  return {\n    type: IC_ADD_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icDeleteClass = classNameValue => {\n  return {\n    type: IC_DELETE_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icCurrentClass = classNameValue => {\n  return {\n    type: IC_CURRENT_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const icAddImages = ({\n  imagesList,\n  imagesListSize,\n  imagesListPreview,\n}) => {\n  return {\n    type: IC_ADD_IMAGES,\n    payload: { imagesList, imagesListSize, imagesListPreview },\n  };\n};\n\nexport const saAddData = csvData => {\n  return {\n    type: TC_DATA_ADD,\n    payload: csvData,\n  };\n};\n\nexport const clearInferenceConfig = () => {\n  return {\n    type: INFERENCE_CONFIG_CLEAR,\n  };\n};\n\nexport const clearInferencePrediction = () => {\n  return { type: INFERENCE_PREDICTION_CLEAR };\n};\n\nexport const clearInference = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: INFERENCE_CLEAR });\n};\n\nexport const submitInferenceToken =\n  ({ formName, token }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Encode data\n    const formData = new FormData();\n    formData.append('token', JSON.stringify({ token }));\n\n    const response = await networkTransaction({\n      url: '/check',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type: INFERENCE_CONFIG_SET,\n        payload: {\n          token,\n          taskType: correctTaskTypeCase(response.data.taskType),\n          isDownloadable: response.data.downloadable,\n          accuracy: response.data.accuracy,\n          accuracyPlot: response.data.accuracyPlot,\n        },\n      });\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const submitInferenceData =\n  ({ formName, formInput }) =>\n  async dispatch => {\n    if (formName) {\n      dispatch(loadingForm(formName));\n    }\n\n    // Encode data\n    const formData = new FormData();\n    formData.append('inferenceInput', JSON.stringify(formInput));\n\n    const response = await networkTransaction({\n      url: '/inference',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n      maxNumTries: 3,\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type: INFERENCE_SUBMIT,\n        payload: response.data.prediction,\n      });\n    }\n\n    if (formName) {\n      dispatch(clearLoadingForm(formName));\n    }\n  };\n\nexport const clearInferenceDownloadUrl = format => {\n  return {\n    type:\n      format === 'pytorch'\n        ? INFERENCE_DOWNLOAD_CLEAR_PYTORCH\n        : INFERENCE_DOWNLOAD_CLEAR_ONNX,\n  };\n};\n\nexport const setInferenceDownloadUrl =\n  ({ token, format }) =>\n  async dispatch => {\n    // Encode data\n    const formData = new FormData();\n    formData.append('downloadConfig', JSON.stringify({ token, format }));\n\n    const response = await networkTransaction({\n      url: '/download',\n      formData,\n      requestType: 'post',\n      apiType: 'inference',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({\n        type:\n          format === 'pytorch'\n            ? INFERENCE_DOWNLOAD_SET_PYTORCH\n            : INFERENCE_DOWNLOAD_SET_ONNX,\n        payload: { downloadUrl: response.data.url },\n      });\n    }\n  };\n","import _ from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Card from 'react-bootstrap/Card';\nimport { Link } from 'react-router-dom';\n\nimport '../../styles/Modal.css';\n\nclass CoverModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.modalCardContent = [\n      {\n        title: 'Training',\n        targetUrl: '/training',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/training.gif`,\n        contentText: (\n          <>\n            Train an{' '}\n            <mark>\n              <b>Image Classification</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>Text Classification</b>\n            </mark>{' '}\n            model on your custom dataset.\n          </>\n        ),\n        buttonText: 'Choose Task',\n      },\n      {\n        title: 'Inference',\n        targetUrl: '/inference',\n        contentImage: `${process.env.PUBLIC_URL}/assets/media/inference.gif`,\n        contentText:\n          'Already trained a model on Flash? Choose this to test your model.',\n        buttonText: 'Test Model',\n      },\n    ];\n  }\n\n  renderCardContent({\n    title,\n    targetUrl,\n    contentImage,\n    contentText,\n    buttonText,\n  }) {\n    return (\n      <Card className=\"card-hover\" key={targetUrl}>\n        <Card.Img\n          src={contentImage}\n          variant=\"top\"\n          style={{ height: '24vh' }}\n          alt={title}\n        />\n        <Card.Body>\n          <Card.Title className=\"text-center\" style={{ fontSize: '2.3vh' }}>\n            {title}\n          </Card.Title>\n          <Card.Text className=\"my-4\">{contentText}</Card.Text>\n          <div className=\"text-center\">\n            <Button variant=\"info\" as={Link} to={targetUrl}>\n              {buttonText}\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  renderContent() {\n    return (\n      <CardDeck className=\"px-0 px-md-5\">\n        {_.map(this.modalCardContent, item => {\n          return this.renderCardContent(item);\n        })}\n      </CardDeck>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={this.props.onDismiss}>\n        <div className=\"modal-body\" onClick={e => e.stopPropagation()}>\n          <h3 className=\"text-center\">Get Started</h3>\n          <hr className=\"w-100 mb-4\" />\n          {this.renderContent()}\n          <hr className=\"w-100 mt-4\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"warning\"\n                className=\"mr-2\"\n                onClick={this.props.onDismiss}\n              >\n                Go Back\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default CoverModal;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport { connect } from 'react-redux';\n\nimport { setHome, clearHome } from '../../actions';\nimport CoverModal from './CoverModal';\nimport '../../styles/Home.css';\n\nclass Home extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  componentDidMount() {\n    this.props.setHome();\n  }\n\n  componentWillUnmount() {\n    this.props.clearHome();\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <CoverModal onDismiss={this.toggleModal} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <header>\n          <div className=\"overlay\"></div>\n          <video playsInline=\"playsinline\" autoPlay=\"autoplay\" muted=\"muted\">\n            <source\n              src={`${process.env.PUBLIC_URL}/assets/media/home.mp4`}\n              type=\"video/mp4\"\n            />\n          </video>\n          <Container className=\"h-100\">\n            <div className=\"d-flex h-100 text-center align-items-center\">\n              <div className=\"w-100 text-white\">\n                <h1 style={{ fontSize: this.props.isMobile ? '3rem' : '5rem' }}>\n                  <Image\n                    src={`${process.env.PUBLIC_URL}/flash.svg`}\n                    style={{ height: '10vh' }}\n                    alt=\"flash-logo\"\n                  />{' '}\n                  F L A S H\n                </h1>\n                <button\n                  className=\"btn btn-outline-light mt-5\"\n                  onClick={() => this.toggleModal()}\n                >\n                  Get Started\n                </button>\n              </div>\n            </div>\n          </Container>\n        </header>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isMobile }) => {\n  return { isMobile };\n};\n\nexport default connect(mapStateToProps, { setHome, clearHome })(Home);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Image from 'react-bootstrap/Image';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setNavLinks } from '../actions';\n\nclass NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.navItems = [\n      { name: 'Training', id: 'training' },\n      { name: 'Inference', id: 'inference' },\n      // { name: 'Playground', id: 'playground' },\n      { name: 'About', id: 'about' },\n    ];\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  };\n\n  closeNavbar = () => {\n    this.setState({ expanded: false });\n  };\n\n  componentDidMount() {\n    this.props.setNavLinks(this.navItems);\n  }\n\n  renderNavItem({ name, id }) {\n    return (\n      <Nav.Link\n        as={Link}\n        className={\n          this.props.history.location.pathname.substring(1) === id\n            ? 'active'\n            : ''\n        }\n        to={`/${id}`}\n        onClick={this.closeNavbar}\n        key={id}\n      >\n        {name}\n      </Nav.Link>\n    );\n  }\n\n  render() {\n    return (\n      <Navbar\n        expand=\"md\"\n        variant=\"dark\"\n        expanded={this.state.expanded}\n        fixed={this.props.isHome ? 'top' : ''}\n        style={{ backgroundColor: 'black' }}\n      >\n        <Container>\n          <Navbar.Brand as={Link} to=\"/\" onClick={this.closeNavbar}>\n            <Image\n              src={`${process.env.PUBLIC_URL}/flash.svg`}\n              style={{ height: '2rem' }}\n              className=\"mr-2\"\n              alt=\"flash logo\"\n            />{' '}\n            F L A S H\n          </Navbar.Brand>\n          <Navbar.Toggle\n            aria-controls=\"navbar-navigation\"\n            onClick={this.toggleNavbar}\n          />\n          <Navbar.Collapse id=\"navbar-navigation\">\n            <Nav className=\"ml-auto\">\n              {this.navItems.map(item => this.renderNavItem(item))}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isHome }) => {\n  return { isHome };\n};\n\nexport default connect(mapStateToProps, { setNavLinks })(\n  withRouter(NavigationBar)\n);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport '../styles/Footer.css';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.developerSocialMedia = [\n      { title: 'Website', url: 'https://www.shantanuacharya.com/' },\n      {\n        title: 'GitHub',\n        url: 'https://github.com/shan18',\n      },\n      {\n        title: 'LinkedIn',\n        url: 'https://www.linkedin.com/in/shanacharya/',\n      },\n      {\n        title: 'Instagram',\n        url: 'https://www.instagram.com/shan_1.0/',\n      },\n    ];\n  }\n\n  renderFooterBrand = () => {\n    return (\n      <Col\n        xs={12}\n        md={3}\n        className={`text-center ${\n          this.props.isMobile ? 'mb-5 mt-3' : 'my-auto'\n        }`}\n      >\n        <Image\n          src={`${process.env.PUBLIC_URL}/flash.svg`}\n          style={{ height: '5vh' }}\n          alt=\"flash logo\"\n        />\n        <span style={{ fontSize: '2rem' }}>F L A S H</span>\n      </Col>\n    );\n  };\n\n  renderNavItem({ name, id, type }) {\n    if (type === 'external') {\n      return (\n        <Nav.Link\n          href={id}\n          target=\"_blank\"\n          style={{ color: 'white' }}\n          key={name}\n        >\n          {name}\n        </Nav.Link>\n      );\n    }\n\n    return (\n      <Nav.Link\n        as={Link}\n        to={`/${id}`}\n        onClick={() => window.scrollTo(0, 0)}\n        style={{ color: 'white' }}\n        key={id}\n      >\n        {name}\n      </Nav.Link>\n    );\n  }\n\n  renderNavColumn({ title, items }) {\n    return (\n      <Col\n        xs={12}\n        md={2}\n        className={this.props.isMobile ? 'mb-5 text-center' : ''}\n        key={title}\n      >\n        <Nav className=\"flex-column\" variant=\"dark\">\n          <Nav.Link disabled className=\"mb-1\" style={{ color: 'white' }}>\n            <b>{title}</b>\n          </Nav.Link>\n          {items.map(item => this.renderNavItem(item))}\n        </Nav>\n      </Col>\n    );\n  }\n\n  renderNavColums() {\n    return [\n      {\n        title: 'LINKS',\n        items: [\n          {\n            name: 'Code',\n            id: 'https://github.com/shan18/Flash',\n            type: 'external',\n          },\n          {\n            name: 'Social',\n            id: 'https://www.linkedin.com/posts/shanacharya_deeplearning-ai-machinelearning-activity-6756135082655936512-BYV6',\n            type: 'external',\n          },\n        ],\n      },\n      {\n        title: 'FLASH',\n        items: this.props.navigationLinks,\n      },\n      {\n        title: 'DEVELOPER',\n        items: this.developerSocialMedia.map(({ title, url }) => {\n          return { name: title, id: url, type: 'external' };\n        }),\n      },\n    ].map(column => this.renderNavColumn(column));\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.isHome ? (\n          ''\n        ) : (\n          <footer className=\"mt-5\">\n            <Container>\n              <Row>\n                {this.renderFooterBrand()}\n                <Col />\n                {this.props.navigationLinks ? this.renderNavColums() : ''}\n              </Row>\n            </Container>\n\n            <Container fluid>\n              <hr\n                className=\"text-muted\"\n                style={{ border: '1px solid white', opacity: '0.2' }}\n              />\n            </Container>\n\n            <Container>\n              <Row>\n                <Col className=\"text-center\">\n                  <p className=\"text-muted\">\n                    © 2021 Flash - All Rights Reserved.\n                  </p>\n                </Col>\n              </Row>\n            </Container>\n          </footer>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ isHome, navigationLinks, isMobile }) => {\n  return { isHome, navigationLinks, isMobile };\n};\n\nexport default connect(mapStateToProps)(Footer);\n","import _ from 'lodash';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass HoverButtons extends React.Component {\n  renderButton(buttonData) {\n    let buttonValue = '';\n    let buttonText = '';\n\n    if (buttonData instanceof Object) {\n      buttonValue = buttonData.buttonValue;\n      buttonText = buttonData.buttonText;\n    } else {\n      buttonValue = buttonData;\n      buttonText = buttonData;\n    }\n\n    return (\n      <Button\n        variant={this.props.currentButtonValue === buttonValue ? 'primary' : ''}\n        size={this.props.isSmall ? 'sm' : ''}\n        className=\"border border-secondary mx-2 my-2 btn-hover\"\n        onClick={event => {\n          event.preventDefault();\n          this.props.changeCurrentButtonValue(buttonValue);\n        }}\n        key={buttonValue}\n      >\n        {buttonText === undefined ? buttonValue : buttonText}\n      </Button>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {_.map(this.props.hoverButtons, buttonData =>\n          this.renderButton(buttonData)\n        )}\n      </>\n    );\n  }\n}\n\nexport default HoverButtons;\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const renderLoadingPage = loadingText => {\n  return (\n    <Row>\n      <Col className=\"text-center\">\n        <h4 className=\"heading\">{loadingText}</h4>\n      </Col>\n      <Col className=\"text-center\">\n        <Spinner animation=\"grow\" size=\"md\" role=\"status\" />\n      </Col>\n    </Row>\n  );\n};\n\nexport const convertFileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\nexport const removeFileBase64Header = image => {\n  return image.replace('data:', '').replace(/^.+,/, '');\n};\n\n/* Form utility functions */\n\nconst setErrorClass = ({ touched, error }) => {\n  return `${touched && error ? 'is-invalid' : ''}`;\n};\n\nexport const renderError = ({ error, touched }) => {\n  if (touched && error) {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  }\n};\n\nexport const renderTextInput = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  meta,\n}) => {\n  return (\n    <>\n      {label ? <Form.Label>{label}</Form.Label> : ''}\n      <InputGroup className={setErrorClass(meta)}>\n        <Form.Control\n          {...input}\n          type={type}\n          placeholder={placeholder}\n          autoComplete=\"off\"\n          readOnly={readOnly}\n        />\n        {textAppend ? (\n          <div className=\"input-group-append\">\n            {enableAppendSumbit ? (\n              <Button type=\"submit\" variant=\"danger\">\n                {textAppend}\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                variant=\"danger\"\n                onClick={event => event.preventDefault}\n              >\n                {textAppend}\n              </Button>\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </InputGroup>\n      {renderError(meta)}\n    </>\n  );\n};\n\nexport const renderTextInputGroup = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      {renderTextInput({\n        input,\n        label,\n        type,\n        placeholder,\n        textAppend,\n        enableAppendSumbit,\n        readOnly,\n        meta,\n      })}\n    </Form.Group>\n  );\n};\n\nexport const renderDropdownInputGroup = ({\n  input,\n  label,\n  options,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      {label ? <Form.Label>{label}</Form.Label> : ''}\n      <InputGroup className={setErrorClass(meta)}>\n        <Form.Control as=\"select\" {...input} className=\"custom-select\">\n          {options.default ? <option value=\"\">{options.default}</option> : ''}\n          {_.map(options, (value, key) => {\n            if (key !== 'default') {\n              return (\n                <option key={key} value={key}>\n                  {value}\n                </option>\n              );\n            }\n            return '';\n          })}\n        </Form.Control>\n      </InputGroup>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderFileInputGroup = ({\n  input,\n  label,\n  acceptFileFormat,\n  multiple,\n  formGroupClassName,\n  meta,\n}) => {\n  let isMultiple = multiple ? multiple : false;\n  return (\n    <Form.Group className={formGroupClassName}>\n      <div className={`custom-file ${setErrorClass(meta)}`}>\n        <Form.Label className=\"custom-file-label text-left\">{label}</Form.Label>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"custom-file-input\"\n          multiple={isMultiple}\n          accept={acceptFileFormat}\n        />\n      </div>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderSwitchInputGroup = ({\n  input,\n  label,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <Form.Group className={formGroupClassName}>\n      <div className={`custom-control custom-switch ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n          id={`custom-switch-input-${label.split(' ')[0]}`}\n        />\n        <Form.Label\n          className=\"custom-control-label\"\n          htmlFor={`custom-switch-input-${label.split(' ')[0]}`}\n        >\n          {label}\n        </Form.Label>\n      </div>\n      {renderError(meta)}\n    </Form.Group>\n  );\n};\n\nexport const renderFormField = ({\n  input,\n  contentType,\n  type,\n  placeholder,\n  label,\n  options,\n  acceptFileFormat,\n  multiple,\n  textAppend,\n  enableAppendSumbit,\n  isFixed: readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  if (contentType === 'text') {\n    return renderTextInputGroup({\n      input,\n      label,\n      type,\n      placeholder,\n      textAppend,\n      enableAppendSumbit,\n      readOnly,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'dropdown') {\n    return renderDropdownInputGroup({\n      input,\n      label,\n      options,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'file') {\n    return renderFileInputGroup({\n      input,\n      label,\n      acceptFileFormat,\n      multiple,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'switch') {\n    return renderSwitchInputGroup({\n      input,\n      label,\n      formGroupClassName,\n      meta,\n    });\n  }\n  return '';\n};\n\nexport const renderSubmitButton = ({\n  loading,\n  originalText,\n  loadingText,\n  onClick,\n  btnColor,\n  size,\n  type,\n  ref,\n}) => {\n  if (!size) {\n    size = '';\n  }\n  if (!type) {\n    type = 'submit';\n  }\n  if (!btnColor) {\n    btnColor = 'primary';\n  }\n  if (loading) {\n    return (\n      <Button variant={btnColor} type={type} ref={ref} size={size} disabled>\n        <Spinner\n          as=\"span\"\n          animation=\"border\"\n          size=\"sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></Spinner>\n        &nbsp;&nbsp;{loadingText}\n      </Button>\n    );\n  } else {\n    return (\n      <Button\n        variant={btnColor}\n        type={type}\n        ref={ref}\n        size={size}\n        onClick={onClick}\n      >\n        {originalText}\n      </Button>\n    );\n  }\n};\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { setTrainModelType, setTrainDataSplit } from '../../actions';\nimport { renderFormField } from '../../utils';\nimport HoverButtons from '../HoverButtons';\n\nclass TrainingConfigForm extends React.Component {\n  state = {\n    reduceLrOnPlateau: false,\n    stepLr: false,\n  };\n\n  toggleReduceLr = () => {\n    this.setState({ reduceLrOnPlateau: !this.state.reduceLrOnPlateau });\n  };\n\n  toggleStepLr = () => {\n    this.setState({ stepLr: !this.state.stepLr });\n  };\n\n  changeModelType = modelType => {\n    this.props.setTrainModelType({ taskName: this.props.taskName, modelType });\n  };\n\n  changeDataSplit = dataSplit => {\n    this.props.setTrainDataSplit({ taskName: this.props.taskName, dataSplit });\n  };\n\n  render() {\n    const {\n      batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n      numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n    } = this.props.configOptions;\n    return (\n      <Form onSubmit={this.props.handleSubmit}>\n        <Row>\n          <Col className=\"mx-auto\">\n            <Field\n              name=\"taskName\"\n              component={renderFormField}\n              contentType=\"text\"\n              placeholder=\"Enter Task Name\"\n              formGroupClassName=\"text-center\"\n              label={<h4>Task Name</h4>}\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mr-auto text-center\">\n            <h4 className=\"mb-2\">{this.props.configOptions.modelFieldTitle}</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.modelTypes}\n              currentButtonValue={this.props.currentConfig.modelType}\n              changeCurrentButtonValue={this.changeModelType}\n              isSmall\n            />\n          </Col>\n          <Col xs={12} md={4} className=\"ml-auto mt-5 mt-md-0 text-center\">\n            <h4 className=\"mb-2\">Dataset Split</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.dataSplit}\n              currentButtonValue={this.props.currentConfig.dataSplit}\n              changeCurrentButtonValue={this.changeDataSplit}\n              isSmall\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <h4 className=\"mb-2\">Callbacks</h4>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <Field\n              name=\"reduceLrOnPlateau\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Reduce LR on Plateau\"\n              onChange={() => this.toggleReduceLr()}\n            />\n          </Col>\n        </Row>\n        {this.state.reduceLrOnPlateau ? (\n          <Form.Group as={Row} className=\"mt-1 mb-5\">\n            <Col xs={12} md={4} className=\"text-center\">\n              <Field\n                name=\"reduceLrOnPlateauPatience\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Patience\"\n                placeholder=\"Enter Patience\"\n              />\n            </Col>\n            <Col xs={12} md={4} className=\"my-3 my-md-0 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauFactor\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Factor\"\n                placeholder=\"Enter Factor\"\n              />\n            </Col>\n            <Col xs={12} md={4} className=\"text-center\">\n              <Field\n                name=\"reduceLrOnPlateauMinLr\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Minimum LR\"\n                placeholder=\"Enter Min LR\"\n              />\n            </Col>\n          </Form.Group>\n        ) : (\n          ''\n        )}\n        <Row className=\"mt-2\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <Field\n              name=\"stepLr\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Step LR\"\n              onChange={() => this.toggleStepLr()}\n            />\n          </Col>\n        </Row>\n        {this.state.stepLr ? (\n          <Form.Group as={Row} className=\"mt-1 mb-5\">\n            <Col xs={12} md={6} className=\"text-center\">\n              <Field\n                name=\"stepLrStepSize\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Step Size\"\n                placeholder=\"Enter Step Size\"\n              />\n            </Col>\n            <Col xs={12} md={6} className=\"my-3 my-md-0 text-center\">\n              <Field\n                name=\"stepLrGamma\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Gamma\"\n                placeholder=\"Enter Gamma\"\n              />\n            </Col>\n          </Form.Group>\n        ) : (\n          ''\n        )}\n        <Row className=\"mt-5\">\n          <Col xs={12} md={6} className=\"mx-auto text-center\">\n            <h4 className=\"mb-2\">Hyperparameters</h4>\n          </Col>\n        </Row>\n        <Form.Group as={Row} className=\"my-5\">\n          <Col xs={12} md={6} className=\"text-center\">\n            <Field\n              name=\"optimizer\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              label=\"Optimizer\"\n              options={this.props.configOptions.optimizers}\n            />\n          </Col>\n          <Col xs={12} md={6} className=\"mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"learningRate\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Learning Rate\"\n              placeholder=\"Enter LR\"\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row}>\n          <Col xs={12} md={6} className=\"text-center\">\n            <Field\n              name=\"batchSize\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Batch Size\"\n              placeholder={`Range: ${batchSizeMin} - ${batchSizeMax}`}\n            />\n          </Col>\n          <Col xs={12} md={6} className=\"mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"epochs\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Epochs\"\n              placeholder={`Range: ${numEpochsMin} - ${numEpochsMax}`}\n            />\n          </Col>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nconst validate = (formValues, { configOptions }) => {\n  const errors = {};\n\n  // Task Name\n  if (!formValues.taskName) {\n    errors.taskName = 'You must enter a task name';\n  } else if (!/^[a-zA-Z0-9- ]+$/i.test(formValues.taskName)) {\n    errors.taskName =\n      'Task name can contain only alphabets, numbers, hyphens and spaces';\n  }\n\n  // Reduce LR on Plateau\n  if (formValues.reduceLrOnPlateau) {\n    const {\n      reduceLrOnPlateauLimit: {\n        factor: factorLimit,\n        patience: patienceLimit,\n        minLr: minLrLimit,\n      },\n      stepLrLimit: { stepSize: stepSizeLimit, gamma: gammaLimit },\n    } = configOptions;\n\n    // Reduce LR On Plateau - Patience\n    if (!formValues.reduceLrOnPlateauPatience) {\n      errors.reduceLrOnPlateauPatience = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.reduceLrOnPlateauPatience)) {\n      errors.reduceLrOnPlateauPatience = 'Must be an integer';\n    } else if (\n      formValues.reduceLrOnPlateauPatience < patienceLimit.min ||\n      formValues.reduceLrOnPlateauPatience > patienceLimit.max\n    ) {\n      errors.reduceLrOnPlateauPatience = `Must be between ${patienceLimit.min} and ${patienceLimit.max}`;\n    }\n\n    // Reduce LR On Plateau - Factor\n    if (!formValues.reduceLrOnPlateauFactor) {\n      errors.reduceLrOnPlateauFactor = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauFactor)\n    ) {\n      errors.reduceLrOnPlateauFactor = 'Enter a valid value';\n    } else if (\n      formValues.reduceLrOnPlateauFactor < factorLimit.min ||\n      formValues.reduceLrOnPlateauFactor > factorLimit.max\n    ) {\n      errors.reduceLrOnPlateauFactor = `Must be between ${factorLimit.min} and ${factorLimit.max}`;\n    }\n\n    // Reduce LR On Plateau - Min LR\n    if (!formValues.reduceLrOnPlateauMinLr) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauMinLr)\n    ) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a valid value';\n    } else if (formValues.reduceLrOnPlateauMinLr < minLrLimit) {\n      errors.reduceLrOnPlateauMinLr = `Minimum value is ${minLrLimit}`;\n    }\n\n    // Step LR - Step Size\n    if (!formValues.stepLrStepSize) {\n      errors.stepLrStepSize = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.stepLrStepSize)) {\n      errors.stepLrStepSize = 'Must be an integer';\n    } else if (\n      formValues.stepLrStepSize < stepSizeLimit.min ||\n      formValues.stepLrStepSize > stepSizeLimit.max\n    ) {\n      errors.stepLrStepSize = `Must be between ${stepSizeLimit.min} and ${stepSizeLimit.max}`;\n    }\n\n    // Step LR - Gamma\n    if (!formValues.stepLrGamma) {\n      errors.stepLrGamma = 'Enter a value';\n    } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.stepLrGamma)) {\n      errors.stepLrGamma = 'Enter a valid value';\n    } else if (\n      formValues.stepLrGamma < gammaLimit.min ||\n      formValues.stepLrGamma > gammaLimit.max\n    ) {\n      errors.stepLrGamma = `Must be between ${gammaLimit.min} and ${gammaLimit.max}`;\n    }\n  }\n\n  // Learning Rate\n  const {\n    learningRateLimit: { min: learningRateMin, max: learningRateMax },\n  } = configOptions;\n  if (!formValues.learningRate) {\n    errors.learningRate = 'You must enter a learning rate';\n  } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.learningRate)) {\n    errors.learningRate = 'Enter a valid value';\n  } else if (\n    formValues.learningRate < learningRateMin ||\n    formValues.learningRate > learningRateMax\n  ) {\n    errors.learningRate = `Must be between ${learningRateMin} and ${learningRateMax}`;\n  }\n\n  // Batch Size\n  const {\n    batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n  } = configOptions;\n  if (!formValues.batchSize) {\n    errors.batchSize = 'You must enter a batch size';\n  } else if (!/^[0-9]+$/i.test(formValues.batchSize)) {\n    errors.batchSize = 'Batch size must be an integer';\n  } else if (\n    formValues.batchSize < batchSizeMin ||\n    formValues.batchSize > batchSizeMax\n  ) {\n    errors.batchSize = `Must be between ${batchSizeMin} and ${batchSizeMax}`;\n  }\n\n  // Epochs\n  const {\n    numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n  } = configOptions;\n  if (!formValues.epochs) {\n    errors.epochs = 'You must enter the number of epochs';\n  } else if (!/^[0-9]+$/i.test(formValues.epochs)) {\n    errors.epochs = 'Number of epochs must be an integer';\n  } else if (\n    formValues.epochs < numEpochsMin ||\n    formValues.epochs > numEpochsMax\n  ) {\n    errors.epochs = `Must be between ${numEpochsMin} and ${numEpochsMax}`;\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const { configOptions, currentConfig } = state[ownProps.taskName];\n  return { configOptions, currentConfig, initialValues: currentConfig };\n};\n\nexport default connect(mapStateToProps, {\n  setTrainModelType,\n  setTrainDataSplit,\n})(reduxForm({ validate })(TrainingConfigForm));\n","import _ from 'lodash';\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { FaCheck } from 'react-icons/fa';\nimport { MdDelete, MdError } from 'react-icons/md';\n\nimport { icAddClass, icDeleteClass } from '../../../actions';\n\nclass ICClassListForm extends React.Component {\n  state = {\n    classValue: '',\n    isSaved: false,\n  };\n\n  toggleSaveMode = () => {\n    this.setState({ isSaved: !this.state.isSaved });\n  };\n\n  onSubmit() {\n    const { isSaved } = this.state;\n    if (!isSaved && this.props.classList.includes(this.state.classValue)) {\n      toast.error(\n        <div>\n          <MdError size={25} />\n          &nbsp; A class with name \"{this.state.classValue}\" already exists!\n        </div>\n      );\n    } else {\n      const { classValue } = this.state;\n      if (!isSaved) {\n        this.props.icAddClass(classValue);\n      } else {\n        this.props.icDeleteClass(classValue);\n        this.setState({ classValue: '' });\n      }\n      this.toggleSaveMode();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.initialData) {\n      this.setState({ ...this.props.initialData });\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={event => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n        className=\"my-2\"\n      >\n        <InputGroup>\n          <Form.Control\n            type=\"text\"\n            placeholder={`Enter class name${\n              this.props.isOptionalField ? ' (optional)' : ''\n            }`}\n            autoComplete=\"off\"\n            onChange={event =>\n              this.setState({ classValue: event.target.value })\n            }\n            value={this.state.classValue}\n            readOnly={this.state.isSaved}\n            pattern=\"[a-zA-Z0-9 ]+\"\n            title=\"Only alphabets, numbers and spaces are allowed\"\n            required\n          />\n          <div className=\"input-group-append\">\n            {this.state.isSaved ? (\n              <Button type=\"submit\" variant=\"danger\">\n                <MdDelete />\n              </Button>\n            ) : (\n              <Button type=\"submit\" variant=\"outline-success\">\n                <FaCheck />\n              </Button>\n            )}\n          </div>\n        </InputGroup>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ imageClassification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps, {\n  icAddClass,\n  icDeleteClass,\n})(ICClassListForm);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport ICClassListForm from './ICClassListForm';\n\nclass ICClassList extends React.Component {\n  renderClassList() {\n    return _.map(_.range(0, this.props.numClassesLimit.max), number => {\n      let isOptionalField =\n        number >= this.props.numClassesLimit.min ? true : false;\n      let initialData = null;\n      if (number < this.props.classList.length) {\n        initialData = {\n          classValue: this.props.classList[number],\n          isSaved: true,\n        };\n      }\n      return (\n        <ICClassListForm\n          form=\"classForm\"\n          isOptionalField={isOptionalField}\n          key={number}\n          initialData={initialData}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <h4>Classes</h4>\n        <small>\n          Number of classes must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numClassesLimit.min} -{' '}\n              {this.props.numClassesLimit.max}\n            </b>\n          </mark>\n        </small>\n        {this.renderClassList()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    dataset,\n    configOptions: { numClassesLimit },\n  },\n}) => {\n  return { classList: _.keys(dataset), numClassesLimit };\n};\n\nexport default connect(mapStateToProps)(ICClassList);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { renderFormField } from '../../../utils';\n\nclass IcClassChoiceForm extends React.Component {\n  render() {\n    const { classList } = this.props;\n    return (\n      <Form>\n        <Row className=\"mt-3\">\n          <Col xs={8} className=\"mx-auto\">\n            <Field\n              name=\"classChoice\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              options={{\n                default: 'Choose a class...',\n                ..._.zipObject(classList, classList),\n              }}\n            />\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ imageClassification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'icClassChoiceForm',\n    enableReinitialize: true,\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(IcClassChoiceForm)\n);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\n\nclass ICDataUploadForm extends React.Component {\n  render() {\n    return (\n      <>\n        {this.props.currentClass &&\n        !this.props.numImagesExceeded &&\n        !this.props.sizeExceeded ? (\n          <Form>\n            <Row className=\"mt-3\">\n              <Col xs={10} xl={6} className=\"mx-auto\">\n                <ImUpload3 size={30} className=\"mb-3\" />\n                <Field\n                  name=\"classImages\"\n                  component={renderFormField}\n                  contentType=\"file\"\n                  label=\"Choose File\"\n                  acceptFileFormat=\"image/jpeg,image/png\"\n                  multiple\n                />\n              </Col>\n            </Row>\n          </Form>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: {\n      numImagesLimit: { max: numImagesLimitMax },\n      sizeLimit,\n    },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesExceeded: dataset[currentClass]\n      ? dataset[currentClass].length >= numImagesLimitMax\n      : false,\n    sizeExceeded: datasetSize[currentClass]\n      ? datasetSize[currentClass] >= sizeLimit\n      : false,\n  };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'icDataUploadForm',\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ICDataUploadForm)\n);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nclass ICDataPreview extends React.Component {\n  renderCard(imgUrl, imgId) {\n    return (\n      <Col className=\"mb-3\" key={imgId}>\n        <Card\n          className=\"card-hover shadow bg-white rounded\"\n          style={{ width: '5rem' }}\n        >\n          <Card.Img variant=\"top\" src={imgUrl} alt={`data-${imgId}`} />\n        </Card>\n      </Col>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.imgList ? (\n          <Row xs={3} lg={4} xl={6} className=\"mt-5 mx-auto\">\n            {_.map(this.props.imgList, (image, imgId) =>\n              this.renderCard(image, imgId)\n            )}\n          </Row>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: { currentClass, datasetPreview },\n}) => {\n  return { imgList: datasetPreview[currentClass] };\n};\n\nexport default connect(mapStateToProps)(ICDataPreview);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { icCurrentClass, icAddImages } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport ICClassChoiceForm from './ICClassChoiceForm';\nimport ICDataUploadForm from './ICDataUploadForm';\nimport ICDataPreview from './ICDataPreview';\n\nclass ICDataset extends React.Component {\n  onClassChoiceSubmit = values => {\n    this.props.icCurrentClass(_.values(values)[0]);\n  };\n\n  fileListToArray = fileList => {\n    let imagesList = Array.from(fileList);\n    if (\n      this.props.currentClassImgCount + imagesList.length >\n      this.props.numImagesLimit.max\n    ) {\n      imagesList = imagesList.slice(\n        0,\n        this.props.numImagesLimit.max - this.props.currentClassImgCount\n      );\n    }\n    return imagesList;\n  };\n\n  getImageListSize = imagesList => {\n    let imagesListSize = 0;\n    if (imagesList.length > 0) {\n      imagesListSize = _.sumBy(['size'], _.partial(_.sumBy, imagesList));\n    }\n    return imagesListSize;\n  };\n\n  imageListToBase64 = async imagesList => {\n    let imagesListPreview = [];\n    for (let i = 0; i < imagesList.length; i++) {\n      imagesListPreview.push(await convertFileToBase64(imagesList[i]));\n    }\n    return imagesListPreview;\n  };\n\n  removeBase64HeaderFromImageList = imagesList => {\n    return _.map(imagesList, image => {\n      return removeFileBase64Header(image);\n    });\n  };\n\n  onDataUploadSubmit = async values => {\n    // Fetch list of images\n    let imagesList = this.fileListToArray(_.values(values)[0]);\n\n    // Obtain size\n    const imagesListSize = this.getImageListSize(imagesList);\n\n    if (this.props.currentSize + imagesListSize >= this.props.sizeLimit) {\n      toast.info(\n        <div>\n          <MdError size={25} />\n          &nbsp; Cannot upload images. Total size of the images for this class\n          are exceeding {this.props.sizeLimit / 1000000} MB.\n        </div>\n      );\n    } else if (imagesList.length > 0) {\n      // Get base64 string of each image\n      const imagesListPreview = await this.imageListToBase64(imagesList);\n\n      // Remove base64 header from image for backend support\n      imagesList = this.removeBase64HeaderFromImageList(imagesListPreview);\n\n      // Update redux store\n      this.props.icAddImages({\n        imagesList,\n        imagesListPreview,\n        imagesListSize,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h4>Images</h4>\n        <small>\n          Number of images for each class must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numImagesLimit.min} -{' '}\n              {this.props.numImagesLimit.max}\n            </b>\n          </mark>\n          .\n        </small>\n        <br />\n        <small>\n          If you upload more than {this.props.numImagesLimit.max} images then\n          only the{' '}\n          <mark>\n            <b>first {this.props.numImagesLimit.max} images</b>\n          </mark>{' '}\n          will be considered.\n        </small>\n        <br />\n        <small>\n          The total size of the images for each class must be{' '}\n          <mark>\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </mark>\n          .\n        </small>\n        <ICClassChoiceForm\n          onSubmit={this.onClassChoiceSubmit}\n          initialValues={{ classChoice: this.props.currentClass }}\n        />\n        <ICDataUploadForm onSubmit={this.onDataUploadSubmit} />\n        <ICDataPreview />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  imageClassification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: { numImagesLimit, sizeLimit },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesLimit,\n    sizeLimit,\n    currentSize: datasetSize[currentClass],\n    currentClassImgCount: dataset[currentClass]\n      ? dataset[currentClass].length\n      : 0,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  icCurrentClass,\n  icAddImages,\n})(ICDataset);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport ICClassList from './ICClassList';\nimport ICDataset from './ICDataset';\nimport '../../../styles/Modal.css';\n\nclass IcModal extends React.Component {\n  renderContent() {\n    return (\n      <Row>\n        <Col xs={12} md={4} className=\"text-center\">\n          <ICClassList />\n        </Col>\n        <Col\n          xs={12}\n          md={8}\n          className={`${this.props.isMobile ? 'mt-5' : ''} text-center`}\n        >\n          <ICDataset />\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{\n            width: this.props.isMobile ? '90%' : '60%',\n            maxHeight: 'calc(100vh - 20vh)',\n          }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"success\"\n                className=\"mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </Button>\n              <Button\n                variant=\"warning\"\n                className=\"mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ isMobile }) => {\n  return { isMobile };\n};\n\nexport default connect(mapStateToProps)(IcModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport ICModal from './ICModal';\n\nclass ICCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkNumClasses = () => {\n    const {\n      configOptions: {\n        numClassesLimit: { min: numClassesLimitMin },\n      },\n      dataset,\n    } = this.props;\n    if (_.keys(dataset).length < numClassesLimitMin) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to create a minimum of {numClassesLimitMin} classes.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  checkNumImages = () => {\n    const {\n      configOptions: {\n        numImagesLimit: { min: numImagesLimitMin },\n      },\n      dataset,\n    } = this.props;\n\n    const datasetValues = _.values(dataset);\n    const datasetFailedClasses = _.sum(\n      _.map(datasetValues, items => (items.length < numImagesLimitMin ? 0 : 1))\n    );\n\n    if (datasetValues.length !== datasetFailedClasses) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to upload atleast {numImagesLimitMin} images per\n          class.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkNumClasses() && this.checkNumImages()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <ICModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <Row className=\"my-5 text-center\">\n          <Col>\n            <Button\n              variant=\"dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Create Dataset\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"mt-5 text-center\">\n          <Col>\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  imageClassification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ICCreate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport '../../styles/Modal.css';\n\nclass TrainingSubmitModal extends React.Component {\n  renderContent() {\n    return (\n      <Row className=\"my-4\">\n        <Col xs={12} className=\"mb-4\">\n          Your dataset and model configuration has been successfully uploaded to\n          the server for training.\n        </Col>\n        <Col xs={12}>\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp; {this.props.token}\n          </h5>\n        </Col>\n        <Col xs={12} className=\"mt-4\">\n          Please copy and save the token provided above. It will be required for\n          testing the model on the inference page.\n        </Col>\n        <Col xs={12} className=\"mt-4\">\n          Note:\n          <ul>\n            <li>\n              The model shall be trained and available for inference in 3-15\n              minutes depending upon the size of your dataset.\n            </li>\n            <li>\n              Trained models are available for testing only upto <b>2 hours</b>{' '}\n              starting from the point when they are made available for\n              inference.\n            </li>\n          </ul>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\">\n        <div\n          className=\"modal-body\"\n          style={{ width: '40%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Successful</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <Row>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"success\"\n                className=\"mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Dismiss\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps)(TrainingSubmitModal);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n} from '../../../actions';\nimport history from '../../../history';\nimport ICCreate from './ICCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass ImageClassification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'imageClassification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['ResNet18', 'ResNet34', 'MobileNet v2'],\n      modelFieldTitle: 'Model',\n      numClassesLimit: { min: 2, max: 10 },\n      numImagesLimit: { min: 10, max: 100 },\n      batchSizeLimit: { min: 1, max: 32 },\n      numEpochsLimit: { min: 1, max: 10 },\n      sizeLimit: 10000000, // In bytes (10 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'ResNet18',\n      dataSplit: '70 : 30',\n      optimizer: 'sgd',\n      learningRate: 0.01,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    // Send values to server\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col xs={9} md={4} className=\"mx-auto\">\n            <Card className=\"mx-auto mt-4\">\n              <Card.Img\n                variant=\"top\"\n                as=\"video\"\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                  type=\"video/mp4\"\n                />\n              </Card.Img>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={6} className=\"mx-auto\">\n            <ICCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n})(ImageClassification);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\n\nimport { setFormFileFieldLabel } from '../actions';\n\nclass FormFileField extends React.Component {\n  render() {\n    return (\n      <Field\n        {..._.omit(this.props.fieldConfig, 'label', 'hideFilename')}\n        label={\n          this.props.fieldLabel\n            ? this.props.fieldLabel\n            : this.props.fieldConfig.label\n        }\n        onChange={event => {\n          if (!this.props.hideFilename) {\n            this.props.setFormFileFieldLabel({\n              taskName: this.props.taskName,\n              label: event.target.files[0].name,\n            });\n          }\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ formFileField }, ownProps) => {\n  return { fieldLabel: formFileField[ownProps.taskName] };\n};\n\nexport default connect(mapStateToProps, { setFormFileFieldLabel })(\n  FormFileField\n);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\nimport FormFileField from '../../FormFileField';\n\nclass TCDataUploadForm extends React.Component {\n  render() {\n    return (\n      <Row className=\"text-center\">\n        <Col xs={12} className=\"mb-4\">\n          <h4>Upload Dataset</h4>\n        </Col>\n        <Col md={8} className=\"mx-auto\">\n          <Form>\n            <ImUpload3 size={30} className=\"mb-3\" />\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'tcCsvData',\n                component: renderFormField,\n                contentType: 'file',\n                label: 'Choose File',\n                acceptFileFormat: '.csv, text/csv',\n              }}\n            />\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'tcDataUploadForm',\n  onChange: (values, dispatch, props) => {\n    props.submit();\n  },\n})(TCDataUploadForm);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { saAddData } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport TCDataUploadForm from './TCDataUploadForm';\nimport '../../../styles/Modal.css';\n\nclass TCModal extends React.Component {\n  onDataUploadSubmit = async values => {\n    let csvData = values.tcCsvData;\n    if (csvData.length > 0) {\n      csvData = csvData[0];\n      if (csvData.size > this.props.sizeLimit) {\n        toast.info(\n          <div>\n            <MdError size={25} />\n            &nbsp; Cannot upload the file. Total size of the dataset is\n            exceeding {this.props.sizeLimit / 1000000} MB.\n          </div>\n        );\n      } else {\n        csvData = removeFileBase64Header(await convertFileToBase64(csvData));\n        this.props.saAddData(csvData);\n      }\n    }\n  };\n\n  renderContent() {\n    return (\n      <Row className=\"px-3\">\n        <Col className=\"text-justify\">\n          <p>\n            Upload the dataset as a <b>CSV (Comma-Separated Values)</b> file\n            with <b>two columns</b>:{' '}\n            <mark>\n              <b>input</b>\n            </mark>{' '}\n            and\n            <mark>\n              <b>label</b>\n            </mark>\n          </p>\n          Column Description:\n          <ul>\n            <li>\n              <mark>\n                <b>input</b>\n              </mark>\n              : Contains input sentences\n            </li>\n            <li>\n              <mark>\n                <b>label</b>\n              </mark>\n              : Contains the type (class) for the corresponding input sentences.\n            </li>\n          </ul>\n          <p>\n            NOTE: The CSV file must contain{' '}\n            <b>less than {this.props.numRows} rows</b> and its size must be{' '}\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </p>\n          <br />\n          <Row className=\"mb-4\">\n            <Col xs={12} md={6}>\n              <h4 className=\"mb-3 text-center\">Example Dataset Preview</h4>\n              <Card className=\"shadow bg-white rounded mx-auto\">\n                <Card.Img\n                  variant=\"top\"\n                  style={{ height: this.props.isMobile ? '20vh' : '24vh' }}\n                  src={`${process.env.PUBLIC_URL}/assets/media/textClassificationDataPreview.png`}\n                  alt=\"text classification example dataset preview\"\n                />\n              </Card>\n            </Col>\n            <Col\n              xs={12}\n              md={6}\n              className={this.props.isMobile ? 'mt-5' : 'my-auto'}\n            >\n              <TCDataUploadForm\n                onSubmit={this.onDataUploadSubmit}\n                taskName={this.props.taskName}\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{\n            width: this.props.isMobile ? '90%' : '50%',\n            maxHeight: 'calc(100vh - 20vh)',\n          }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  isMobile,\n  textClassification: {\n    configOptions: { sizeLimit, numRows },\n  },\n}) => {\n  return {\n    isMobile,\n    sizeLimit,\n    numRows,\n  };\n};\n\nexport default connect(mapStateToProps, { saAddData })(TCModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport TCModal from './TCModal';\n\nclass TCCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkDataset = () => {\n    if (!this.props.dataset) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; Please upload a dataset.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkDataset()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <TCModal\n            onDismiss={this.onModalDismiss}\n            taskName={this.props.taskName}\n          />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <Row className=\"my-5 text-center\">\n          <Col>\n            <Button\n              variant=\"dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Upload Dataset\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"mt-5 text-center\">\n          <Col>\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  textClassification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TCCreate);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n} from '../../../actions';\nimport history from '../../../history';\nimport TCCreate from './TCCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass TextClassification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'textClassification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['LSTM', 'GRU'],\n      modelFieldTitle: 'RNN Type',\n      numRows: 10000,\n      sizeLimit: 1000000, // In bytes (1 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'LSTM',\n      dataSplit: '70 : 30',\n      optimizer: 'adam',\n      learningRate: 0.001,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col xs={10} md={5} className=\"mx-auto\">\n            <Card className=\"mx-auto mt-4\">\n              <Card.Img\n                variant=\"top\"\n                as=\"video\"\n                playsInline=\"playsinline\"\n                autoPlay=\"autoplay\"\n                muted=\"muted\"\n              >\n                <source\n                  src={`${process.env.PUBLIC_URL}/assets/media/textClassification.mp4`}\n                  type=\"video/mp4\"\n                />\n              </Card.Img>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xs={6} className=\"mx-auto\">\n            <TCCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n})(TextClassification);\n","import { Link } from 'react-router-dom';\nimport { Container, Button } from 'react-floating-action-button';\nimport { IoHelpSharp } from 'react-icons/io5';\n\nconst FloatinHelp = props => {\n  return (\n    <Container>\n      <Link\n        to={{\n          pathname: '/about',\n          state: { targetSection: props.target },\n        }}\n      >\n        <Button\n          tooltip=\"Help\"\n          styles={{ backgroundColor: '#000000', color: '#ffffff' }}\n        >\n          <IoHelpSharp size={25} />\n        </Button>\n      </Link>\n    </Container>\n  );\n};\n\nexport default FloatinHelp;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport HoverButtons from '../HoverButtons';\nimport ImageClassification from './imageClassification/ImageClassification';\nimport TextClassification from './textClassification/TextClassification';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Training extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.hoverButtons = [\n      {\n        buttonValue: 'imageClassification',\n        buttonText: 'Image Classification',\n      },\n      { buttonValue: 'textclassification', buttonText: 'Text Classification' },\n    ];\n\n    this.trainConfigOptions = {\n      dataSplit: ['70 : 30', '80 : 20'],\n      batchSizeLimit: { min: 1, max: 256 },\n      numEpochsLimit: { min: 1, max: 20 },\n      optimizers: { adam: 'Adam', sgd: 'SGD' },\n      learningRateLimit: { min: 1e-5, max: 2 },\n      reduceLrOnPlateauLimit: {\n        factor: { min: 0.01, max: 0.5 },\n        patience: { min: 1, max: 20 },\n        minLr: 1e-5,\n      },\n      stepLrLimit: {\n        stepSize: { min: 1, max: 10 },\n        gamma: { min: 0.01, max: 0.9 },\n      },\n    };\n\n    this.currentTrainConfig = {\n      reduceLrOnPlateau: false,\n      reduceLrOnPlateauPatience: 5,\n      reduceLrOnPlateauFactor: 0.1,\n      reduceLrOnPlateauMinLr: 1e-5,\n      stepLrStepSize: 4,\n      stepLrGamma: 0.1,\n    };\n\n    this.state = {\n      currentTask: 'imageClassification',\n    };\n  }\n\n  changeCurrentTask = currentTask => {\n    if (!(this.state.currentTask === currentTask)) {\n      this.setState({ currentTask });\n    }\n  };\n\n  renderCurrentTask() {\n    if (this.state.currentTask === 'imageClassification') {\n      return (\n        <ImageClassification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    } else {\n      return (\n        <TextClassification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Train a Model</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"text-center\">\n            <HoverButtons\n              hoverButtons={this.hoverButtons}\n              currentButtonValue={this.state.currentTask}\n              changeCurrentButtonValue={this.changeCurrentTask}\n            />\n          </Col>\n        </Row>\n        {this.renderCurrentTask()}\n        <FloatinHelp target=\"training\" />\n      </Container>\n    );\n  }\n}\n\nexport default Training;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\nimport { Field, reset, reduxForm } from 'redux-form';\nimport { MdDelete } from 'react-icons/md';\n\nimport { submitInferenceToken, clearInferenceConfig } from '../../actions';\nimport { renderFormField, renderSubmitButton } from '../../utils';\n\nclass TokenForm extends React.Component {\n  onSubmit = values => {\n    if (this.props.token) {\n      this.props.clearInferenceConfig();\n      this.props.dispatch(reset(this.props.form));\n    } else {\n      this.props.submitInferenceToken({\n        formName: this.props.form,\n        token: values.token,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Row className=\"mb-1 mt-3 py-5\">\n        <Col xs={10} md={6} className=\"mx-auto\">\n          {this.props.token ? (\n            <form\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\n              className=\"mb-4\"\n            >\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Token\"\n                textAppend={<MdDelete />}\n                enableAppendSubmit\n                isFixed\n              />\n            </form>\n          ) : (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                placeholder=\"Enter Token\"\n              />\n              <Row className=\"mt-3\">\n                <Col className=\"text-right\">\n                  {renderSubmitButton({\n                    loading: this.props.loadingForm.includes(this.props.form),\n                    originalText: 'Validate Token',\n                    loadingText: 'Validating...',\n                  })}\n                </Col>\n              </Row>\n            </form>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.token) {\n    errors.token = 'You must enter a token';\n  } else if (!/^[a-zA-Z0-9-_ ]+$/i.test(formValues.token)) {\n    errors.token = 'Invalid token';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceToken,\n  clearInferenceConfig,\n})(reduxForm({ form: 'tokenForm', validate })(TokenForm));\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\n\nimport {\n  setInferenceDownloadUrl,\n  clearInferenceDownloadUrl,\n} from '../../actions';\nimport { renderSubmitButton } from '../../utils';\n\nclass DownloadForm extends React.Component {\n  state = {\n    haltPytorch: false,\n    haltOnnx: false,\n  };\n\n  downloadFile = async url => {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    let objectUrl = window.URL.createObjectURL(blob);\n    let a = document.createElement('a');\n    a.href = objectUrl;\n    a.download = url.split('/').at(-1);\n    a.click();\n  };\n\n  onDownloadClick = format => {\n    this.props.setInferenceDownloadUrl({ token: this.props.token, format });\n  };\n\n  componentDidUpdate = async () => {\n    if (this.props.downloadUrlPytorch && !this.state.haltPytorch) {\n      this.setState({ haltPytorch: true });\n      await this.downloadFile(this.props.downloadUrlPytorch);\n      this.props.clearInferenceDownloadUrl('pytorch');\n      this.setState({ haltPytorch: false });\n    }\n\n    if (this.props.downloadUrlOnnx && !this.state.haltOnnx) {\n      this.setState({ haltOnnx: true });\n      await this.downloadFile(this.props.downloadUrlOnnx);\n      this.props.clearInferenceDownloadUrl('onnx');\n      this.setState({ haltOnnx: false });\n    }\n  };\n\n  render() {\n    return (\n      <Row className=\"mb-5\">\n        <Col xs={6} className=\"text-right\">\n          {renderSubmitButton({\n            loading: this.props.downloadUrlPytorch,\n            originalText: 'Download as PyTorch',\n            loadingText: 'Downloading...',\n            btnColor: 'dark',\n            size: 'sm',\n            onClick: () => this.onDownloadClick('pytorch'),\n          })}\n        </Col>\n        <Col xs={6} className=\"text-left\">\n          {renderSubmitButton({\n            loading: this.props.downloadUrlOnnx,\n            originalText: 'Download as ONNX',\n            loadingText: 'Downloading...',\n            btnColor: 'dark',\n            size: 'sm',\n            onClick: () => this.onDownloadClick('onnx'),\n          })}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  inference: { token, downloadUrlPytorch, downloadUrlOnnx },\n}) => {\n  return { token, downloadUrlPytorch, downloadUrlOnnx };\n};\n\nexport default connect(mapStateToProps, {\n  setInferenceDownloadUrl,\n  clearInferenceDownloadUrl,\n})(DownloadForm);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { submitInferenceData, clearInferencePrediction } from '../../actions';\nimport {\n  renderFormField,\n  renderSubmitButton,\n  convertFileToBase64,\n  removeFileBase64Header,\n} from '../../utils';\nimport FormFileField from '../FormFileField';\n\nclass InferenceForm extends React.Component {\n  onSubmit = async ({ inferenceInput }) => {\n    this.props.clearInferencePrediction();\n\n    // Get input type\n    let inputType = 'text';\n    if (typeof inferenceInput === 'object') {\n      inputType = 'image';\n      inferenceInput = await convertFileToBase64(inferenceInput[0]);\n    }\n\n    // If input is non-text, convert it to base64 string\n    this.props.submitInferenceData({\n      formName: this.props.form,\n      formInput: {\n        token: this.props.token,\n        input:\n          inputType === 'image'\n            ? removeFileBase64Header(inferenceInput)\n            : inferenceInput,\n      },\n    });\n\n    // Send input to props for display\n    this.props.onSubmit(inferenceInput);\n  };\n\n  render() {\n    const { contentType, label, acceptFileFormat } = this.props.field;\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"mt-5 mt-md-0\"\n      >\n        {contentType === 'file' ? (\n          <>\n            <div className=\"text-center\">\n              <ImUpload3 size={35} className=\"mb-3\" />\n            </div>\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'inferenceInput',\n                component: renderFormField,\n                contentType,\n                label,\n                acceptFileFormat,\n              }}\n            />\n          </>\n        ) : (\n          <Field\n            name=\"inferenceInput\"\n            component={renderFormField}\n            contentType={contentType}\n            label={label}\n          />\n        )}\n        <Row className=\"mt-3\">\n          <Col className=\"mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              originalText: 'Predict',\n              loadingText: 'Predicting...',\n            })}\n          </Col>\n          <Col xs={12}>\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.inferenceInput) {\n    errors.inferenceInput = 'This field cannot be empty';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceData,\n  clearInferencePrediction,\n})(reduxForm({ form: 'inferenceForm', validate })(InferenceForm));\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\n\nimport DownloadForm from './DownloadForm';\nimport InferenceForm from './InferenceForm';\n\nclass TaskDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inferenceInput: null,\n    };\n\n    // Set field values for form\n    let fieldValues = {};\n    if (this.props.taskType === 'imageClassification') {\n      fieldValues = {\n        contentType: 'file',\n        label: 'Upload Image',\n        acceptFileFormat: 'image/jpeg,image/png',\n      };\n    } else {\n      fieldValues = {\n        contentType: 'text',\n        label: 'Enter Text:',\n      };\n    }\n    this.fieldValues = fieldValues;\n  }\n\n  onSubmit = inferenceInput => {\n    if (this.props.taskType === 'imageClassification') {\n      this.setState({ inferenceInput: inferenceInput });\n    } else {\n      this.setState({ inferenceInput });\n    }\n  };\n\n  renderAccuracy() {\n    return (\n      <>\n        <h5 className=\"text-center mb-3\">\n          Best Accuracy:{' '}\n          <mark>\n            <b>\n              {(\n                this.props.accuracy * (this.props.accuracy < 1 ? 100 : 1)\n              ).toFixed(2)}{' '}\n              %\n            </b>\n          </mark>\n        </h5>\n        <Card\n          className=\"shadow bg-white rounded mx-auto\"\n          style={{ height: this.props.isMobile ? '20vh' : '30vh' }}\n        >\n          <Card.Img\n            variant=\"top\"\n            src={`data:image/jpeg;base64,${this.props.accuracyPlot}`}\n            alt=\"text classification example dataset preview\"\n          />\n        </Card>\n      </>\n    );\n  }\n\n  renderOutput() {\n    return (\n      <Row className=\"mb-5\">\n        <Col xs={12} className=\"mt-4\">\n          <h4 className=\"text-center\">Results</h4>\n        </Col>\n        <Col xs={12} lg={6} className=\"mt-4 ml-auto text-center\">\n          <h4 className=\"text-center\">Input</h4>\n          {this.props.taskType === 'imageClassification' ? (\n            <Card\n              className=\"mx-auto mt-3 shadow bg-white rounded\"\n              style={{ width: '20rem' }}\n            >\n              <Card.Img\n                variant=\"top\"\n                src={this.state.inferenceInput}\n                alt=\"source\"\n              />\n            </Card>\n          ) : (\n            <Card className=\"mx-auto shadow p-3 bg-white rounded\">\n              <Card.Body>\n                <Card.Text as=\"h5\">{this.state.inferenceInput}</Card.Text>\n              </Card.Body>\n            </Card>\n          )}\n        </Col>\n        <Col xs={12} lg={6} className=\"mt-5 mt-md-4 mr-auto text-center\">\n          <h4 className=\"text-center\">Prediction</h4>\n          <Card className=\"mx-auto mt-3 shadow bg-white rounded\">\n            <Card.Body>\n              <Card.Title as=\"h5\">{this.props.prediction}</Card.Title>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row className={`mb-${this.props.isDownloadable ? '3' : '5'}`}>\n          <Col xs={12}>\n            <h4 className=\"text-center\">\n              {this.props.taskType === 'imageClassification'\n                ? 'Image Classification'\n                : 'Text Classification'}\n            </h4>\n          </Col>\n        </Row>\n        {this.props.isDownloadable ? <DownloadForm /> : ''}\n        <Row className=\"mb-5\">\n          <Col\n            xs={12}\n            md={5}\n            className={`${this.props.isMobile ? 'mb-5' : ''} mx-auto`}\n          >\n            {this.renderAccuracy()}\n          </Col>\n          <Col\n            xs={12}\n            md={4}\n            className={`${this.props.isMobile ? 'mt-5' : 'my-auto'} mx-auto`}\n          >\n            <InferenceForm\n              onSubmit={this.onSubmit}\n              taskName={this.props.taskName}\n              field={this.fieldValues}\n            />\n          </Col>\n        </Row>\n        {this.props.prediction ? this.renderOutput() : ''}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  isMobile,\n  inference: { taskType, prediction, isDownloadable, accuracy, accuracyPlot },\n}) => {\n  return {\n    isMobile,\n    taskType,\n    prediction,\n    isDownloadable,\n    accuracy,\n    accuracyPlot,\n  };\n};\n\nexport default connect(mapStateToProps)(TaskDisplay);\n","import _ from 'lodash';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst PreviewTask = () => {\n  const classList = [\n    'birdhouse',\n    'hourglass',\n    'lemon',\n    'pizza',\n    'seashore',\n    'stopwatch',\n  ];\n\n  return (\n    <>\n      <Row className=\"mt-5 mb-4\">\n        <Col>\n          <h4 className=\"text-center\">Preview Model</h4>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={11} className=\"mx-auto\">\n          Want to test out the platform without training a model? No worries. We\n          have prepared a <b>preview</b>{' '}\n          <mark>\n            <b>image classification model</b>\n          </mark>{' '}\n          just for these cases. Please use the token given to below to test it\n          out.\n        </Col>\n      </Row>\n      <Row className=\"my-4\">\n        <Col xs={11} className=\"mx-auto\">\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp;\n            imageClassification-tinyimgnet-demo-a0uac\n          </h5>\n        </Col>\n      </Row>\n      <Row className=\"mt-5\">\n        <Col xs={11} className=\"mx-auto mb-2\">\n          <h5>About the Model</h5>\n        </Col>\n        <Col xs={11} className=\"mx-auto\">\n          <p>\n            The model can classify images belonging to the following{' '}\n            <mark>\n              <b>six classes</b>\n            </mark>\n            :\n          </p>\n          {_.map(classList, item => {\n            return (\n              <Button\n                variant=\"success\"\n                size=\"sm\"\n                className=\"mr-2 my-1\"\n                key={item}\n              >\n                {item}\n              </Button>\n            );\n          })}\n        </Col>\n        <Col xs={11} className=\"mx-auto mt-3\">\n          The model was trained by fine-tuning a{' '}\n          <mark>\n            <b>ResNet34</b>\n          </mark>{' '}\n          model pre-trained on the ImageNet dataset.\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PreviewTask;\n\n// imageClassification-tinyimgnet-demo-dbasb\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { connect } from 'react-redux';\n\nimport { clearInference } from '../../actions';\nimport TokenForm from './TokenForm';\nimport TaskDisplay from './TaskDisplay';\nimport PreviewTask from './PreviewTask';\nimport FloatinHelp from '../FloatingHelp';\n\nclass Inference extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'inference';\n  }\n\n  componentWillUnmount() {\n    this.props.clearInference(this.taskName);\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1 className=\"heading\">Test your Model</h1>\n        <TokenForm />\n        {this.props.token ? (\n          <TaskDisplay taskName={this.taskName} />\n        ) : (\n          <PreviewTask />\n        )}\n        <FloatinHelp target=\"inference\" />\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ inference: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, { clearInference })(Inference);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport FloatinHelp from '../FloatingHelp';\n\nclass Playground extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"heading\">Playground</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={11} className=\"mx-auto text-center\">\n            Don't have any models to train yet? Don't worry, we have trained\n            some fun models for you to try out.\n          </Col>\n        </Row>\n        <FloatinHelp target=\"training\" />\n      </Container>\n    );\n  }\n}\n\nexport default Playground;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Card from 'react-bootstrap/Card';\nimport { Link } from 'react-router-dom';\nimport { FaGithub, FaLinkedin } from 'react-icons/fa';\nimport { SiInstagram } from 'react-icons/si';\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.trainingSectionRef = React.createRef();\n    this.inferenceSectionRef = React.createRef();\n\n    this.trainingSnapshots = [\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/training_page.png`,\n        text: 'Training page',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/img_classification_data_upload.png`,\n        text: 'Image classification data upload',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/tc_data_upload.png`,\n        text: 'Text classification data upload',\n      },\n    ];\n\n    this.inferenceSnapshots = [\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/tc_inference_form.png`,\n        text: 'Inference results',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/img_classification_prediction.png`,\n        text: 'Image classification prediction',\n      },\n      {\n        image: `${process.env.PUBLIC_URL}/assets/media/inference_page.png`,\n        text: 'Inference page',\n      },\n    ];\n  }\n\n  componentDidMount() {\n    const { state: locationState } = this.props.location;\n    if (locationState) {\n      if (locationState.targetSection === 'training') {\n        this.trainingSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      } else if (locationState.targetSection === 'inference') {\n        this.inferenceSectionRef.current.scrollIntoView({\n          behaviour: 'smooth',\n        });\n      }\n    }\n  }\n\n  renderFlash() {\n    return (\n      <mark>\n        <b>\n          <Image\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '1.8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          F L A S H\n        </b>\n      </mark>\n    );\n  }\n\n  renderImageClassificationInfo() {\n    return (\n      <Row>\n        <Col xs={12} md={7} className=\"my-auto\">\n          <h3 className=\"mb-3\">Image Classification</h3>\n          <p>\n            Classify images from your own dataset by using them to train a{' '}\n            <mark>\n              <b>ResNet-34</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>MobileNet v2</b>\n            </mark>{' '}\n            model.\n          </p>\n          <p>\n            Training happens via transfer learning where models available will\n            be pre-trained on the ImageNet dataset.\n          </p>\n        </Col>\n        <Col xs={12} md={5} className=\"my-auto\">\n          <Card className=\"mx-auto mt-4\">\n            <Card.Img\n              variant=\"top\"\n              as=\"video\"\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/imageClassification.mp4`}\n                type=\"video/mp4\"\n              />\n            </Card.Img>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  renderTextClassificationInfo() {\n    return (\n      <Row className=\"my-5\">\n        <Col xs={12} md={7} className=\"my-auto\">\n          <h3 className=\"mb-3\">Text Classification</h3>\n          <p>\n            Classify sentences by training a{' '}\n            <mark>\n              <b>LSTM</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>GRU</b>\n            </mark>{' '}\n            based sequential model on your own dataset.\n          </p>\n          <p>The models will be trained from scratch.</p>\n        </Col>\n        <Col xs={12} md={5} className=\"my-auto\">\n          <Card className=\"mx-auto mt-4\">\n            <Card.Img\n              variant=\"top\"\n              as=\"video\"\n              playsInline=\"playsinline\"\n              autoPlay=\"autoplay\"\n              muted=\"muted\"\n            >\n              <source\n                src={`${process.env.PUBLIC_URL}/assets/media/textClassification.mp4`}\n                type=\"video/mp4\"\n              />\n            </Card.Img>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n\n  renderSnapshots(snapshotData) {\n    return (\n      <Row xs={1} md={3} className=\"mx-auto mt-4\">\n        {snapshotData.map(snapshot => (\n          <Col className=\"mb-3\" key={snapshot.text}>\n            <Card className=\"card-hover shadow bg-white rounded\">\n              <Card.Img\n                variant=\"top\"\n                className=\"img-fluid\"\n                src={snapshot.image}\n                alt={snapshot.text}\n              />\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n\n  renderTrainingInfo() {\n    return (\n      <div ref={this.trainingSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Training</h3>\n        <p>\n          For training a model, you'll have to <b>upload your own dataset</b>{' '}\n          and <b>select the model parameters</b>. Depending on the size of the\n          dataset, the model can take anywhere between{' '}\n          <b>\n            <mark>3 - 10 minutes</mark> to train and deploy your model\n          </b>\n          .\n        </p>\n        <p>\n          After you upload your configuration, the platform will assign you a\n          unique{' '}\n          <mark>\n            <b>token</b>\n          </mark>\n          . Please save the token as it will used to test the model on the{' '}\n          <Link to=\"/inference\">inference page</Link>.\n        </p>\n        <p>\n          To train a model, <Link to=\"/training\">go here</Link>.\n        </p>\n        {this.renderSnapshots(this.trainingSnapshots)}\n      </div>\n    );\n  }\n\n  renderInferenceInfo() {\n    return (\n      <div ref={this.inferenceSectionRef}>\n        <h3 className=\"mb-3 mt-5\">Inference</h3>\n        <p>\n          You can perform inference on a trained model by using the{' '}\n          <b>\n            <mark>token</mark>\n          </b>{' '}\n          provided to you after submitting the training configuration on the{' '}\n          <Link to=\"/training\">training page</Link>.\n        </p>\n        <p>\n          After submitting the token, you'll get a form where you can upload\n          inputs to check the performance of your trained model. The inference\n          page also provides you with the <b>results of the training process</b>{' '}\n          by showing you the{' '}\n          <b>\n            <mark>accuracy</mark>\n          </b>{' '}\n          of the model <b>on validation set</b> as well as the{' '}\n          <b>\n            <mark>change in accuracy</mark>\n          </b>{' '}\n          during training.\n        </p>\n        <p>\n          To test your model, <Link to=\"/inference\">go here</Link>.\n        </p>\n        {this.renderSnapshots(this.inferenceSnapshots)}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Container style={{ fontSize: '1.6vh' }}>\n        <h1 className=\"heading\">\n          About{' '}\n          <Image\n            src={`${process.env.PUBLIC_URL}/flash.svg`}\n            style={{ height: '8vh' }}\n            alt=\"flash logo\"\n          />{' '}\n          Flash\n        </h1>\n        <Row>\n          <Col xs={12} className=\"mx-auto\">\n            <p className=\"text-center mb-5\">\n              {this.renderFlash()}\n              &nbsp;&nbsp;&nbsp; is an <b>end-to-end Deep Learning</b> platform\n              which allows users to create, train and deploy their own neural\n              network models in a matter of minutes without writing a single\n              line of code.\n            </p>\n            <p>The platform currently supports two types of tasks:</p>\n            {this.renderImageClassificationInfo()}\n            {this.renderTextClassificationInfo()}\n            <hr className=\"my-5\" />\n            <h2>How It Works</h2>\n            <p className=\"my-4\">\n              Using {this.renderFlash()} is easy. With just a few clicks you can\n              train and deploy your models automatically. You just have to\n              select your model and upload the dataset, and you're good to go.{' '}\n              <b>No code or experience required.</b>\n            </p>\n            {this.renderTrainingInfo()}\n            {this.renderInferenceInfo()}\n            <hr className=\"my-5\" />\n            <p>\n              The source code of the project is hosted on GitHub. Please{' '}\n              <a\n                href=\"https://github.com/shan18/Flash\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                click here\n              </a>{' '}\n              to visit.\n            </p>\n            <p className=\"mt-4\">\n              To know about the author, check the links below\n            </p>\n            <p>\n              <a\n                className=\"anchor-black\"\n                href=\"https://github.com/shan18\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaGithub size={25} title=\"GitHub: shan18\" />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.linkedin.com/in/shanacharya/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <FaLinkedin\n                  size={25}\n                  title=\"LinkedIn: shanacharya\"\n                  className=\"mx-3\"\n                />\n              </a>\n              <a\n                className=\"anchor-black\"\n                href=\"https://www.instagram.com/shan_1.0/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <SiInstagram size={25} title=\"Instagram: shan_1.0\" />\n              </a>\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\n\nimport history from '../history';\nimport Home from './cover/Home';\nimport NavigationBar from './NavigationBar';\nimport Footer from './Footer';\nimport Training from './train/Training';\nimport Inference from './infer/Inference';\nimport Playground from './play/Playground';\nimport About from './About';\nimport { setMobile } from '../actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  resize() {\n    this.props.setMobile(window.innerWidth <= 767);\n  }\n\n  componentDidMount() {\n    // Check for mobile view\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"page-container\">\n          <div className=\"content-wrap\">\n            <ToastContainer\n              position=\"top-center\"\n              autoClose={false}\n              newestOnTop={false}\n              closeOnClick\n              rtl={false}\n              pauseOnFocusLoss\n              draggable\n              style={{ width: '40%' }}\n            />\n            <NavigationBar />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/training\" exact component={Training} />\n              <Route path=\"/inference\" exact component={Inference} />\n              {/* <Route path=\"/playground\" exact component={Playground} /> */}\n              <Route path=\"/about\" exact component={About} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default connect(null, { setMobile })(App);\n","import { SET_NAV_LINKS } from '../actions/types';\n\nconst navigationReducer = (state = [], action) => {\n  switch (action.type) {\n    case SET_NAV_LINKS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default navigationReducer;\n","import { SET_MOBILE } from '../actions/types';\n\nconst homeReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_MOBILE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","import { SET_HOME, CLEAR_HOME } from '../actions/types';\n\nconst homeReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_HOME:\n      return true;\n    case CLEAR_HOME:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default homeReducer;\n","import { LOADING_FORM, CLEAR_LOADING_FORM } from '../actions/types';\n\nconst loadingFormReducer = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_FORM:\n      return [...state, action.payload];\n    case CLEAR_LOADING_FORM:\n      return state.filter(element => element !== action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default loadingFormReducer;\n","import _ from 'lodash';\nimport {\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n} from '../actions/types';\n\nconst INITIAL_STATE = {};\n\nconst formFileFieldReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_FORM_FILE_FIELD_LABEL:\n      return { ...state, [action.payload.taskName]: action.payload.label };\n    case CLEAR_FORM_FILE_FIELD_LABEL:\n      return _.omit(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default formFileFieldReducer;\n","import _ from 'lodash';\nimport {\n  IC_CONFIG,\n  IC_MODEL_TYPE,\n  IC_DATA_SPLIT,\n  IC_ADD_CLASS,\n  IC_DELETE_CLASS,\n  IC_CURRENT_CLASS,\n  IC_ADD_IMAGES,\n  IC_DATA_CLEAR,\n  IC_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentClass: '',\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: {},\n  datasetSize: {},\n  datasetPreview: {},\n};\n\nconst imageClassificationReducer = (state = INITIAL_STATE, action) => {\n  let dataset, datasetSize, datasetPreview, currentConfig, currentClass;\n  switch (action.type) {\n    case IC_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case IC_MODEL_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case IC_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case IC_ADD_CLASS:\n      dataset = { ...state.dataset, [action.payload]: [] };\n      datasetSize = { ...state.datasetSize, [action.payload]: 0 };\n      datasetPreview = { ...state.datasetPreview, [action.payload]: [] };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case IC_DELETE_CLASS:\n      dataset = _.omit(state.dataset, action.payload);\n      datasetSize = _.omit(state.datasetSize, action.payload);\n      datasetPreview = _.omit(state.datasetPreview, action.payload);\n      currentClass =\n        state.currentClass === action.payload\n          ? INITIAL_STATE.currentClass\n          : state.currentClass;\n      return { ...state, dataset, datasetSize, datasetPreview, currentClass };\n    case IC_CURRENT_CLASS:\n      return { ...state, currentClass: action.payload };\n    case IC_ADD_IMAGES:\n      dataset = {\n        ...state.dataset,\n        [state.currentClass]: [\n          ...state.dataset[state.currentClass],\n          ...action.payload.imagesList,\n        ],\n      };\n      datasetSize = {\n        ...state.datasetSize,\n        [state.currentClass]:\n          state.datasetSize[state.currentClass] + action.payload.imagesListSize,\n      };\n      datasetPreview = {\n        ...state.datasetPreview,\n        [state.currentClass]: [\n          ...state.datasetPreview[state.currentClass],\n          ...action.payload.imagesListPreview,\n        ],\n      };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case IC_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case IC_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default imageClassificationReducer;\n","import _ from 'lodash';\nimport {\n  TC_CONFIG,\n  TC_RNN_TYPE,\n  TC_DATA_SPLIT,\n  TC_DATA_ADD,\n  TC_DATA_CLEAR,\n  TC_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: null,\n};\n\nconst textClassificationReducer = (state = INITIAL_STATE, action) => {\n  let currentConfig;\n  switch (action.type) {\n    case TC_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case TC_RNN_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case TC_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case TC_DATA_ADD:\n      return {\n        ...state,\n        dataset: action.payload,\n      };\n    case TC_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case TC_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default textClassificationReducer;\n","import { TRAIN_TOKEN_SET, TRAIN_TOKEN_CLEAR } from '../actions/types';\n\nconst serverConfigReducer = (state = {}, action) => {\n  switch (action.type) {\n    case TRAIN_TOKEN_SET:\n      return { ...state, token: action.payload };\n    case TRAIN_TOKEN_CLEAR:\n      return { ...state, token: '' };\n    default:\n      return state;\n  }\n};\n\nexport default serverConfigReducer;\n","import _ from 'lodash';\n\nimport {\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n  INFERENCE_DOWNLOAD_SET_PYTORCH,\n  INFERENCE_DOWNLOAD_CLEAR_PYTORCH,\n  INFERENCE_DOWNLOAD_SET_ONNX,\n  INFERENCE_DOWNLOAD_CLEAR_ONNX,\n} from '../actions/types';\n\nconst inferenceReducer = (state = {}, action) => {\n  switch (action.type) {\n    case INFERENCE_CONFIG_SET:\n      return { ...state, ...action.payload };\n    case INFERENCE_CONFIG_CLEAR:\n      return _.omit(state, 'token', 'prediction', 'accuracy', 'accuracyPlot');\n    case INFERENCE_SUBMIT:\n      return { ...state, prediction: action.payload };\n    case INFERENCE_PREDICTION_CLEAR:\n      return _.omit(state, 'prediction');\n    case INFERENCE_DOWNLOAD_SET_PYTORCH:\n      return { ...state, downloadUrlPytorch: action.payload.downloadUrl };\n    case INFERENCE_DOWNLOAD_CLEAR_PYTORCH:\n      return _.omit(state, 'downloadUrlPytorch');\n    case INFERENCE_DOWNLOAD_SET_ONNX:\n      return { ...state, downloadUrlOnnx: action.payload.downloadUrl };\n    case INFERENCE_DOWNLOAD_CLEAR_ONNX:\n      return _.omit(state, 'downloadUrlOnnx');\n    case INFERENCE_CLEAR:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default inferenceReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport navigationReducer from './navigationReducer';\nimport mobileViewReducer from './mobileViewReducer';\nimport homeReducer from './homeReducer';\nimport loadingFormReducer from './loadingFormReducer';\nimport formFileFieldReducer from './formFileFieldReducer';\nimport imageClassificationReducer from './imageClassificationReducer';\nimport textClassificationReducer from './textClassificationReducer';\nimport serverConfigReducer from './serverConfigReducer';\nimport inferenceReducer from './inferenceReducer';\n\nexport default combineReducers({\n  form: formReducer,\n  navigationLinks: navigationReducer,\n  isMobile: mobileViewReducer,\n  isHome: homeReducer,\n  loadingForm: loadingFormReducer,\n  formFileField: formFileFieldReducer,\n  imageClassification: imageClassificationReducer,\n  textClassification: textClassificationReducer,\n  serverConfig: serverConfigReducer,\n  inference: inferenceReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}